// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: surebet.proto

package surebetpb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CheckLineRequest struct {
	Line *Line `protobuf:"bytes,1,opt,name=line,proto3" json:"line,omitempty"`
}

func (m *CheckLineRequest) Reset()      { *m = CheckLineRequest{} }
func (*CheckLineRequest) ProtoMessage() {}
func (*CheckLineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4fed42b5e3ea230, []int{0}
}
func (m *CheckLineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckLineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckLineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckLineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckLineRequest.Merge(m, src)
}
func (m *CheckLineRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckLineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckLineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckLineRequest proto.InternalMessageInfo

func (m *CheckLineRequest) GetLine() *Line {
	if m != nil {
		return m.Line
	}
	return nil
}

type CheckLineResponse struct {
	Price int64 `protobuf:"varint,1,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *CheckLineResponse) Reset()      { *m = CheckLineResponse{} }
func (*CheckLineResponse) ProtoMessage() {}
func (*CheckLineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4fed42b5e3ea230, []int{1}
}
func (m *CheckLineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckLineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckLineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckLineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckLineResponse.Merge(m, src)
}
func (m *CheckLineResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckLineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckLineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckLineResponse proto.InternalMessageInfo

func (m *CheckLineResponse) GetPrice() int64 {
	if m != nil {
		return m.Price
	}
	return 0
}

type Line struct {
	Num         int64  `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	//    int64 service_id = 11;
	SportName  string  `protobuf:"bytes,3,opt,name=sport_name,json=sportName,proto3" json:"sport_name,omitempty"`
	SportId    int64   `protobuf:"varint,11,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	LeagueName string  `protobuf:"bytes,4,opt,name=league_name,json=leagueName,proto3" json:"league_name,omitempty"`
	LeagueId   int64   `protobuf:"varint,12,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	Home       string  `protobuf:"bytes,5,opt,name=home,proto3" json:"home,omitempty"`
	Away       string  `protobuf:"bytes,6,opt,name=away,proto3" json:"away,omitempty"`
	MarketName string  `protobuf:"bytes,7,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`
	Price      float64 `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	Url        string  `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	Initiator  bool    `protobuf:"varint,10,opt,name=initiator,proto3" json:"initiator,omitempty"`
	Starts     string  `protobuf:"bytes,13,opt,name=starts,proto3" json:"starts,omitempty"`
	EventId    int64   `protobuf:"varint,14,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
}

func (m *Line) Reset()      { *m = Line{} }
func (*Line) ProtoMessage() {}
func (*Line) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4fed42b5e3ea230, []int{2}
}
func (m *Line) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Line) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Line.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Line) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Line.Merge(m, src)
}
func (m *Line) XXX_Size() int {
	return m.Size()
}
func (m *Line) XXX_DiscardUnknown() {
	xxx_messageInfo_Line.DiscardUnknown(m)
}

var xxx_messageInfo_Line proto.InternalMessageInfo

func (m *Line) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *Line) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *Line) GetSportName() string {
	if m != nil {
		return m.SportName
	}
	return ""
}

func (m *Line) GetSportId() int64 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *Line) GetLeagueName() string {
	if m != nil {
		return m.LeagueName
	}
	return ""
}

func (m *Line) GetLeagueId() int64 {
	if m != nil {
		return m.LeagueId
	}
	return 0
}

func (m *Line) GetHome() string {
	if m != nil {
		return m.Home
	}
	return ""
}

func (m *Line) GetAway() string {
	if m != nil {
		return m.Away
	}
	return ""
}

func (m *Line) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *Line) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Line) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Line) GetInitiator() bool {
	if m != nil {
		return m.Initiator
	}
	return false
}

func (m *Line) GetStarts() string {
	if m != nil {
		return m.Starts
	}
	return ""
}

func (m *Line) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func init() {
	proto.RegisterType((*CheckLineRequest)(nil), "surebetpb.CheckLineRequest")
	proto.RegisterType((*CheckLineResponse)(nil), "surebetpb.CheckLineResponse")
	proto.RegisterType((*Line)(nil), "surebetpb.Line")
}

func init() { proto.RegisterFile("surebet.proto", fileDescriptor_c4fed42b5e3ea230) }

var fileDescriptor_c4fed42b5e3ea230 = []byte{
	// 438 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xb1, 0x6e, 0x13, 0x41,
	0x10, 0xbd, 0x8d, 0x1d, 0xdb, 0x37, 0x4e, 0x20, 0xac, 0x10, 0x5a, 0x92, 0xb0, 0x18, 0xd3, 0x98,
	0x02, 0x47, 0x0a, 0x45, 0x7a, 0x68, 0xb0, 0x84, 0x28, 0x9c, 0x8e, 0x06, 0xdd, 0xf9, 0x86, 0xf3,
	0x2a, 0xbe, 0xdb, 0x63, 0x6f, 0x2f, 0x88, 0x8e, 0x4f, 0xe0, 0x33, 0xf8, 0x14, 0xca, 0x94, 0x29,
	0xf1, 0xf9, 0x07, 0x68, 0x90, 0x28, 0xd1, 0xce, 0xae, 0x9c, 0x08, 0xa5, 0x9b, 0xf7, 0xe6, 0xbd,
	0x99, 0x9d, 0x99, 0x85, 0xfd, 0xba, 0x31, 0x98, 0xa2, 0x9d, 0x56, 0x46, 0x5b, 0xcd, 0xe3, 0x00,
	0xab, 0xf4, 0xf0, 0x65, 0xae, 0xec, 0xb2, 0x49, 0xa7, 0x0b, 0x5d, 0x9c, 0xe4, 0x3a, 0xd7, 0x27,
	0xa4, 0x48, 0x9b, 0x4f, 0x84, 0x08, 0x50, 0xe4, 0x9d, 0xe3, 0x33, 0x38, 0x78, 0xb3, 0xc4, 0xc5,
	0xc5, 0x3b, 0x55, 0xe2, 0x1c, 0x3f, 0x37, 0x58, 0x5b, 0xfe, 0x1c, 0xba, 0x2b, 0x55, 0xa2, 0x60,
	0x23, 0x36, 0x19, 0x9e, 0xde, 0x9f, 0x6e, 0x8b, 0x4f, 0x49, 0x45, 0xc9, 0xf1, 0x0b, 0x78, 0x70,
	0xcb, 0x58, 0x57, 0xba, 0xac, 0x91, 0x3f, 0x84, 0xdd, 0xca, 0xa8, 0x85, 0xb7, 0x76, 0xe6, 0x1e,
	0x8c, 0xff, 0xec, 0x40, 0xd7, 0xc9, 0xf8, 0x01, 0x74, 0xca, 0xa6, 0x08, 0x49, 0x17, 0xf2, 0x67,
	0xb0, 0x57, 0xa3, 0xb9, 0x54, 0x0b, 0xfc, 0x58, 0x26, 0x05, 0x8a, 0x9d, 0x11, 0x9b, 0xc4, 0xf3,
	0x61, 0xe0, 0xde, 0x27, 0x05, 0xf2, 0x27, 0x00, 0x75, 0xa5, 0x8d, 0xf5, 0x82, 0x0e, 0x09, 0x62,
	0x62, 0x28, 0xfd, 0x18, 0x06, 0x3e, 0xad, 0x32, 0x31, 0xa4, 0xc2, 0x7d, 0xc2, 0xb3, 0x8c, 0x3f,
	0x85, 0xe1, 0x0a, 0x93, 0xbc, 0x09, 0xb5, 0xbb, 0x64, 0x05, 0x4f, 0x91, 0xf7, 0x08, 0xe2, 0x20,
	0x50, 0x99, 0xd8, 0x23, 0xf3, 0xc0, 0x13, 0xb3, 0x8c, 0x73, 0xe8, 0x2e, 0x75, 0x81, 0x62, 0x97,
	0x6c, 0x14, 0x3b, 0x2e, 0xf9, 0x92, 0x7c, 0x15, 0x3d, 0xcf, 0xb9, 0xd8, 0x75, 0x29, 0x12, 0x73,
	0x81, 0xe1, 0x81, 0x7d, 0xdf, 0xc5, 0x53, 0xd4, 0x65, 0xbb, 0x94, 0xc1, 0x88, 0x4d, 0x58, 0x58,
	0x8a, 0xdb, 0x45, 0x63, 0x56, 0x22, 0x26, 0xb9, 0x0b, 0xf9, 0x31, 0xc4, 0xaa, 0x54, 0x56, 0x25,
	0x56, 0x1b, 0x01, 0x23, 0x36, 0x19, 0xcc, 0x6f, 0x08, 0xfe, 0x08, 0x7a, 0xb5, 0x4d, 0x8c, 0xad,
	0xc5, 0x3e, 0x59, 0x02, 0x72, 0xf3, 0xe3, 0x25, 0x96, 0x34, 0xff, 0x3d, 0x3f, 0x3f, 0xe1, 0x59,
	0x76, 0x7a, 0x0e, 0xfd, 0x73, 0x7f, 0x3a, 0xfe, 0x16, 0xe2, 0xed, 0xb5, 0xf8, 0xd1, 0xad, 0x8b,
	0xfe, 0x7f, 0xfc, 0xc3, 0xe3, 0xbb, 0x93, 0xfe, 0xc0, 0xe3, 0xe8, 0xf5, 0xd9, 0xf5, 0x5a, 0x46,
	0xbf, 0xd7, 0x92, 0xfd, 0x5d, 0x4b, 0xf6, 0xad, 0x95, 0xec, 0x47, 0x2b, 0xd9, 0xcf, 0x56, 0xb2,
	0xab, 0x56, 0xb2, 0x5f, 0xad, 0x64, 0xdf, 0x37, 0x32, 0xba, 0xda, 0xc8, 0xe8, 0x7a, 0x23, 0xa3,
	0x0f, 0x37, 0x1f, 0x33, 0xed, 0xd1, 0x87, 0x7b, 0xf5, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x9c,
	0x57, 0xc6, 0xbb, 0x02, 0x00, 0x00,
}

func (this *CheckLineRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckLineRequest)
	if !ok {
		that2, ok := that.(CheckLineRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Line.Equal(that1.Line) {
		return false
	}
	return true
}
func (this *CheckLineResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckLineResponse)
	if !ok {
		that2, ok := that.(CheckLineResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	return true
}
func (this *Line) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Line)
	if !ok {
		that2, ok := that.(Line)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if this.SportName != that1.SportName {
		return false
	}
	if this.SportId != that1.SportId {
		return false
	}
	if this.LeagueName != that1.LeagueName {
		return false
	}
	if this.LeagueId != that1.LeagueId {
		return false
	}
	if this.Home != that1.Home {
		return false
	}
	if this.Away != that1.Away {
		return false
	}
	if this.MarketName != that1.MarketName {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Initiator != that1.Initiator {
		return false
	}
	if this.Starts != that1.Starts {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	return true
}
func (this *CheckLineRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&surebetpb.CheckLineRequest{")
	if this.Line != nil {
		s = append(s, "Line: "+fmt.Sprintf("%#v", this.Line)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckLineResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&surebetpb.CheckLineResponse{")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Line) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&surebetpb.Line{")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "ServiceName: "+fmt.Sprintf("%#v", this.ServiceName)+",\n")
	s = append(s, "SportName: "+fmt.Sprintf("%#v", this.SportName)+",\n")
	s = append(s, "SportId: "+fmt.Sprintf("%#v", this.SportId)+",\n")
	s = append(s, "LeagueName: "+fmt.Sprintf("%#v", this.LeagueName)+",\n")
	s = append(s, "LeagueId: "+fmt.Sprintf("%#v", this.LeagueId)+",\n")
	s = append(s, "Home: "+fmt.Sprintf("%#v", this.Home)+",\n")
	s = append(s, "Away: "+fmt.Sprintf("%#v", this.Away)+",\n")
	s = append(s, "MarketName: "+fmt.Sprintf("%#v", this.MarketName)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Initiator: "+fmt.Sprintf("%#v", this.Initiator)+",\n")
	s = append(s, "Starts: "+fmt.Sprintf("%#v", this.Starts)+",\n")
	s = append(s, "EventId: "+fmt.Sprintf("%#v", this.EventId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSurebet(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SurebetClient is the client API for Surebet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SurebetClient interface {
	CheckLine(ctx context.Context, in *CheckLineRequest, opts ...grpc.CallOption) (*CheckLineResponse, error)
}

type surebetClient struct {
	cc *grpc.ClientConn
}

func NewSurebetClient(cc *grpc.ClientConn) SurebetClient {
	return &surebetClient{cc}
}

func (c *surebetClient) CheckLine(ctx context.Context, in *CheckLineRequest, opts ...grpc.CallOption) (*CheckLineResponse, error) {
	out := new(CheckLineResponse)
	err := c.cc.Invoke(ctx, "/surebetpb.Surebet/CheckLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurebetServer is the server API for Surebet service.
type SurebetServer interface {
	CheckLine(context.Context, *CheckLineRequest) (*CheckLineResponse, error)
}

// UnimplementedSurebetServer can be embedded to have forward compatible implementations.
type UnimplementedSurebetServer struct {
}

func (*UnimplementedSurebetServer) CheckLine(ctx context.Context, req *CheckLineRequest) (*CheckLineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLine not implemented")
}

func RegisterSurebetServer(s *grpc.Server, srv SurebetServer) {
	s.RegisterService(&_Surebet_serviceDesc, srv)
}

func _Surebet_CheckLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurebetServer).CheckLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/surebetpb.Surebet/CheckLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurebetServer).CheckLine(ctx, req.(*CheckLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Surebet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "surebetpb.Surebet",
	HandlerType: (*SurebetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckLine",
			Handler:    _Surebet_CheckLine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "surebet.proto",
}

func (m *CheckLineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckLineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckLineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Line != nil {
		{
			size, err := m.Line.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSurebet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckLineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckLineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckLineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintSurebet(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Line) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Line) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Line) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EventId != 0 {
		i = encodeVarintSurebet(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x70
	}
	if len(m.Starts) > 0 {
		i -= len(m.Starts)
		copy(dAtA[i:], m.Starts)
		i = encodeVarintSurebet(dAtA, i, uint64(len(m.Starts)))
		i--
		dAtA[i] = 0x6a
	}
	if m.LeagueId != 0 {
		i = encodeVarintSurebet(dAtA, i, uint64(m.LeagueId))
		i--
		dAtA[i] = 0x60
	}
	if m.SportId != 0 {
		i = encodeVarintSurebet(dAtA, i, uint64(m.SportId))
		i--
		dAtA[i] = 0x58
	}
	if m.Initiator {
		i--
		if m.Initiator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintSurebet(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x41
	}
	if len(m.MarketName) > 0 {
		i -= len(m.MarketName)
		copy(dAtA[i:], m.MarketName)
		i = encodeVarintSurebet(dAtA, i, uint64(len(m.MarketName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Away) > 0 {
		i -= len(m.Away)
		copy(dAtA[i:], m.Away)
		i = encodeVarintSurebet(dAtA, i, uint64(len(m.Away)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Home) > 0 {
		i -= len(m.Home)
		copy(dAtA[i:], m.Home)
		i = encodeVarintSurebet(dAtA, i, uint64(len(m.Home)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LeagueName) > 0 {
		i -= len(m.LeagueName)
		copy(dAtA[i:], m.LeagueName)
		i = encodeVarintSurebet(dAtA, i, uint64(len(m.LeagueName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SportName) > 0 {
		i -= len(m.SportName)
		copy(dAtA[i:], m.SportName)
		i = encodeVarintSurebet(dAtA, i, uint64(len(m.SportName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintSurebet(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Num != 0 {
		i = encodeVarintSurebet(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSurebet(dAtA []byte, offset int, v uint64) int {
	offset -= sovSurebet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedCheckLineRequest(r randySurebet, easy bool) *CheckLineRequest {
	this := &CheckLineRequest{}
	if r.Intn(5) != 0 {
		this.Line = NewPopulatedLine(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCheckLineResponse(r randySurebet, easy bool) *CheckLineResponse {
	this := &CheckLineResponse{}
	this.Price = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Price *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedLine(r randySurebet, easy bool) *Line {
	this := &Line{}
	this.Num = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	this.ServiceName = string(randStringSurebet(r))
	this.SportName = string(randStringSurebet(r))
	this.LeagueName = string(randStringSurebet(r))
	this.Home = string(randStringSurebet(r))
	this.Away = string(randStringSurebet(r))
	this.MarketName = string(randStringSurebet(r))
	this.Price = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Price *= -1
	}
	this.Url = string(randStringSurebet(r))
	this.Initiator = bool(bool(r.Intn(2) == 0))
	this.SportId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.SportId *= -1
	}
	this.LeagueId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.LeagueId *= -1
	}
	this.Starts = string(randStringSurebet(r))
	this.EventId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.EventId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randySurebet interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSurebet(r randySurebet) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSurebet(r randySurebet) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneSurebet(r)
	}
	return string(tmps)
}
func randUnrecognizedSurebet(r randySurebet, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSurebet(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSurebet(dAtA []byte, r randySurebet, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSurebet(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateSurebet(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateSurebet(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSurebet(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSurebet(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSurebet(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSurebet(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *CheckLineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Line != nil {
		l = m.Line.Size()
		n += 1 + l + sovSurebet(uint64(l))
	}
	return n
}

func (m *CheckLineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Price != 0 {
		n += 1 + sovSurebet(uint64(m.Price))
	}
	return n
}

func (m *Line) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovSurebet(uint64(m.Num))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovSurebet(uint64(l))
	}
	l = len(m.SportName)
	if l > 0 {
		n += 1 + l + sovSurebet(uint64(l))
	}
	l = len(m.LeagueName)
	if l > 0 {
		n += 1 + l + sovSurebet(uint64(l))
	}
	l = len(m.Home)
	if l > 0 {
		n += 1 + l + sovSurebet(uint64(l))
	}
	l = len(m.Away)
	if l > 0 {
		n += 1 + l + sovSurebet(uint64(l))
	}
	l = len(m.MarketName)
	if l > 0 {
		n += 1 + l + sovSurebet(uint64(l))
	}
	if m.Price != 0 {
		n += 9
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovSurebet(uint64(l))
	}
	if m.Initiator {
		n += 2
	}
	if m.SportId != 0 {
		n += 1 + sovSurebet(uint64(m.SportId))
	}
	if m.LeagueId != 0 {
		n += 1 + sovSurebet(uint64(m.LeagueId))
	}
	l = len(m.Starts)
	if l > 0 {
		n += 1 + l + sovSurebet(uint64(l))
	}
	if m.EventId != 0 {
		n += 1 + sovSurebet(uint64(m.EventId))
	}
	return n
}

func sovSurebet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSurebet(x uint64) (n int) {
	return sovSurebet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CheckLineRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckLineRequest{`,
		`Line:` + strings.Replace(this.Line.String(), "Line", "Line", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckLineResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckLineResponse{`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Line) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Line{`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`SportName:` + fmt.Sprintf("%v", this.SportName) + `,`,
		`LeagueName:` + fmt.Sprintf("%v", this.LeagueName) + `,`,
		`Home:` + fmt.Sprintf("%v", this.Home) + `,`,
		`Away:` + fmt.Sprintf("%v", this.Away) + `,`,
		`MarketName:` + fmt.Sprintf("%v", this.MarketName) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Initiator:` + fmt.Sprintf("%v", this.Initiator) + `,`,
		`SportId:` + fmt.Sprintf("%v", this.SportId) + `,`,
		`LeagueId:` + fmt.Sprintf("%v", this.LeagueId) + `,`,
		`Starts:` + fmt.Sprintf("%v", this.Starts) + `,`,
		`EventId:` + fmt.Sprintf("%v", this.EventId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSurebet(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CheckLineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSurebet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckLineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckLineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Line", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSurebet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSurebet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Line == nil {
				m.Line = &Line{}
			}
			if err := m.Line.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSurebet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSurebet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSurebet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckLineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSurebet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckLineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckLineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSurebet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSurebet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSurebet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Line) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSurebet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Line: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Line: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSurebet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSurebet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSurebet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSurebet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeagueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSurebet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSurebet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeagueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Home", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSurebet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSurebet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Home = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Away", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSurebet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSurebet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Away = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSurebet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSurebet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSurebet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSurebet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Initiator = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportId", wireType)
			}
			m.SportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SportId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeagueId", wireType)
			}
			m.LeagueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeagueId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Starts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSurebet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSurebet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Starts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSurebet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSurebet
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSurebet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSurebet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSurebet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSurebet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSurebet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSurebet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSurebet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSurebet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSurebet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSurebet = fmt.Errorf("proto: unexpected end of group")
)
