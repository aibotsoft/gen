/*
 * Black API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package blackapi

import (
	"encoding/json"
)

// League struct for League
type League struct {
	CompBookie *bool `json:"comp_bookie,omitempty"`
	Country *string `json:"country,omitempty"`
	Name *string `json:"name,omitempty"`
	Rank *int64 `json:"rank,omitempty"`
	Events *map[string]Event `json:"events,omitempty"`
}

// NewLeague instantiates a new League object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeague() *League {
	this := League{}
	return &this
}

// NewLeagueWithDefaults instantiates a new League object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeagueWithDefaults() *League {
	this := League{}
	return &this
}

// GetCompBookie returns the CompBookie field value if set, zero value otherwise.
func (o *League) GetCompBookie() bool {
	if o == nil || o.CompBookie == nil {
		var ret bool
		return ret
	}
	return *o.CompBookie
}

// GetCompBookieOk returns a tuple with the CompBookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *League) GetCompBookieOk() (*bool, bool) {
	if o == nil || o.CompBookie == nil {
		return nil, false
	}
	return o.CompBookie, true
}

// HasCompBookie returns a boolean if a field has been set.
func (o *League) HasCompBookie() bool {
	if o != nil && o.CompBookie != nil {
		return true
	}

	return false
}

// SetCompBookie gets a reference to the given bool and assigns it to the CompBookie field.
func (o *League) SetCompBookie(v bool) {
	o.CompBookie = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *League) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *League) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *League) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *League) SetCountry(v string) {
	o.Country = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *League) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *League) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *League) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *League) SetName(v string) {
	o.Name = &v
}

// GetRank returns the Rank field value if set, zero value otherwise.
func (o *League) GetRank() int64 {
	if o == nil || o.Rank == nil {
		var ret int64
		return ret
	}
	return *o.Rank
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *League) GetRankOk() (*int64, bool) {
	if o == nil || o.Rank == nil {
		return nil, false
	}
	return o.Rank, true
}

// HasRank returns a boolean if a field has been set.
func (o *League) HasRank() bool {
	if o != nil && o.Rank != nil {
		return true
	}

	return false
}

// SetRank gets a reference to the given int64 and assigns it to the Rank field.
func (o *League) SetRank(v int64) {
	o.Rank = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *League) GetEvents() map[string]Event {
	if o == nil || o.Events == nil {
		var ret map[string]Event
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *League) GetEventsOk() (*map[string]Event, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *League) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given map[string]Event and assigns it to the Events field.
func (o *League) SetEvents(v map[string]Event) {
	o.Events = &v
}

func (o League) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompBookie != nil {
		toSerialize["comp_bookie"] = o.CompBookie
	}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Rank != nil {
		toSerialize["rank"] = o.Rank
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	return json.Marshal(toSerialize)
}

type NullableLeague struct {
	value *League
	isSet bool
}

func (v NullableLeague) Get() *League {
	return v.value
}

func (v *NullableLeague) Set(val *League) {
	v.value = val
	v.isSet = true
}

func (v NullableLeague) IsSet() bool {
	return v.isSet
}

func (v *NullableLeague) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeague(val *League) *NullableLeague {
	return &NullableLeague{value: val, isSet: true}
}

func (v NullableLeague) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeague) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
