/*
 * Black API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package blackapi

import (
	"encoding/json"
	"time"
)

// EventInfo struct for EventInfo
type EventInfo struct {
	EventId string `json:"event_id"`
	HomeId int64 `json:"home_id"`
	HomeTeam string `json:"home_team"`
	AwayId int64 `json:"away_id"`
	AwayTeam string `json:"away_team"`
	CompetitionId int64 `json:"competition_id"`
	CompetitionName string `json:"competition_name"`
	CompetitionCountry string `json:"competition_country"`
	StartTime time.Time `json:"start_time"`
	Date string `json:"date"`
}

// NewEventInfo instantiates a new EventInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventInfo(eventId string, homeId int64, homeTeam string, awayId int64, awayTeam string, competitionId int64, competitionName string, competitionCountry string, startTime time.Time, date string, ) *EventInfo {
	this := EventInfo{}
	this.EventId = eventId
	this.HomeId = homeId
	this.HomeTeam = homeTeam
	this.AwayId = awayId
	this.AwayTeam = awayTeam
	this.CompetitionId = competitionId
	this.CompetitionName = competitionName
	this.CompetitionCountry = competitionCountry
	this.StartTime = startTime
	this.Date = date
	return &this
}

// NewEventInfoWithDefaults instantiates a new EventInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventInfoWithDefaults() *EventInfo {
	this := EventInfo{}
	return &this
}

// GetEventId returns the EventId field value
func (o *EventInfo) GetEventId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *EventInfo) GetEventIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *EventInfo) SetEventId(v string) {
	o.EventId = v
}

// GetHomeId returns the HomeId field value
func (o *EventInfo) GetHomeId() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.HomeId
}

// GetHomeIdOk returns a tuple with the HomeId field value
// and a boolean to check if the value has been set.
func (o *EventInfo) GetHomeIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HomeId, true
}

// SetHomeId sets field value
func (o *EventInfo) SetHomeId(v int64) {
	o.HomeId = v
}

// GetHomeTeam returns the HomeTeam field value
func (o *EventInfo) GetHomeTeam() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.HomeTeam
}

// GetHomeTeamOk returns a tuple with the HomeTeam field value
// and a boolean to check if the value has been set.
func (o *EventInfo) GetHomeTeamOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HomeTeam, true
}

// SetHomeTeam sets field value
func (o *EventInfo) SetHomeTeam(v string) {
	o.HomeTeam = v
}

// GetAwayId returns the AwayId field value
func (o *EventInfo) GetAwayId() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.AwayId
}

// GetAwayIdOk returns a tuple with the AwayId field value
// and a boolean to check if the value has been set.
func (o *EventInfo) GetAwayIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AwayId, true
}

// SetAwayId sets field value
func (o *EventInfo) SetAwayId(v int64) {
	o.AwayId = v
}

// GetAwayTeam returns the AwayTeam field value
func (o *EventInfo) GetAwayTeam() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.AwayTeam
}

// GetAwayTeamOk returns a tuple with the AwayTeam field value
// and a boolean to check if the value has been set.
func (o *EventInfo) GetAwayTeamOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AwayTeam, true
}

// SetAwayTeam sets field value
func (o *EventInfo) SetAwayTeam(v string) {
	o.AwayTeam = v
}

// GetCompetitionId returns the CompetitionId field value
func (o *EventInfo) GetCompetitionId() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.CompetitionId
}

// GetCompetitionIdOk returns a tuple with the CompetitionId field value
// and a boolean to check if the value has been set.
func (o *EventInfo) GetCompetitionIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CompetitionId, true
}

// SetCompetitionId sets field value
func (o *EventInfo) SetCompetitionId(v int64) {
	o.CompetitionId = v
}

// GetCompetitionName returns the CompetitionName field value
func (o *EventInfo) GetCompetitionName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.CompetitionName
}

// GetCompetitionNameOk returns a tuple with the CompetitionName field value
// and a boolean to check if the value has been set.
func (o *EventInfo) GetCompetitionNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CompetitionName, true
}

// SetCompetitionName sets field value
func (o *EventInfo) SetCompetitionName(v string) {
	o.CompetitionName = v
}

// GetCompetitionCountry returns the CompetitionCountry field value
func (o *EventInfo) GetCompetitionCountry() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.CompetitionCountry
}

// GetCompetitionCountryOk returns a tuple with the CompetitionCountry field value
// and a boolean to check if the value has been set.
func (o *EventInfo) GetCompetitionCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CompetitionCountry, true
}

// SetCompetitionCountry sets field value
func (o *EventInfo) SetCompetitionCountry(v string) {
	o.CompetitionCountry = v
}

// GetStartTime returns the StartTime field value
func (o *EventInfo) GetStartTime() time.Time {
	if o == nil  {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *EventInfo) GetStartTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *EventInfo) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetDate returns the Date field value
func (o *EventInfo) GetDate() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *EventInfo) GetDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *EventInfo) SetDate(v string) {
	o.Date = v
}

func (o EventInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["event_id"] = o.EventId
	}
	if true {
		toSerialize["home_id"] = o.HomeId
	}
	if true {
		toSerialize["home_team"] = o.HomeTeam
	}
	if true {
		toSerialize["away_id"] = o.AwayId
	}
	if true {
		toSerialize["away_team"] = o.AwayTeam
	}
	if true {
		toSerialize["competition_id"] = o.CompetitionId
	}
	if true {
		toSerialize["competition_name"] = o.CompetitionName
	}
	if true {
		toSerialize["competition_country"] = o.CompetitionCountry
	}
	if true {
		toSerialize["start_time"] = o.StartTime
	}
	if true {
		toSerialize["date"] = o.Date
	}
	return json.Marshal(toSerialize)
}

type NullableEventInfo struct {
	value *EventInfo
	isSet bool
}

func (v NullableEventInfo) Get() *EventInfo {
	return v.value
}

func (v *NullableEventInfo) Set(val *EventInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEventInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEventInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventInfo(val *EventInfo) *NullableEventInfo {
	return &NullableEventInfo{value: val, isSet: true}
}

func (v NullableEventInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
