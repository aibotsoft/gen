/*
 * Black API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package blackapi

import (
	"encoding/json"
)

// BetBar struct for BetBar
type BetBar struct {
	Success []interface{} `json:"success"`
	Inprogress []interface{} `json:"inprogress"`
	Danger []interface{} `json:"danger"`
	Unplaced []interface{} `json:"unplaced"`
}

// NewBetBar instantiates a new BetBar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBetBar(success []interface{}, inprogress []interface{}, danger []interface{}, unplaced []interface{}, ) *BetBar {
	this := BetBar{}
	this.Success = success
	this.Inprogress = inprogress
	this.Danger = danger
	this.Unplaced = unplaced
	return &this
}

// NewBetBarWithDefaults instantiates a new BetBar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBetBarWithDefaults() *BetBar {
	this := BetBar{}
	return &this
}

// GetSuccess returns the Success field value
func (o *BetBar) GetSuccess() []interface{} {
	if o == nil  {
		var ret []interface{}
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *BetBar) GetSuccessOk() (*[]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *BetBar) SetSuccess(v []interface{}) {
	o.Success = v
}

// GetInprogress returns the Inprogress field value
func (o *BetBar) GetInprogress() []interface{} {
	if o == nil  {
		var ret []interface{}
		return ret
	}

	return o.Inprogress
}

// GetInprogressOk returns a tuple with the Inprogress field value
// and a boolean to check if the value has been set.
func (o *BetBar) GetInprogressOk() (*[]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Inprogress, true
}

// SetInprogress sets field value
func (o *BetBar) SetInprogress(v []interface{}) {
	o.Inprogress = v
}

// GetDanger returns the Danger field value
func (o *BetBar) GetDanger() []interface{} {
	if o == nil  {
		var ret []interface{}
		return ret
	}

	return o.Danger
}

// GetDangerOk returns a tuple with the Danger field value
// and a boolean to check if the value has been set.
func (o *BetBar) GetDangerOk() (*[]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Danger, true
}

// SetDanger sets field value
func (o *BetBar) SetDanger(v []interface{}) {
	o.Danger = v
}

// GetUnplaced returns the Unplaced field value
func (o *BetBar) GetUnplaced() []interface{} {
	if o == nil  {
		var ret []interface{}
		return ret
	}

	return o.Unplaced
}

// GetUnplacedOk returns a tuple with the Unplaced field value
// and a boolean to check if the value has been set.
func (o *BetBar) GetUnplacedOk() (*[]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Unplaced, true
}

// SetUnplaced sets field value
func (o *BetBar) SetUnplaced(v []interface{}) {
	o.Unplaced = v
}

func (o BetBar) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["success"] = o.Success
	}
	if true {
		toSerialize["inprogress"] = o.Inprogress
	}
	if true {
		toSerialize["danger"] = o.Danger
	}
	if true {
		toSerialize["unplaced"] = o.Unplaced
	}
	return json.Marshal(toSerialize)
}

type NullableBetBar struct {
	value *BetBar
	isSet bool
}

func (v NullableBetBar) Get() *BetBar {
	return v.value
}

func (v *NullableBetBar) Set(val *BetBar) {
	v.value = val
	v.isSet = true
}

func (v NullableBetBar) IsSet() bool {
	return v.isSet
}

func (v *NullableBetBar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBetBar(val *BetBar) *NullableBetBar {
	return &NullableBetBar{value: val, isSet: true}
}

func (v NullableBetBar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBetBar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
