/*
 * Black API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package blackapi

import (
	"encoding/json"
	"time"
)

// Event struct for Event
type Event struct {
	Away *string `json:"away,omitempty"`
	Home *string `json:"home,omitempty"`
	IrStatus *string `json:"ir_status,omitempty"`
	Sports *[]string `json:"sports,omitempty"`
	StartTime *time.Time `json:"start_time,omitempty"`
}

// NewEvent instantiates a new Event object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvent() *Event {
	this := Event{}
	return &this
}

// NewEventWithDefaults instantiates a new Event object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventWithDefaults() *Event {
	this := Event{}
	return &this
}

// GetAway returns the Away field value if set, zero value otherwise.
func (o *Event) GetAway() string {
	if o == nil || o.Away == nil {
		var ret string
		return ret
	}
	return *o.Away
}

// GetAwayOk returns a tuple with the Away field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetAwayOk() (*string, bool) {
	if o == nil || o.Away == nil {
		return nil, false
	}
	return o.Away, true
}

// HasAway returns a boolean if a field has been set.
func (o *Event) HasAway() bool {
	if o != nil && o.Away != nil {
		return true
	}

	return false
}

// SetAway gets a reference to the given string and assigns it to the Away field.
func (o *Event) SetAway(v string) {
	o.Away = &v
}

// GetHome returns the Home field value if set, zero value otherwise.
func (o *Event) GetHome() string {
	if o == nil || o.Home == nil {
		var ret string
		return ret
	}
	return *o.Home
}

// GetHomeOk returns a tuple with the Home field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetHomeOk() (*string, bool) {
	if o == nil || o.Home == nil {
		return nil, false
	}
	return o.Home, true
}

// HasHome returns a boolean if a field has been set.
func (o *Event) HasHome() bool {
	if o != nil && o.Home != nil {
		return true
	}

	return false
}

// SetHome gets a reference to the given string and assigns it to the Home field.
func (o *Event) SetHome(v string) {
	o.Home = &v
}

// GetIrStatus returns the IrStatus field value if set, zero value otherwise.
func (o *Event) GetIrStatus() string {
	if o == nil || o.IrStatus == nil {
		var ret string
		return ret
	}
	return *o.IrStatus
}

// GetIrStatusOk returns a tuple with the IrStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetIrStatusOk() (*string, bool) {
	if o == nil || o.IrStatus == nil {
		return nil, false
	}
	return o.IrStatus, true
}

// HasIrStatus returns a boolean if a field has been set.
func (o *Event) HasIrStatus() bool {
	if o != nil && o.IrStatus != nil {
		return true
	}

	return false
}

// SetIrStatus gets a reference to the given string and assigns it to the IrStatus field.
func (o *Event) SetIrStatus(v string) {
	o.IrStatus = &v
}

// GetSports returns the Sports field value if set, zero value otherwise.
func (o *Event) GetSports() []string {
	if o == nil || o.Sports == nil {
		var ret []string
		return ret
	}
	return *o.Sports
}

// GetSportsOk returns a tuple with the Sports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetSportsOk() (*[]string, bool) {
	if o == nil || o.Sports == nil {
		return nil, false
	}
	return o.Sports, true
}

// HasSports returns a boolean if a field has been set.
func (o *Event) HasSports() bool {
	if o != nil && o.Sports != nil {
		return true
	}

	return false
}

// SetSports gets a reference to the given []string and assigns it to the Sports field.
func (o *Event) SetSports(v []string) {
	o.Sports = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *Event) GetStartTime() time.Time {
	if o == nil || o.StartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *Event) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *Event) SetStartTime(v time.Time) {
	o.StartTime = &v
}

func (o Event) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Away != nil {
		toSerialize["away"] = o.Away
	}
	if o.Home != nil {
		toSerialize["home"] = o.Home
	}
	if o.IrStatus != nil {
		toSerialize["ir_status"] = o.IrStatus
	}
	if o.Sports != nil {
		toSerialize["sports"] = o.Sports
	}
	if o.StartTime != nil {
		toSerialize["start_time"] = o.StartTime
	}
	return json.Marshal(toSerialize)
}

type NullableEvent struct {
	value *Event
	isSet bool
}

func (v NullableEvent) Get() *Event {
	return v.value
}

func (v *NullableEvent) Set(val *Event) {
	v.value = val
	v.isSet = true
}

func (v NullableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvent(val *Event) *NullableEvent {
	return &NullableEvent{value: val, isSet: true}
}

func (v NullableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
