/*
 * Black API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package blackapi

import (
	"encoding/json"
)

// BalanceItem struct for BalanceItem
type BalanceItem struct {
	Key string `json:"key"`
	Label string `json:"label"`
	Value float64 `json:"value"`
	Unit string `json:"unit"`
}

// NewBalanceItem instantiates a new BalanceItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBalanceItem(key string, label string, value float64, unit string, ) *BalanceItem {
	this := BalanceItem{}
	this.Key = key
	this.Label = label
	this.Value = value
	this.Unit = unit
	return &this
}

// NewBalanceItemWithDefaults instantiates a new BalanceItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBalanceItemWithDefaults() *BalanceItem {
	this := BalanceItem{}
	return &this
}

// GetKey returns the Key field value
func (o *BalanceItem) GetKey() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *BalanceItem) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *BalanceItem) SetKey(v string) {
	o.Key = v
}

// GetLabel returns the Label field value
func (o *BalanceItem) GetLabel() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *BalanceItem) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *BalanceItem) SetLabel(v string) {
	o.Label = v
}

// GetValue returns the Value field value
func (o *BalanceItem) GetValue() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *BalanceItem) GetValueOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *BalanceItem) SetValue(v float64) {
	o.Value = v
}

// GetUnit returns the Unit field value
func (o *BalanceItem) GetUnit() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *BalanceItem) GetUnitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *BalanceItem) SetUnit(v string) {
	o.Unit = v
}

func (o BalanceItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["label"] = o.Label
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["unit"] = o.Unit
	}
	return json.Marshal(toSerialize)
}

type NullableBalanceItem struct {
	value *BalanceItem
	isSet bool
}

func (v NullableBalanceItem) Get() *BalanceItem {
	return v.value
}

func (v *NullableBalanceItem) Set(val *BalanceItem) {
	v.value = val
	v.isSet = true
}

func (v NullableBalanceItem) IsSet() bool {
	return v.isSet
}

func (v *NullableBalanceItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBalanceItem(val *BalanceItem) *NullableBalanceItem {
	return &NullableBalanceItem{value: val, isSet: true}
}

func (v NullableBalanceItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBalanceItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
