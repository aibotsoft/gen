/*
 * Sample API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package dafapi

import (
	"encoding/json"
)

// SportItem struct for SportItem
type SportItem struct {
	GameId int64 `json:"GameId"`
	Name string `json:"Name"`
	M0 SportItemM0 `json:"M0"`
}

// NewSportItem instantiates a new SportItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSportItem(gameId int64, name string, m0 SportItemM0, ) *SportItem {
	this := SportItem{}
	this.GameId = gameId
	this.Name = name
	this.M0 = m0
	return &this
}

// NewSportItemWithDefaults instantiates a new SportItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSportItemWithDefaults() *SportItem {
	this := SportItem{}
	return &this
}

// GetGameId returns the GameId field value
func (o *SportItem) GetGameId() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.GameId
}

// GetGameIdOk returns a tuple with the GameId field value
// and a boolean to check if the value has been set.
func (o *SportItem) GetGameIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GameId, true
}

// SetGameId sets field value
func (o *SportItem) SetGameId(v int64) {
	o.GameId = v
}

// GetName returns the Name field value
func (o *SportItem) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SportItem) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SportItem) SetName(v string) {
	o.Name = v
}

// GetM0 returns the M0 field value
func (o *SportItem) GetM0() SportItemM0 {
	if o == nil  {
		var ret SportItemM0
		return ret
	}

	return o.M0
}

// GetM0Ok returns a tuple with the M0 field value
// and a boolean to check if the value has been set.
func (o *SportItem) GetM0Ok() (*SportItemM0, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.M0, true
}

// SetM0 sets field value
func (o *SportItem) SetM0(v SportItemM0) {
	o.M0 = v
}

func (o SportItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["GameId"] = o.GameId
	}
	if true {
		toSerialize["Name"] = o.Name
	}
	if true {
		toSerialize["M0"] = o.M0
	}
	return json.Marshal(toSerialize)
}

type NullableSportItem struct {
	value *SportItem
	isSet bool
}

func (v NullableSportItem) Get() *SportItem {
	return v.value
}

func (v *NullableSportItem) Set(val *SportItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSportItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSportItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSportItem(val *SportItem) *NullableSportItem {
	return &NullableSportItem{value: val, isSet: true}
}

func (v NullableSportItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSportItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
