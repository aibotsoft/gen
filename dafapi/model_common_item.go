/*
 * Sample API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package dafapi

import (
	"encoding/json"
)

// CommonItem struct for CommonItem
type CommonItem struct {
	ErrorCode int64 `json:"ErrorCode"`
	ErrorMsg *string `json:"ErrorMsg,omitempty"`
}

// NewCommonItem instantiates a new CommonItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonItem(errorCode int64, ) *CommonItem {
	this := CommonItem{}
	this.ErrorCode = errorCode
	return &this
}

// NewCommonItemWithDefaults instantiates a new CommonItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonItemWithDefaults() *CommonItem {
	this := CommonItem{}
	return &this
}

// GetErrorCode returns the ErrorCode field value
func (o *CommonItem) GetErrorCode() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *CommonItem) GetErrorCodeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *CommonItem) SetErrorCode(v int64) {
	o.ErrorCode = v
}

// GetErrorMsg returns the ErrorMsg field value if set, zero value otherwise.
func (o *CommonItem) GetErrorMsg() string {
	if o == nil || o.ErrorMsg == nil {
		var ret string
		return ret
	}
	return *o.ErrorMsg
}

// GetErrorMsgOk returns a tuple with the ErrorMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonItem) GetErrorMsgOk() (*string, bool) {
	if o == nil || o.ErrorMsg == nil {
		return nil, false
	}
	return o.ErrorMsg, true
}

// HasErrorMsg returns a boolean if a field has been set.
func (o *CommonItem) HasErrorMsg() bool {
	if o != nil && o.ErrorMsg != nil {
		return true
	}

	return false
}

// SetErrorMsg gets a reference to the given string and assigns it to the ErrorMsg field.
func (o *CommonItem) SetErrorMsg(v string) {
	o.ErrorMsg = &v
}

func (o CommonItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ErrorCode"] = o.ErrorCode
	}
	if o.ErrorMsg != nil {
		toSerialize["ErrorMsg"] = o.ErrorMsg
	}
	return json.Marshal(toSerialize)
}

type NullableCommonItem struct {
	value *CommonItem
	isSet bool
}

func (v NullableCommonItem) Get() *CommonItem {
	return v.value
}

func (v *NullableCommonItem) Set(val *CommonItem) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonItem) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonItem(val *CommonItem) *NullableCommonItem {
	return &NullableCommonItem{value: val, isSet: true}
}

func (v NullableCommonItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
