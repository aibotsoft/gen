/*
 * Sample API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package dafapi

import (
	"encoding/json"
)

// GetMarketsResponseData struct for GetMarketsResponseData
type GetMarketsResponseData struct {
	SpMatch *ShowAllOddsResponseData `json:"SpMatch,omitempty"`
	NewOdds *[]MarketItem `json:"NewOdds,omitempty"`
	Markets *GetMarketsResponseDataMarkets `json:"Markets,omitempty"`
}

// NewGetMarketsResponseData instantiates a new GetMarketsResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetMarketsResponseData() *GetMarketsResponseData {
	this := GetMarketsResponseData{}
	return &this
}

// NewGetMarketsResponseDataWithDefaults instantiates a new GetMarketsResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetMarketsResponseDataWithDefaults() *GetMarketsResponseData {
	this := GetMarketsResponseData{}
	return &this
}

// GetSpMatch returns the SpMatch field value if set, zero value otherwise.
func (o *GetMarketsResponseData) GetSpMatch() ShowAllOddsResponseData {
	if o == nil || o.SpMatch == nil {
		var ret ShowAllOddsResponseData
		return ret
	}
	return *o.SpMatch
}

// GetSpMatchOk returns a tuple with the SpMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMarketsResponseData) GetSpMatchOk() (*ShowAllOddsResponseData, bool) {
	if o == nil || o.SpMatch == nil {
		return nil, false
	}
	return o.SpMatch, true
}

// HasSpMatch returns a boolean if a field has been set.
func (o *GetMarketsResponseData) HasSpMatch() bool {
	if o != nil && o.SpMatch != nil {
		return true
	}

	return false
}

// SetSpMatch gets a reference to the given ShowAllOddsResponseData and assigns it to the SpMatch field.
func (o *GetMarketsResponseData) SetSpMatch(v ShowAllOddsResponseData) {
	o.SpMatch = &v
}

// GetNewOdds returns the NewOdds field value if set, zero value otherwise.
func (o *GetMarketsResponseData) GetNewOdds() []MarketItem {
	if o == nil || o.NewOdds == nil {
		var ret []MarketItem
		return ret
	}
	return *o.NewOdds
}

// GetNewOddsOk returns a tuple with the NewOdds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMarketsResponseData) GetNewOddsOk() (*[]MarketItem, bool) {
	if o == nil || o.NewOdds == nil {
		return nil, false
	}
	return o.NewOdds, true
}

// HasNewOdds returns a boolean if a field has been set.
func (o *GetMarketsResponseData) HasNewOdds() bool {
	if o != nil && o.NewOdds != nil {
		return true
	}

	return false
}

// SetNewOdds gets a reference to the given []MarketItem and assigns it to the NewOdds field.
func (o *GetMarketsResponseData) SetNewOdds(v []MarketItem) {
	o.NewOdds = &v
}

// GetMarkets returns the Markets field value if set, zero value otherwise.
func (o *GetMarketsResponseData) GetMarkets() GetMarketsResponseDataMarkets {
	if o == nil || o.Markets == nil {
		var ret GetMarketsResponseDataMarkets
		return ret
	}
	return *o.Markets
}

// GetMarketsOk returns a tuple with the Markets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMarketsResponseData) GetMarketsOk() (*GetMarketsResponseDataMarkets, bool) {
	if o == nil || o.Markets == nil {
		return nil, false
	}
	return o.Markets, true
}

// HasMarkets returns a boolean if a field has been set.
func (o *GetMarketsResponseData) HasMarkets() bool {
	if o != nil && o.Markets != nil {
		return true
	}

	return false
}

// SetMarkets gets a reference to the given GetMarketsResponseDataMarkets and assigns it to the Markets field.
func (o *GetMarketsResponseData) SetMarkets(v GetMarketsResponseDataMarkets) {
	o.Markets = &v
}

func (o GetMarketsResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SpMatch != nil {
		toSerialize["SpMatch"] = o.SpMatch
	}
	if o.NewOdds != nil {
		toSerialize["NewOdds"] = o.NewOdds
	}
	if o.Markets != nil {
		toSerialize["Markets"] = o.Markets
	}
	return json.Marshal(toSerialize)
}

type NullableGetMarketsResponseData struct {
	value *GetMarketsResponseData
	isSet bool
}

func (v NullableGetMarketsResponseData) Get() *GetMarketsResponseData {
	return v.value
}

func (v *NullableGetMarketsResponseData) Set(val *GetMarketsResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMarketsResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMarketsResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMarketsResponseData(val *GetMarketsResponseData) *NullableGetMarketsResponseData {
	return &NullableGetMarketsResponseData{value: val, isSet: true}
}

func (v NullableGetMarketsResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMarketsResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
