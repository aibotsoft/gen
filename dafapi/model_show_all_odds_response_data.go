/*
 * Sample API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package dafapi

import (
	"encoding/json"
)

// ShowAllOddsResponseData struct for ShowAllOddsResponseData
type ShowAllOddsResponseData struct {
	LeagueN *map[string]string `json:"LeagueN,omitempty"`
	TeamN *map[string]string `json:"TeamN,omitempty"`
	NewMatch *[]EventItem `json:"NewMatch,omitempty"`
}

// NewShowAllOddsResponseData instantiates a new ShowAllOddsResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShowAllOddsResponseData() *ShowAllOddsResponseData {
	this := ShowAllOddsResponseData{}
	return &this
}

// NewShowAllOddsResponseDataWithDefaults instantiates a new ShowAllOddsResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShowAllOddsResponseDataWithDefaults() *ShowAllOddsResponseData {
	this := ShowAllOddsResponseData{}
	return &this
}

// GetLeagueN returns the LeagueN field value if set, zero value otherwise.
func (o *ShowAllOddsResponseData) GetLeagueN() map[string]string {
	if o == nil || o.LeagueN == nil {
		var ret map[string]string
		return ret
	}
	return *o.LeagueN
}

// GetLeagueNOk returns a tuple with the LeagueN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShowAllOddsResponseData) GetLeagueNOk() (*map[string]string, bool) {
	if o == nil || o.LeagueN == nil {
		return nil, false
	}
	return o.LeagueN, true
}

// HasLeagueN returns a boolean if a field has been set.
func (o *ShowAllOddsResponseData) HasLeagueN() bool {
	if o != nil && o.LeagueN != nil {
		return true
	}

	return false
}

// SetLeagueN gets a reference to the given map[string]string and assigns it to the LeagueN field.
func (o *ShowAllOddsResponseData) SetLeagueN(v map[string]string) {
	o.LeagueN = &v
}

// GetTeamN returns the TeamN field value if set, zero value otherwise.
func (o *ShowAllOddsResponseData) GetTeamN() map[string]string {
	if o == nil || o.TeamN == nil {
		var ret map[string]string
		return ret
	}
	return *o.TeamN
}

// GetTeamNOk returns a tuple with the TeamN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShowAllOddsResponseData) GetTeamNOk() (*map[string]string, bool) {
	if o == nil || o.TeamN == nil {
		return nil, false
	}
	return o.TeamN, true
}

// HasTeamN returns a boolean if a field has been set.
func (o *ShowAllOddsResponseData) HasTeamN() bool {
	if o != nil && o.TeamN != nil {
		return true
	}

	return false
}

// SetTeamN gets a reference to the given map[string]string and assigns it to the TeamN field.
func (o *ShowAllOddsResponseData) SetTeamN(v map[string]string) {
	o.TeamN = &v
}

// GetNewMatch returns the NewMatch field value if set, zero value otherwise.
func (o *ShowAllOddsResponseData) GetNewMatch() []EventItem {
	if o == nil || o.NewMatch == nil {
		var ret []EventItem
		return ret
	}
	return *o.NewMatch
}

// GetNewMatchOk returns a tuple with the NewMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShowAllOddsResponseData) GetNewMatchOk() (*[]EventItem, bool) {
	if o == nil || o.NewMatch == nil {
		return nil, false
	}
	return o.NewMatch, true
}

// HasNewMatch returns a boolean if a field has been set.
func (o *ShowAllOddsResponseData) HasNewMatch() bool {
	if o != nil && o.NewMatch != nil {
		return true
	}

	return false
}

// SetNewMatch gets a reference to the given []EventItem and assigns it to the NewMatch field.
func (o *ShowAllOddsResponseData) SetNewMatch(v []EventItem) {
	o.NewMatch = &v
}

func (o ShowAllOddsResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LeagueN != nil {
		toSerialize["LeagueN"] = o.LeagueN
	}
	if o.TeamN != nil {
		toSerialize["TeamN"] = o.TeamN
	}
	if o.NewMatch != nil {
		toSerialize["NewMatch"] = o.NewMatch
	}
	return json.Marshal(toSerialize)
}

type NullableShowAllOddsResponseData struct {
	value *ShowAllOddsResponseData
	isSet bool
}

func (v NullableShowAllOddsResponseData) Get() *ShowAllOddsResponseData {
	return v.value
}

func (v *NullableShowAllOddsResponseData) Set(val *ShowAllOddsResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableShowAllOddsResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableShowAllOddsResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShowAllOddsResponseData(val *ShowAllOddsResponseData) *NullableShowAllOddsResponseData {
	return &NullableShowAllOddsResponseData{value: val, isSet: true}
}

func (v NullableShowAllOddsResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShowAllOddsResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
