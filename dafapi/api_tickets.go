/*
 * Sample API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package dafapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// TicketsApiService TicketsApi service
type TicketsApiService service

type apiGetTicketsRequest struct {
	ctx _context.Context
	apiService *TicketsApiService
	itemList0Type *BetTypeClassEnum
	itemList0Oddsid *int64
	itemList0Betteam *string
	itemList0Bettype *int64
	itemList0Odds *float32
	itemList0Line *float64
	itemList0Hscore *int64
	itemList0Ascore *int64
	itemList0Matchid *int64
	itemList0Stake *int64
	itemList0QuickBet *string
	itemList0ChoiceValue *string
	itemList0Home *string
	itemList0Away *string
	itemList0Gameid *int64
	itemList0IsInPlay *bool
	itemList0Pty *int64
	itemList0Hdp1 *float32
	itemList0Hdp2 *float32
}


func (r apiGetTicketsRequest) ItemList0Type(itemList0Type BetTypeClassEnum) apiGetTicketsRequest {
	r.itemList0Type = &itemList0Type
	return r
}

func (r apiGetTicketsRequest) ItemList0Oddsid(itemList0Oddsid int64) apiGetTicketsRequest {
	r.itemList0Oddsid = &itemList0Oddsid
	return r
}

func (r apiGetTicketsRequest) ItemList0Betteam(itemList0Betteam string) apiGetTicketsRequest {
	r.itemList0Betteam = &itemList0Betteam
	return r
}

func (r apiGetTicketsRequest) ItemList0Bettype(itemList0Bettype int64) apiGetTicketsRequest {
	r.itemList0Bettype = &itemList0Bettype
	return r
}

func (r apiGetTicketsRequest) ItemList0Odds(itemList0Odds float32) apiGetTicketsRequest {
	r.itemList0Odds = &itemList0Odds
	return r
}

func (r apiGetTicketsRequest) ItemList0Line(itemList0Line float64) apiGetTicketsRequest {
	r.itemList0Line = &itemList0Line
	return r
}

func (r apiGetTicketsRequest) ItemList0Hscore(itemList0Hscore int64) apiGetTicketsRequest {
	r.itemList0Hscore = &itemList0Hscore
	return r
}

func (r apiGetTicketsRequest) ItemList0Ascore(itemList0Ascore int64) apiGetTicketsRequest {
	r.itemList0Ascore = &itemList0Ascore
	return r
}

func (r apiGetTicketsRequest) ItemList0Matchid(itemList0Matchid int64) apiGetTicketsRequest {
	r.itemList0Matchid = &itemList0Matchid
	return r
}

func (r apiGetTicketsRequest) ItemList0Stake(itemList0Stake int64) apiGetTicketsRequest {
	r.itemList0Stake = &itemList0Stake
	return r
}

func (r apiGetTicketsRequest) ItemList0QuickBet(itemList0QuickBet string) apiGetTicketsRequest {
	r.itemList0QuickBet = &itemList0QuickBet
	return r
}

func (r apiGetTicketsRequest) ItemList0ChoiceValue(itemList0ChoiceValue string) apiGetTicketsRequest {
	r.itemList0ChoiceValue = &itemList0ChoiceValue
	return r
}

func (r apiGetTicketsRequest) ItemList0Home(itemList0Home string) apiGetTicketsRequest {
	r.itemList0Home = &itemList0Home
	return r
}

func (r apiGetTicketsRequest) ItemList0Away(itemList0Away string) apiGetTicketsRequest {
	r.itemList0Away = &itemList0Away
	return r
}

func (r apiGetTicketsRequest) ItemList0Gameid(itemList0Gameid int64) apiGetTicketsRequest {
	r.itemList0Gameid = &itemList0Gameid
	return r
}

func (r apiGetTicketsRequest) ItemList0IsInPlay(itemList0IsInPlay bool) apiGetTicketsRequest {
	r.itemList0IsInPlay = &itemList0IsInPlay
	return r
}

func (r apiGetTicketsRequest) ItemList0Pty(itemList0Pty int64) apiGetTicketsRequest {
	r.itemList0Pty = &itemList0Pty
	return r
}

func (r apiGetTicketsRequest) ItemList0Hdp1(itemList0Hdp1 float32) apiGetTicketsRequest {
	r.itemList0Hdp1 = &itemList0Hdp1
	return r
}

func (r apiGetTicketsRequest) ItemList0Hdp2(itemList0Hdp2 float32) apiGetTicketsRequest {
	r.itemList0Hdp2 = &itemList0Hdp2
	return r
}

/*
GetTickets Method for GetTickets
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return apiGetTicketsRequest
*/
func (a *TicketsApiService) GetTickets(ctx _context.Context) apiGetTicketsRequest {
	return apiGetTicketsRequest{
		apiService: a,
		ctx: ctx,
	}
}

/*
Execute executes the request
 @return TicketsResponse
*/
func (r apiGetTicketsRequest) Execute() (TicketsResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TicketsResponse
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "TicketsApiService.GetTickets")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/BetV2/GetTickets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	if r.itemList0Type == nil {
		return localVarReturnValue, nil, reportError("itemList0Type is required and must be specified")
	}
	
	if r.itemList0Oddsid == nil {
		return localVarReturnValue, nil, reportError("itemList0Oddsid is required and must be specified")
	}
	
	if r.itemList0Betteam == nil {
		return localVarReturnValue, nil, reportError("itemList0Betteam is required and must be specified")
	}
																
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("ItemList[0][type]", parameterToString(*r.itemList0Type, ""))
	if r.itemList0Bettype != nil {
		localVarFormParams.Add("ItemList[0][bettype]", parameterToString(*r.itemList0Bettype, ""))
	}
	localVarFormParams.Add("ItemList[0][oddsid]", parameterToString(*r.itemList0Oddsid, ""))
	if r.itemList0Odds != nil {
		localVarFormParams.Add("ItemList[0][odds]", parameterToString(*r.itemList0Odds, ""))
	}
	if r.itemList0Line != nil {
		localVarFormParams.Add("ItemList[0][Line]", parameterToString(*r.itemList0Line, ""))
	}
	if r.itemList0Hscore != nil {
		localVarFormParams.Add("ItemList[0][Hscore]", parameterToString(*r.itemList0Hscore, ""))
	}
	if r.itemList0Ascore != nil {
		localVarFormParams.Add("ItemList[0][Ascore]", parameterToString(*r.itemList0Ascore, ""))
	}
	if r.itemList0Matchid != nil {
		localVarFormParams.Add("ItemList[0][Matchid]", parameterToString(*r.itemList0Matchid, ""))
	}
	localVarFormParams.Add("ItemList[0][betteam]", parameterToString(*r.itemList0Betteam, ""))
	if r.itemList0Stake != nil {
		localVarFormParams.Add("ItemList[0][stake]", parameterToString(*r.itemList0Stake, ""))
	}
	if r.itemList0QuickBet != nil {
		localVarFormParams.Add("ItemList[0][QuickBet]", parameterToString(*r.itemList0QuickBet, ""))
	}
	if r.itemList0ChoiceValue != nil {
		localVarFormParams.Add("ItemList[0][ChoiceValue]", parameterToString(*r.itemList0ChoiceValue, ""))
	}
	if r.itemList0Home != nil {
		localVarFormParams.Add("ItemList[0][home]", parameterToString(*r.itemList0Home, ""))
	}
	if r.itemList0Away != nil {
		localVarFormParams.Add("ItemList[0][away]", parameterToString(*r.itemList0Away, ""))
	}
	if r.itemList0Gameid != nil {
		localVarFormParams.Add("ItemList[0][gameid]", parameterToString(*r.itemList0Gameid, ""))
	}
	if r.itemList0IsInPlay != nil {
		localVarFormParams.Add("ItemList[0][IsInPlay]", parameterToString(*r.itemList0IsInPlay, ""))
	}
	if r.itemList0Pty != nil {
		localVarFormParams.Add("ItemList[0][pty]", parameterToString(*r.itemList0Pty, ""))
	}
	if r.itemList0Hdp1 != nil {
		localVarFormParams.Add("ItemList[0][hdp1]", parameterToString(*r.itemList0Hdp1, ""))
	}
	if r.itemList0Hdp2 != nil {
		localVarFormParams.Add("ItemList[0][hdp2]", parameterToString(*r.itemList0Hdp2, ""))
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["x-session"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Cookie"] = key
			}
		}
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
type apiPlaceBetRequest struct {
	ctx _context.Context
	apiService *TicketsApiService
	itemList0Type *BetTypeClassEnum
	itemList0Oddsid *int64
	itemList0Betteam *string
	itemList0Bettype *int64
	itemList0Odds *float32
	itemList0Line *float64
	itemList0Hscore *int64
	itemList0Ascore *int64
	itemList0Matchid *int64
	itemList0Stake *int64
	itemList0QuickBet *string
	itemList0ChoiceValue *string
	itemList0Home *string
	itemList0Away *string
	itemList0Gameid *int64
	itemList0IsInPlay *bool
	itemList0Pty *int64
	itemList0Hdp1 *float32
	itemList0Hdp2 *float32
}


func (r apiPlaceBetRequest) ItemList0Type(itemList0Type BetTypeClassEnum) apiPlaceBetRequest {
	r.itemList0Type = &itemList0Type
	return r
}

func (r apiPlaceBetRequest) ItemList0Oddsid(itemList0Oddsid int64) apiPlaceBetRequest {
	r.itemList0Oddsid = &itemList0Oddsid
	return r
}

func (r apiPlaceBetRequest) ItemList0Betteam(itemList0Betteam string) apiPlaceBetRequest {
	r.itemList0Betteam = &itemList0Betteam
	return r
}

func (r apiPlaceBetRequest) ItemList0Bettype(itemList0Bettype int64) apiPlaceBetRequest {
	r.itemList0Bettype = &itemList0Bettype
	return r
}

func (r apiPlaceBetRequest) ItemList0Odds(itemList0Odds float32) apiPlaceBetRequest {
	r.itemList0Odds = &itemList0Odds
	return r
}

func (r apiPlaceBetRequest) ItemList0Line(itemList0Line float64) apiPlaceBetRequest {
	r.itemList0Line = &itemList0Line
	return r
}

func (r apiPlaceBetRequest) ItemList0Hscore(itemList0Hscore int64) apiPlaceBetRequest {
	r.itemList0Hscore = &itemList0Hscore
	return r
}

func (r apiPlaceBetRequest) ItemList0Ascore(itemList0Ascore int64) apiPlaceBetRequest {
	r.itemList0Ascore = &itemList0Ascore
	return r
}

func (r apiPlaceBetRequest) ItemList0Matchid(itemList0Matchid int64) apiPlaceBetRequest {
	r.itemList0Matchid = &itemList0Matchid
	return r
}

func (r apiPlaceBetRequest) ItemList0Stake(itemList0Stake int64) apiPlaceBetRequest {
	r.itemList0Stake = &itemList0Stake
	return r
}

func (r apiPlaceBetRequest) ItemList0QuickBet(itemList0QuickBet string) apiPlaceBetRequest {
	r.itemList0QuickBet = &itemList0QuickBet
	return r
}

func (r apiPlaceBetRequest) ItemList0ChoiceValue(itemList0ChoiceValue string) apiPlaceBetRequest {
	r.itemList0ChoiceValue = &itemList0ChoiceValue
	return r
}

func (r apiPlaceBetRequest) ItemList0Home(itemList0Home string) apiPlaceBetRequest {
	r.itemList0Home = &itemList0Home
	return r
}

func (r apiPlaceBetRequest) ItemList0Away(itemList0Away string) apiPlaceBetRequest {
	r.itemList0Away = &itemList0Away
	return r
}

func (r apiPlaceBetRequest) ItemList0Gameid(itemList0Gameid int64) apiPlaceBetRequest {
	r.itemList0Gameid = &itemList0Gameid
	return r
}

func (r apiPlaceBetRequest) ItemList0IsInPlay(itemList0IsInPlay bool) apiPlaceBetRequest {
	r.itemList0IsInPlay = &itemList0IsInPlay
	return r
}

func (r apiPlaceBetRequest) ItemList0Pty(itemList0Pty int64) apiPlaceBetRequest {
	r.itemList0Pty = &itemList0Pty
	return r
}

func (r apiPlaceBetRequest) ItemList0Hdp1(itemList0Hdp1 float32) apiPlaceBetRequest {
	r.itemList0Hdp1 = &itemList0Hdp1
	return r
}

func (r apiPlaceBetRequest) ItemList0Hdp2(itemList0Hdp2 float32) apiPlaceBetRequest {
	r.itemList0Hdp2 = &itemList0Hdp2
	return r
}

/*
PlaceBet Method for PlaceBet
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return apiPlaceBetRequest
*/
func (a *TicketsApiService) PlaceBet(ctx _context.Context) apiPlaceBetRequest {
	return apiPlaceBetRequest{
		apiService: a,
		ctx: ctx,
	}
}

/*
Execute executes the request
 @return PlaceBetRequest
*/
func (r apiPlaceBetRequest) Execute() (PlaceBetRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  PlaceBetRequest
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "TicketsApiService.PlaceBet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/BetV2/ProcessBet"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	if r.itemList0Type == nil {
		return localVarReturnValue, nil, reportError("itemList0Type is required and must be specified")
	}
	
	if r.itemList0Oddsid == nil {
		return localVarReturnValue, nil, reportError("itemList0Oddsid is required and must be specified")
	}
	
	if r.itemList0Betteam == nil {
		return localVarReturnValue, nil, reportError("itemList0Betteam is required and must be specified")
	}
																
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("ItemList[0][type]", parameterToString(*r.itemList0Type, ""))
	if r.itemList0Bettype != nil {
		localVarFormParams.Add("ItemList[0][bettype]", parameterToString(*r.itemList0Bettype, ""))
	}
	localVarFormParams.Add("ItemList[0][oddsid]", parameterToString(*r.itemList0Oddsid, ""))
	if r.itemList0Odds != nil {
		localVarFormParams.Add("ItemList[0][odds]", parameterToString(*r.itemList0Odds, ""))
	}
	if r.itemList0Line != nil {
		localVarFormParams.Add("ItemList[0][Line]", parameterToString(*r.itemList0Line, ""))
	}
	if r.itemList0Hscore != nil {
		localVarFormParams.Add("ItemList[0][Hscore]", parameterToString(*r.itemList0Hscore, ""))
	}
	if r.itemList0Ascore != nil {
		localVarFormParams.Add("ItemList[0][Ascore]", parameterToString(*r.itemList0Ascore, ""))
	}
	if r.itemList0Matchid != nil {
		localVarFormParams.Add("ItemList[0][Matchid]", parameterToString(*r.itemList0Matchid, ""))
	}
	localVarFormParams.Add("ItemList[0][betteam]", parameterToString(*r.itemList0Betteam, ""))
	if r.itemList0Stake != nil {
		localVarFormParams.Add("ItemList[0][stake]", parameterToString(*r.itemList0Stake, ""))
	}
	if r.itemList0QuickBet != nil {
		localVarFormParams.Add("ItemList[0][QuickBet]", parameterToString(*r.itemList0QuickBet, ""))
	}
	if r.itemList0ChoiceValue != nil {
		localVarFormParams.Add("ItemList[0][ChoiceValue]", parameterToString(*r.itemList0ChoiceValue, ""))
	}
	if r.itemList0Home != nil {
		localVarFormParams.Add("ItemList[0][home]", parameterToString(*r.itemList0Home, ""))
	}
	if r.itemList0Away != nil {
		localVarFormParams.Add("ItemList[0][away]", parameterToString(*r.itemList0Away, ""))
	}
	if r.itemList0Gameid != nil {
		localVarFormParams.Add("ItemList[0][gameid]", parameterToString(*r.itemList0Gameid, ""))
	}
	if r.itemList0IsInPlay != nil {
		localVarFormParams.Add("ItemList[0][IsInPlay]", parameterToString(*r.itemList0IsInPlay, ""))
	}
	if r.itemList0Pty != nil {
		localVarFormParams.Add("ItemList[0][pty]", parameterToString(*r.itemList0Pty, ""))
	}
	if r.itemList0Hdp1 != nil {
		localVarFormParams.Add("ItemList[0][hdp1]", parameterToString(*r.itemList0Hdp1, ""))
	}
	if r.itemList0Hdp2 != nil {
		localVarFormParams.Add("ItemList[0][hdp2]", parameterToString(*r.itemList0Hdp2, ""))
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if auth, ok := auth["x-session"]; ok {
				var key string
				if auth.Prefix != "" {
					key = auth.Prefix + " " + auth.Key
				} else {
					key = auth.Key
				}
				localVarHeaderParams["Cookie"] = key
			}
		}
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
