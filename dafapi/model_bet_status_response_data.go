/*
 * Sample API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package dafapi

import (
	"encoding/json"
)

// BetStatusResponseData struct for BetStatusResponseData
type BetStatusResponseData struct {
	Status string `json:"status"`
	ReasonID *int64 `json:"ReasonID,omitempty"`
}

// NewBetStatusResponseData instantiates a new BetStatusResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBetStatusResponseData(status string, ) *BetStatusResponseData {
	this := BetStatusResponseData{}
	this.Status = status
	return &this
}

// NewBetStatusResponseDataWithDefaults instantiates a new BetStatusResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBetStatusResponseDataWithDefaults() *BetStatusResponseData {
	this := BetStatusResponseData{}
	return &this
}

// GetStatus returns the Status field value
func (o *BetStatusResponseData) GetStatus() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BetStatusResponseData) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BetStatusResponseData) SetStatus(v string) {
	o.Status = v
}

// GetReasonID returns the ReasonID field value if set, zero value otherwise.
func (o *BetStatusResponseData) GetReasonID() int64 {
	if o == nil || o.ReasonID == nil {
		var ret int64
		return ret
	}
	return *o.ReasonID
}

// GetReasonIDOk returns a tuple with the ReasonID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BetStatusResponseData) GetReasonIDOk() (*int64, bool) {
	if o == nil || o.ReasonID == nil {
		return nil, false
	}
	return o.ReasonID, true
}

// HasReasonID returns a boolean if a field has been set.
func (o *BetStatusResponseData) HasReasonID() bool {
	if o != nil && o.ReasonID != nil {
		return true
	}

	return false
}

// SetReasonID gets a reference to the given int64 and assigns it to the ReasonID field.
func (o *BetStatusResponseData) SetReasonID(v int64) {
	o.ReasonID = &v
}

func (o BetStatusResponseData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.ReasonID != nil {
		toSerialize["ReasonID"] = o.ReasonID
	}
	return json.Marshal(toSerialize)
}

type NullableBetStatusResponseData struct {
	value *BetStatusResponseData
	isSet bool
}

func (v NullableBetStatusResponseData) Get() *BetStatusResponseData {
	return v.value
}

func (v *NullableBetStatusResponseData) Set(val *BetStatusResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableBetStatusResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableBetStatusResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBetStatusResponseData(val *BetStatusResponseData) *NullableBetStatusResponseData {
	return &NullableBetStatusResponseData{value: val, isSet: true}
}

func (v NullableBetStatusResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBetStatusResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
