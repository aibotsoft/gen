/*
 * Sample API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package dafapi

import (
	"encoding/json"
)

// SelectionItem struct for SelectionItem
type SelectionItem struct {
	SelId *string `json:"SelId,omitempty"`
	Price *float32 `json:"Price,omitempty"`
	Seq *int64 `json:"Seq,omitempty"`
}

// NewSelectionItem instantiates a new SelectionItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectionItem() *SelectionItem {
	this := SelectionItem{}
	return &this
}

// NewSelectionItemWithDefaults instantiates a new SelectionItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectionItemWithDefaults() *SelectionItem {
	this := SelectionItem{}
	return &this
}

// GetSelId returns the SelId field value if set, zero value otherwise.
func (o *SelectionItem) GetSelId() string {
	if o == nil || o.SelId == nil {
		var ret string
		return ret
	}
	return *o.SelId
}

// GetSelIdOk returns a tuple with the SelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectionItem) GetSelIdOk() (*string, bool) {
	if o == nil || o.SelId == nil {
		return nil, false
	}
	return o.SelId, true
}

// HasSelId returns a boolean if a field has been set.
func (o *SelectionItem) HasSelId() bool {
	if o != nil && o.SelId != nil {
		return true
	}

	return false
}

// SetSelId gets a reference to the given string and assigns it to the SelId field.
func (o *SelectionItem) SetSelId(v string) {
	o.SelId = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *SelectionItem) GetPrice() float32 {
	if o == nil || o.Price == nil {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectionItem) GetPriceOk() (*float32, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *SelectionItem) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *SelectionItem) SetPrice(v float32) {
	o.Price = &v
}

// GetSeq returns the Seq field value if set, zero value otherwise.
func (o *SelectionItem) GetSeq() int64 {
	if o == nil || o.Seq == nil {
		var ret int64
		return ret
	}
	return *o.Seq
}

// GetSeqOk returns a tuple with the Seq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectionItem) GetSeqOk() (*int64, bool) {
	if o == nil || o.Seq == nil {
		return nil, false
	}
	return o.Seq, true
}

// HasSeq returns a boolean if a field has been set.
func (o *SelectionItem) HasSeq() bool {
	if o != nil && o.Seq != nil {
		return true
	}

	return false
}

// SetSeq gets a reference to the given int64 and assigns it to the Seq field.
func (o *SelectionItem) SetSeq(v int64) {
	o.Seq = &v
}

func (o SelectionItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SelId != nil {
		toSerialize["SelId"] = o.SelId
	}
	if o.Price != nil {
		toSerialize["Price"] = o.Price
	}
	if o.Seq != nil {
		toSerialize["Seq"] = o.Seq
	}
	return json.Marshal(toSerialize)
}

type NullableSelectionItem struct {
	value *SelectionItem
	isSet bool
}

func (v NullableSelectionItem) Get() *SelectionItem {
	return v.value
}

func (v *NullableSelectionItem) Set(val *SelectionItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectionItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectionItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectionItem(val *SelectionItem) *NullableSelectionItem {
	return &NullableSelectionItem{value: val, isSet: true}
}

func (v NullableSelectionItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectionItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
