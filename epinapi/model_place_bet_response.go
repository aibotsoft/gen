/*
 * EpinApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package epinapi

import (
	"encoding/json"
	"time"
)

// PlaceBetResponse struct for PlaceBetResponse
type PlaceBetResponse struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Id *int64 `json:"id,omitempty"`
	OddsFormat *string `json:"oddsFormat,omitempty"`
	Price *float64 `json:"price,omitempty"`
	RequestId *string `json:"requestId,omitempty"`
	Stake *float64 `json:"stake,omitempty"`
	Type *string `json:"type,omitempty"`
	Selections *[]SelectionItem `json:"selections,omitempty"`
}

// NewPlaceBetResponse instantiates a new PlaceBetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaceBetResponse() *PlaceBetResponse {
	this := PlaceBetResponse{}
	return &this
}

// NewPlaceBetResponseWithDefaults instantiates a new PlaceBetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaceBetResponseWithDefaults() *PlaceBetResponse {
	this := PlaceBetResponse{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PlaceBetResponse) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PlaceBetResponse) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *PlaceBetResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PlaceBetResponse) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetResponse) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PlaceBetResponse) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *PlaceBetResponse) SetId(v int64) {
	o.Id = &v
}

// GetOddsFormat returns the OddsFormat field value if set, zero value otherwise.
func (o *PlaceBetResponse) GetOddsFormat() string {
	if o == nil || o.OddsFormat == nil {
		var ret string
		return ret
	}
	return *o.OddsFormat
}

// GetOddsFormatOk returns a tuple with the OddsFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetResponse) GetOddsFormatOk() (*string, bool) {
	if o == nil || o.OddsFormat == nil {
		return nil, false
	}
	return o.OddsFormat, true
}

// HasOddsFormat returns a boolean if a field has been set.
func (o *PlaceBetResponse) HasOddsFormat() bool {
	if o != nil && o.OddsFormat != nil {
		return true
	}

	return false
}

// SetOddsFormat gets a reference to the given string and assigns it to the OddsFormat field.
func (o *PlaceBetResponse) SetOddsFormat(v string) {
	o.OddsFormat = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *PlaceBetResponse) GetPrice() float64 {
	if o == nil || o.Price == nil {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetResponse) GetPriceOk() (*float64, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *PlaceBetResponse) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *PlaceBetResponse) SetPrice(v float64) {
	o.Price = &v
}

// GetRequestId returns the RequestId field value if set, zero value otherwise.
func (o *PlaceBetResponse) GetRequestId() string {
	if o == nil || o.RequestId == nil {
		var ret string
		return ret
	}
	return *o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetResponse) GetRequestIdOk() (*string, bool) {
	if o == nil || o.RequestId == nil {
		return nil, false
	}
	return o.RequestId, true
}

// HasRequestId returns a boolean if a field has been set.
func (o *PlaceBetResponse) HasRequestId() bool {
	if o != nil && o.RequestId != nil {
		return true
	}

	return false
}

// SetRequestId gets a reference to the given string and assigns it to the RequestId field.
func (o *PlaceBetResponse) SetRequestId(v string) {
	o.RequestId = &v
}

// GetStake returns the Stake field value if set, zero value otherwise.
func (o *PlaceBetResponse) GetStake() float64 {
	if o == nil || o.Stake == nil {
		var ret float64
		return ret
	}
	return *o.Stake
}

// GetStakeOk returns a tuple with the Stake field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetResponse) GetStakeOk() (*float64, bool) {
	if o == nil || o.Stake == nil {
		return nil, false
	}
	return o.Stake, true
}

// HasStake returns a boolean if a field has been set.
func (o *PlaceBetResponse) HasStake() bool {
	if o != nil && o.Stake != nil {
		return true
	}

	return false
}

// SetStake gets a reference to the given float64 and assigns it to the Stake field.
func (o *PlaceBetResponse) SetStake(v float64) {
	o.Stake = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PlaceBetResponse) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetResponse) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PlaceBetResponse) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PlaceBetResponse) SetType(v string) {
	o.Type = &v
}

// GetSelections returns the Selections field value if set, zero value otherwise.
func (o *PlaceBetResponse) GetSelections() []SelectionItem {
	if o == nil || o.Selections == nil {
		var ret []SelectionItem
		return ret
	}
	return *o.Selections
}

// GetSelectionsOk returns a tuple with the Selections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetResponse) GetSelectionsOk() (*[]SelectionItem, bool) {
	if o == nil || o.Selections == nil {
		return nil, false
	}
	return o.Selections, true
}

// HasSelections returns a boolean if a field has been set.
func (o *PlaceBetResponse) HasSelections() bool {
	if o != nil && o.Selections != nil {
		return true
	}

	return false
}

// SetSelections gets a reference to the given []SelectionItem and assigns it to the Selections field.
func (o *PlaceBetResponse) SetSelections(v []SelectionItem) {
	o.Selections = &v
}

func (o PlaceBetResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.OddsFormat != nil {
		toSerialize["oddsFormat"] = o.OddsFormat
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.RequestId != nil {
		toSerialize["requestId"] = o.RequestId
	}
	if o.Stake != nil {
		toSerialize["stake"] = o.Stake
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Selections != nil {
		toSerialize["selections"] = o.Selections
	}
	return json.Marshal(toSerialize)
}

type NullablePlaceBetResponse struct {
	value *PlaceBetResponse
	isSet bool
}

func (v NullablePlaceBetResponse) Get() *PlaceBetResponse {
	return v.value
}

func (v *NullablePlaceBetResponse) Set(val *PlaceBetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaceBetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaceBetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaceBetResponse(val *PlaceBetResponse) *NullablePlaceBetResponse {
	return &NullablePlaceBetResponse{value: val, isSet: true}
}

func (v NullablePlaceBetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaceBetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
