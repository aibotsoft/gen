/*
 * EpinApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package epinapi

import (
	"encoding/json"
)

// ClassItem struct for ClassItem
type ClassItem struct {
	Name *string `json:"name,omitempty"`
	Price *float64 `json:"price,omitempty"`
}

// NewClassItem instantiates a new ClassItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClassItem() *ClassItem {
	this := ClassItem{}
	return &this
}

// NewClassItemWithDefaults instantiates a new ClassItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClassItemWithDefaults() *ClassItem {
	this := ClassItem{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ClassItem) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClassItem) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ClassItem) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ClassItem) SetName(v string) {
	o.Name = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ClassItem) GetPrice() float64 {
	if o == nil || o.Price == nil {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClassItem) GetPriceOk() (*float64, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ClassItem) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *ClassItem) SetPrice(v float64) {
	o.Price = &v
}

func (o ClassItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	return json.Marshal(toSerialize)
}

type NullableClassItem struct {
	value *ClassItem
	isSet bool
}

func (v NullableClassItem) Get() *ClassItem {
	return v.value
}

func (v *NullableClassItem) Set(val *ClassItem) {
	v.value = val
	v.isSet = true
}

func (v NullableClassItem) IsSet() bool {
	return v.isSet
}

func (v *NullableClassItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClassItem(val *ClassItem) *NullableClassItem {
	return &NullableClassItem{value: val, isSet: true}
}

func (v NullableClassItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClassItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
