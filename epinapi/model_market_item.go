/*
 * EpinApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package epinapi

import (
	"encoding/json"
	"time"
)

// MarketItem struct for MarketItem
type MarketItem struct {
	CutoffAt *time.Time `json:"cutoffAt,omitempty"`
	IsAlternate bool `json:"isAlternate"`
	Key string `json:"key"`
	Limits []LimitItem `json:"limits"`
	MatchupId int64 `json:"matchupId"`
	Period *int64 `json:"period,omitempty"`
	Prices []PriceItem `json:"prices"`
	Status *string `json:"status,omitempty"`
	Type *string `json:"type,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewMarketItem instantiates a new MarketItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketItem(isAlternate bool, key string, limits []LimitItem, matchupId int64, prices []PriceItem, ) *MarketItem {
	this := MarketItem{}
	this.IsAlternate = isAlternate
	this.Key = key
	this.Limits = limits
	this.MatchupId = matchupId
	this.Prices = prices
	return &this
}

// NewMarketItemWithDefaults instantiates a new MarketItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketItemWithDefaults() *MarketItem {
	this := MarketItem{}
	return &this
}

// GetCutoffAt returns the CutoffAt field value if set, zero value otherwise.
func (o *MarketItem) GetCutoffAt() time.Time {
	if o == nil || o.CutoffAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CutoffAt
}

// GetCutoffAtOk returns a tuple with the CutoffAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketItem) GetCutoffAtOk() (*time.Time, bool) {
	if o == nil || o.CutoffAt == nil {
		return nil, false
	}
	return o.CutoffAt, true
}

// HasCutoffAt returns a boolean if a field has been set.
func (o *MarketItem) HasCutoffAt() bool {
	if o != nil && o.CutoffAt != nil {
		return true
	}

	return false
}

// SetCutoffAt gets a reference to the given time.Time and assigns it to the CutoffAt field.
func (o *MarketItem) SetCutoffAt(v time.Time) {
	o.CutoffAt = &v
}

// GetIsAlternate returns the IsAlternate field value
func (o *MarketItem) GetIsAlternate() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.IsAlternate
}

// GetIsAlternateOk returns a tuple with the IsAlternate field value
// and a boolean to check if the value has been set.
func (o *MarketItem) GetIsAlternateOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsAlternate, true
}

// SetIsAlternate sets field value
func (o *MarketItem) SetIsAlternate(v bool) {
	o.IsAlternate = v
}

// GetKey returns the Key field value
func (o *MarketItem) GetKey() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *MarketItem) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *MarketItem) SetKey(v string) {
	o.Key = v
}

// GetLimits returns the Limits field value
func (o *MarketItem) GetLimits() []LimitItem {
	if o == nil  {
		var ret []LimitItem
		return ret
	}

	return o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value
// and a boolean to check if the value has been set.
func (o *MarketItem) GetLimitsOk() (*[]LimitItem, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Limits, true
}

// SetLimits sets field value
func (o *MarketItem) SetLimits(v []LimitItem) {
	o.Limits = v
}

// GetMatchupId returns the MatchupId field value
func (o *MarketItem) GetMatchupId() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.MatchupId
}

// GetMatchupIdOk returns a tuple with the MatchupId field value
// and a boolean to check if the value has been set.
func (o *MarketItem) GetMatchupIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MatchupId, true
}

// SetMatchupId sets field value
func (o *MarketItem) SetMatchupId(v int64) {
	o.MatchupId = v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *MarketItem) GetPeriod() int64 {
	if o == nil || o.Period == nil {
		var ret int64
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketItem) GetPeriodOk() (*int64, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *MarketItem) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given int64 and assigns it to the Period field.
func (o *MarketItem) SetPeriod(v int64) {
	o.Period = &v
}

// GetPrices returns the Prices field value
func (o *MarketItem) GetPrices() []PriceItem {
	if o == nil  {
		var ret []PriceItem
		return ret
	}

	return o.Prices
}

// GetPricesOk returns a tuple with the Prices field value
// and a boolean to check if the value has been set.
func (o *MarketItem) GetPricesOk() (*[]PriceItem, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Prices, true
}

// SetPrices sets field value
func (o *MarketItem) SetPrices(v []PriceItem) {
	o.Prices = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *MarketItem) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketItem) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MarketItem) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *MarketItem) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MarketItem) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketItem) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MarketItem) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MarketItem) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *MarketItem) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MarketItem) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *MarketItem) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *MarketItem) SetVersion(v int64) {
	o.Version = &v
}

func (o MarketItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CutoffAt != nil {
		toSerialize["cutoffAt"] = o.CutoffAt
	}
	if true {
		toSerialize["isAlternate"] = o.IsAlternate
	}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["limits"] = o.Limits
	}
	if true {
		toSerialize["matchupId"] = o.MatchupId
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if true {
		toSerialize["prices"] = o.Prices
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableMarketItem struct {
	value *MarketItem
	isSet bool
}

func (v NullableMarketItem) Get() *MarketItem {
	return v.value
}

func (v *NullableMarketItem) Set(val *MarketItem) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketItem) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketItem(val *MarketItem) *NullableMarketItem {
	return &NullableMarketItem{value: val, isSet: true}
}

func (v NullableMarketItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
