/*
 * EpinApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package epinapi

import (
	"encoding/json"
)

// SelectionItem struct for SelectionItem
type SelectionItem struct {
	MatchupId int64 `json:"matchupId"`
	MarketKey string `json:"marketKey"`
	Designation string `json:"designation"`
	Pitchers *[]PitcherItem `json:"pitchers,omitempty"`
	Price float64 `json:"price"`
	Points *float64 `json:"points,omitempty"`
	ParticipantId *int64 `json:"participantId,omitempty"`
}

// NewSelectionItem instantiates a new SelectionItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelectionItem(matchupId int64, marketKey string, designation string, price float64, ) *SelectionItem {
	this := SelectionItem{}
	this.MatchupId = matchupId
	this.MarketKey = marketKey
	this.Designation = designation
	this.Price = price
	return &this
}

// NewSelectionItemWithDefaults instantiates a new SelectionItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelectionItemWithDefaults() *SelectionItem {
	this := SelectionItem{}
	return &this
}

// GetMatchupId returns the MatchupId field value
func (o *SelectionItem) GetMatchupId() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.MatchupId
}

// GetMatchupIdOk returns a tuple with the MatchupId field value
// and a boolean to check if the value has been set.
func (o *SelectionItem) GetMatchupIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MatchupId, true
}

// SetMatchupId sets field value
func (o *SelectionItem) SetMatchupId(v int64) {
	o.MatchupId = v
}

// GetMarketKey returns the MarketKey field value
func (o *SelectionItem) GetMarketKey() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.MarketKey
}

// GetMarketKeyOk returns a tuple with the MarketKey field value
// and a boolean to check if the value has been set.
func (o *SelectionItem) GetMarketKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MarketKey, true
}

// SetMarketKey sets field value
func (o *SelectionItem) SetMarketKey(v string) {
	o.MarketKey = v
}

// GetDesignation returns the Designation field value
func (o *SelectionItem) GetDesignation() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Designation
}

// GetDesignationOk returns a tuple with the Designation field value
// and a boolean to check if the value has been set.
func (o *SelectionItem) GetDesignationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Designation, true
}

// SetDesignation sets field value
func (o *SelectionItem) SetDesignation(v string) {
	o.Designation = v
}

// GetPitchers returns the Pitchers field value if set, zero value otherwise.
func (o *SelectionItem) GetPitchers() []PitcherItem {
	if o == nil || o.Pitchers == nil {
		var ret []PitcherItem
		return ret
	}
	return *o.Pitchers
}

// GetPitchersOk returns a tuple with the Pitchers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectionItem) GetPitchersOk() (*[]PitcherItem, bool) {
	if o == nil || o.Pitchers == nil {
		return nil, false
	}
	return o.Pitchers, true
}

// HasPitchers returns a boolean if a field has been set.
func (o *SelectionItem) HasPitchers() bool {
	if o != nil && o.Pitchers != nil {
		return true
	}

	return false
}

// SetPitchers gets a reference to the given []PitcherItem and assigns it to the Pitchers field.
func (o *SelectionItem) SetPitchers(v []PitcherItem) {
	o.Pitchers = &v
}

// GetPrice returns the Price field value
func (o *SelectionItem) GetPrice() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *SelectionItem) GetPriceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *SelectionItem) SetPrice(v float64) {
	o.Price = v
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *SelectionItem) GetPoints() float64 {
	if o == nil || o.Points == nil {
		var ret float64
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectionItem) GetPointsOk() (*float64, bool) {
	if o == nil || o.Points == nil {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *SelectionItem) HasPoints() bool {
	if o != nil && o.Points != nil {
		return true
	}

	return false
}

// SetPoints gets a reference to the given float64 and assigns it to the Points field.
func (o *SelectionItem) SetPoints(v float64) {
	o.Points = &v
}

// GetParticipantId returns the ParticipantId field value if set, zero value otherwise.
func (o *SelectionItem) GetParticipantId() int64 {
	if o == nil || o.ParticipantId == nil {
		var ret int64
		return ret
	}
	return *o.ParticipantId
}

// GetParticipantIdOk returns a tuple with the ParticipantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelectionItem) GetParticipantIdOk() (*int64, bool) {
	if o == nil || o.ParticipantId == nil {
		return nil, false
	}
	return o.ParticipantId, true
}

// HasParticipantId returns a boolean if a field has been set.
func (o *SelectionItem) HasParticipantId() bool {
	if o != nil && o.ParticipantId != nil {
		return true
	}

	return false
}

// SetParticipantId gets a reference to the given int64 and assigns it to the ParticipantId field.
func (o *SelectionItem) SetParticipantId(v int64) {
	o.ParticipantId = &v
}

func (o SelectionItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["matchupId"] = o.MatchupId
	}
	if true {
		toSerialize["marketKey"] = o.MarketKey
	}
	if true {
		toSerialize["designation"] = o.Designation
	}
	if o.Pitchers != nil {
		toSerialize["pitchers"] = o.Pitchers
	}
	if true {
		toSerialize["price"] = o.Price
	}
	if o.Points != nil {
		toSerialize["points"] = o.Points
	}
	if o.ParticipantId != nil {
		toSerialize["participantId"] = o.ParticipantId
	}
	return json.Marshal(toSerialize)
}

type NullableSelectionItem struct {
	value *SelectionItem
	isSet bool
}

func (v NullableSelectionItem) Get() *SelectionItem {
	return v.value
}

func (v *NullableSelectionItem) Set(val *SelectionItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSelectionItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSelectionItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelectionItem(val *SelectionItem) *NullableSelectionItem {
	return &NullableSelectionItem{value: val, isSet: true}
}

func (v NullableSelectionItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelectionItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
