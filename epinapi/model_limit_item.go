/*
 * EpinApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package epinapi

import (
	"encoding/json"
)

// LimitItem struct for LimitItem
type LimitItem struct {
	Amount int64 `json:"amount"`
	Type string `json:"type"`
}

// NewLimitItem instantiates a new LimitItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLimitItem(amount int64, type_ string, ) *LimitItem {
	this := LimitItem{}
	this.Amount = amount
	this.Type = type_
	return &this
}

// NewLimitItemWithDefaults instantiates a new LimitItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLimitItemWithDefaults() *LimitItem {
	this := LimitItem{}
	return &this
}

// GetAmount returns the Amount field value
func (o *LimitItem) GetAmount() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *LimitItem) GetAmountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *LimitItem) SetAmount(v int64) {
	o.Amount = v
}

// GetType returns the Type field value
func (o *LimitItem) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *LimitItem) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *LimitItem) SetType(v string) {
	o.Type = v
}

func (o LimitItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableLimitItem struct {
	value *LimitItem
	isSet bool
}

func (v NullableLimitItem) Get() *LimitItem {
	return v.value
}

func (v *NullableLimitItem) Set(val *LimitItem) {
	v.value = val
	v.isSet = true
}

func (v NullableLimitItem) IsSet() bool {
	return v.isSet
}

func (v *NullableLimitItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLimitItem(val *LimitItem) *NullableLimitItem {
	return &NullableLimitItem{value: val, isSet: true}
}

func (v NullableLimitItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLimitItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
