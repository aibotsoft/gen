/*
 * EpinApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package epinapi

import (
	"encoding/json"
)

// PitcherItem struct for PitcherItem
type PitcherItem struct {
	Alignment *string `json:"alignment,omitempty"`
	Name *string `json:"name,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewPitcherItem instantiates a new PitcherItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPitcherItem() *PitcherItem {
	this := PitcherItem{}
	return &this
}

// NewPitcherItemWithDefaults instantiates a new PitcherItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPitcherItemWithDefaults() *PitcherItem {
	this := PitcherItem{}
	return &this
}

// GetAlignment returns the Alignment field value if set, zero value otherwise.
func (o *PitcherItem) GetAlignment() string {
	if o == nil || o.Alignment == nil {
		var ret string
		return ret
	}
	return *o.Alignment
}

// GetAlignmentOk returns a tuple with the Alignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PitcherItem) GetAlignmentOk() (*string, bool) {
	if o == nil || o.Alignment == nil {
		return nil, false
	}
	return o.Alignment, true
}

// HasAlignment returns a boolean if a field has been set.
func (o *PitcherItem) HasAlignment() bool {
	if o != nil && o.Alignment != nil {
		return true
	}

	return false
}

// SetAlignment gets a reference to the given string and assigns it to the Alignment field.
func (o *PitcherItem) SetAlignment(v string) {
	o.Alignment = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PitcherItem) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PitcherItem) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PitcherItem) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PitcherItem) SetName(v string) {
	o.Name = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PitcherItem) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PitcherItem) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PitcherItem) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PitcherItem) SetStatus(v string) {
	o.Status = &v
}

func (o PitcherItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Alignment != nil {
		toSerialize["alignment"] = o.Alignment
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullablePitcherItem struct {
	value *PitcherItem
	isSet bool
}

func (v NullablePitcherItem) Get() *PitcherItem {
	return v.value
}

func (v *NullablePitcherItem) Set(val *PitcherItem) {
	v.value = val
	v.isSet = true
}

func (v NullablePitcherItem) IsSet() bool {
	return v.isSet
}

func (v *NullablePitcherItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePitcherItem(val *PitcherItem) *NullablePitcherItem {
	return &NullablePitcherItem{value: val, isSet: true}
}

func (v NullablePitcherItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePitcherItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
