/*
 * Sportmarket API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sportmarketapi

import (
	"encoding/json"
)

// PriceItem struct for PriceItem
type PriceItem struct {
	Price *float64 `json:"price,omitempty"`
	Min *[]string `json:"min,omitempty"`
}

// NewPriceItem instantiates a new PriceItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceItem() *PriceItem {
	this := PriceItem{}
	return &this
}

// NewPriceItemWithDefaults instantiates a new PriceItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceItemWithDefaults() *PriceItem {
	this := PriceItem{}
	return &this
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *PriceItem) GetPrice() float64 {
	if o == nil || o.Price == nil {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceItem) GetPriceOk() (*float64, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *PriceItem) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *PriceItem) SetPrice(v float64) {
	o.Price = &v
}

// GetMin returns the Min field value if set, zero value otherwise.
func (o *PriceItem) GetMin() []string {
	if o == nil || o.Min == nil {
		var ret []string
		return ret
	}
	return *o.Min
}

// GetMinOk returns a tuple with the Min field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceItem) GetMinOk() (*[]string, bool) {
	if o == nil || o.Min == nil {
		return nil, false
	}
	return o.Min, true
}

// HasMin returns a boolean if a field has been set.
func (o *PriceItem) HasMin() bool {
	if o != nil && o.Min != nil {
		return true
	}

	return false
}

// SetMin gets a reference to the given []string and assigns it to the Min field.
func (o *PriceItem) SetMin(v []string) {
	o.Min = &v
}

func (o PriceItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Min != nil {
		toSerialize["min"] = o.Min
	}
	return json.Marshal(toSerialize)
}

type NullablePriceItem struct {
	value *PriceItem
	isSet bool
}

func (v NullablePriceItem) Get() *PriceItem {
	return v.value
}

func (v *NullablePriceItem) Set(val *PriceItem) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceItem) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceItem(val *PriceItem) *NullablePriceItem {
	return &NullablePriceItem{value: val, isSet: true}
}

func (v NullablePriceItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
