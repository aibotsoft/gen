/*
 * Sportmarket API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sportmarketapi

import (
	"encoding/json"
)

// FuckOff struct for FuckOff
type FuckOff struct {
	// arbitraryTypeValue object
	ArbitraryTypeValue *interface{} `json:"arbitraryTypeValue,omitempty"`
}

// NewFuckOff instantiates a new FuckOff object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFuckOff() *FuckOff {
	this := FuckOff{}
	return &this
}

// NewFuckOffWithDefaults instantiates a new FuckOff object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFuckOffWithDefaults() *FuckOff {
	this := FuckOff{}
	return &this
}

// GetArbitraryTypeValue returns the ArbitraryTypeValue field value if set, zero value otherwise.
func (o *FuckOff) GetArbitraryTypeValue() interface{} {
	if o == nil || o.ArbitraryTypeValue == nil {
		var ret interface{}
		return ret
	}
	return *o.ArbitraryTypeValue
}

// GetArbitraryTypeValueOk returns a tuple with the ArbitraryTypeValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FuckOff) GetArbitraryTypeValueOk() (*interface{}, bool) {
	if o == nil || o.ArbitraryTypeValue == nil {
		return nil, false
	}
	return o.ArbitraryTypeValue, true
}

// HasArbitraryTypeValue returns a boolean if a field has been set.
func (o *FuckOff) HasArbitraryTypeValue() bool {
	if o != nil && o.ArbitraryTypeValue != nil {
		return true
	}

	return false
}

// SetArbitraryTypeValue gets a reference to the given interface{} and assigns it to the ArbitraryTypeValue field.
func (o *FuckOff) SetArbitraryTypeValue(v interface{}) {
	o.ArbitraryTypeValue = &v
}

func (o FuckOff) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArbitraryTypeValue != nil {
		toSerialize["arbitraryTypeValue"] = o.ArbitraryTypeValue
	}
	return json.Marshal(toSerialize)
}

type NullableFuckOff struct {
	value *FuckOff
	isSet bool
}

func (v NullableFuckOff) Get() *FuckOff {
	return v.value
}

func (v *NullableFuckOff) Set(val *FuckOff) {
	v.value = val
	v.isSet = true
}

func (v NullableFuckOff) IsSet() bool {
	return v.isSet
}

func (v *NullableFuckOff) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFuckOff(val *FuckOff) *NullableFuckOff {
	return &NullableFuckOff{value: val, isSet: true}
}

func (v NullableFuckOff) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFuckOff) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
