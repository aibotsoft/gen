/*
 * Sportmarket API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sportmarketapi

import (
	"encoding/json"
)

// AnyType struct for AnyType
type AnyType struct {
	// arbitraryTypeValue object
	Value interface{} `json:"value"`
}

// NewAnyType instantiates a new AnyType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnyType(value interface{}, ) *AnyType {
	this := AnyType{}
	this.Value = value
	return &this
}

// NewAnyTypeWithDefaults instantiates a new AnyType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnyTypeWithDefaults() *AnyType {
	this := AnyType{}
	return &this
}

// GetValue returns the Value field value
func (o *AnyType) GetValue() interface{} {
	if o == nil  {
		var ret interface{}
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *AnyType) GetValueOk() (*interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *AnyType) SetValue(v interface{}) {
	o.Value = v
}

func (o AnyType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableAnyType struct {
	value *AnyType
	isSet bool
}

func (v NullableAnyType) Get() *AnyType {
	return v.value
}

func (v *NullableAnyType) Set(val *AnyType) {
	v.value = val
	v.isSet = true
}

func (v NullableAnyType) IsSet() bool {
	return v.isSet
}

func (v *NullableAnyType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnyType(val *AnyType) *NullableAnyType {
	return &NullableAnyType{value: val, isSet: true}
}

func (v NullableAnyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnyType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
