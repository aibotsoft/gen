/*
 * Sportmarket API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package sportmarketapi

import (
	"encoding/json"
)

// PriceList struct for PriceList
type PriceList struct {
	Effective *PriceItem `json:"effective,omitempty"`
	Bookie *PriceItem `json:"bookie,omitempty"`
}

// NewPriceList instantiates a new PriceList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPriceList() *PriceList {
	this := PriceList{}
	return &this
}

// NewPriceListWithDefaults instantiates a new PriceList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceListWithDefaults() *PriceList {
	this := PriceList{}
	return &this
}

// GetEffective returns the Effective field value if set, zero value otherwise.
func (o *PriceList) GetEffective() PriceItem {
	if o == nil || o.Effective == nil {
		var ret PriceItem
		return ret
	}
	return *o.Effective
}

// GetEffectiveOk returns a tuple with the Effective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceList) GetEffectiveOk() (*PriceItem, bool) {
	if o == nil || o.Effective == nil {
		return nil, false
	}
	return o.Effective, true
}

// HasEffective returns a boolean if a field has been set.
func (o *PriceList) HasEffective() bool {
	if o != nil && o.Effective != nil {
		return true
	}

	return false
}

// SetEffective gets a reference to the given PriceItem and assigns it to the Effective field.
func (o *PriceList) SetEffective(v PriceItem) {
	o.Effective = &v
}

// GetBookie returns the Bookie field value if set, zero value otherwise.
func (o *PriceList) GetBookie() PriceItem {
	if o == nil || o.Bookie == nil {
		var ret PriceItem
		return ret
	}
	return *o.Bookie
}

// GetBookieOk returns a tuple with the Bookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PriceList) GetBookieOk() (*PriceItem, bool) {
	if o == nil || o.Bookie == nil {
		return nil, false
	}
	return o.Bookie, true
}

// HasBookie returns a boolean if a field has been set.
func (o *PriceList) HasBookie() bool {
	if o != nil && o.Bookie != nil {
		return true
	}

	return false
}

// SetBookie gets a reference to the given PriceItem and assigns it to the Bookie field.
func (o *PriceList) SetBookie(v PriceItem) {
	o.Bookie = &v
}

func (o PriceList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Effective != nil {
		toSerialize["effective"] = o.Effective
	}
	if o.Bookie != nil {
		toSerialize["bookie"] = o.Bookie
	}
	return json.Marshal(toSerialize)
}

type NullablePriceList struct {
	value *PriceList
	isSet bool
}

func (v NullablePriceList) Get() *PriceList {
	return v.value
}

func (v *NullablePriceList) Set(val *PriceList) {
	v.value = val
	v.isSet = true
}

func (v NullablePriceList) IsSet() bool {
	return v.isSet
}

func (v *NullablePriceList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePriceList(val *PriceList) *NullablePriceList {
	return &NullablePriceList{value: val, isSet: true}
}

func (v NullablePriceList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePriceList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
