/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pinapi_old

import (
	"bytes"
	"encoding/json"
)

// SpecialsFixturesEvent Optional event asscoaited with the special.
type SpecialsFixturesEvent struct {
	// Event Id
	Id *int32 `json:"id,omitempty" xml:"id"`
	// The period of the match. For example in soccer 0 (Game), 1 (1st Half) & 2 (2nd Half)
	PeriodNumber *int32 `json:"periodNumber,omitempty" xml:"periodNumber"`
	// Home team name.
	Home *string `json:"home,omitempty" xml:"home"`
	// Away team name.
	Away *string `json:"away,omitempty" xml:"away"`
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SpecialsFixturesEvent) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialsFixturesEvent) GetIdOk() (int32, bool) {
	if o == nil || o.Id == nil {
		var ret int32
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SpecialsFixturesEvent) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SpecialsFixturesEvent) SetId(v int32) {
	o.Id = &v
}

// GetPeriodNumber returns the PeriodNumber field value if set, zero value otherwise.
func (o *SpecialsFixturesEvent) GetPeriodNumber() int32 {
	if o == nil || o.PeriodNumber == nil {
		var ret int32
		return ret
	}
	return *o.PeriodNumber
}

// GetPeriodNumberOk returns a tuple with the PeriodNumber field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialsFixturesEvent) GetPeriodNumberOk() (int32, bool) {
	if o == nil || o.PeriodNumber == nil {
		var ret int32
		return ret, false
	}
	return *o.PeriodNumber, true
}

// HasPeriodNumber returns a boolean if a field has been set.
func (o *SpecialsFixturesEvent) HasPeriodNumber() bool {
	if o != nil && o.PeriodNumber != nil {
		return true
	}

	return false
}

// SetPeriodNumber gets a reference to the given int32 and assigns it to the PeriodNumber field.
func (o *SpecialsFixturesEvent) SetPeriodNumber(v int32) {
	o.PeriodNumber = &v
}

// GetHome returns the Home field value if set, zero value otherwise.
func (o *SpecialsFixturesEvent) GetHome() string {
	if o == nil || o.Home == nil {
		var ret string
		return ret
	}
	return *o.Home
}

// GetHomeOk returns a tuple with the Home field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialsFixturesEvent) GetHomeOk() (string, bool) {
	if o == nil || o.Home == nil {
		var ret string
		return ret, false
	}
	return *o.Home, true
}

// HasHome returns a boolean if a field has been set.
func (o *SpecialsFixturesEvent) HasHome() bool {
	if o != nil && o.Home != nil {
		return true
	}

	return false
}

// SetHome gets a reference to the given string and assigns it to the Home field.
func (o *SpecialsFixturesEvent) SetHome(v string) {
	o.Home = &v
}

// GetAway returns the Away field value if set, zero value otherwise.
func (o *SpecialsFixturesEvent) GetAway() string {
	if o == nil || o.Away == nil {
		var ret string
		return ret
	}
	return *o.Away
}

// GetAwayOk returns a tuple with the Away field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialsFixturesEvent) GetAwayOk() (string, bool) {
	if o == nil || o.Away == nil {
		var ret string
		return ret, false
	}
	return *o.Away, true
}

// HasAway returns a boolean if a field has been set.
func (o *SpecialsFixturesEvent) HasAway() bool {
	if o != nil && o.Away != nil {
		return true
	}

	return false
}

// SetAway gets a reference to the given string and assigns it to the Away field.
func (o *SpecialsFixturesEvent) SetAway(v string) {
	o.Away = &v
}

type NullableSpecialsFixturesEvent struct {
	Value        SpecialsFixturesEvent
	ExplicitNull bool
}

func (v NullableSpecialsFixturesEvent) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableSpecialsFixturesEvent) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
