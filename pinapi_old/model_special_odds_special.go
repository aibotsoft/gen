/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pinapi_old

import (
	"bytes"
	"encoding/json"
)

// SpecialOddsSpecial struct for SpecialOddsSpecial
type SpecialOddsSpecial struct {
	// Special Id.
	Id *int64 `json:"id,omitempty" xml:"id"`
	// Maximum bet volume amount. See [How to calculate max risk from the max volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)
	MaxBet *float64 `json:"maxBet,omitempty" xml:"maxBet"`
	// ContestantLines available for wagering on.
	ContestantLines *[]SpecialOddsContestantLine `json:"contestantLines,omitempty" xml:"contestantLines"`
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SpecialOddsSpecial) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialOddsSpecial) GetIdOk() (int64, bool) {
	if o == nil || o.Id == nil {
		var ret int64
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SpecialOddsSpecial) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *SpecialOddsSpecial) SetId(v int64) {
	o.Id = &v
}

// GetMaxBet returns the MaxBet field value if set, zero value otherwise.
func (o *SpecialOddsSpecial) GetMaxBet() float64 {
	if o == nil || o.MaxBet == nil {
		var ret float64
		return ret
	}
	return *o.MaxBet
}

// GetMaxBetOk returns a tuple with the MaxBet field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialOddsSpecial) GetMaxBetOk() (float64, bool) {
	if o == nil || o.MaxBet == nil {
		var ret float64
		return ret, false
	}
	return *o.MaxBet, true
}

// HasMaxBet returns a boolean if a field has been set.
func (o *SpecialOddsSpecial) HasMaxBet() bool {
	if o != nil && o.MaxBet != nil {
		return true
	}

	return false
}

// SetMaxBet gets a reference to the given float64 and assigns it to the MaxBet field.
func (o *SpecialOddsSpecial) SetMaxBet(v float64) {
	o.MaxBet = &v
}

// GetContestantLines returns the ContestantLines field value if set, zero value otherwise.
func (o *SpecialOddsSpecial) GetContestantLines() []SpecialOddsContestantLine {
	if o == nil || o.ContestantLines == nil {
		var ret []SpecialOddsContestantLine
		return ret
	}
	return *o.ContestantLines
}

// GetContestantLinesOk returns a tuple with the ContestantLines field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialOddsSpecial) GetContestantLinesOk() ([]SpecialOddsContestantLine, bool) {
	if o == nil || o.ContestantLines == nil {
		var ret []SpecialOddsContestantLine
		return ret, false
	}
	return *o.ContestantLines, true
}

// HasContestantLines returns a boolean if a field has been set.
func (o *SpecialOddsSpecial) HasContestantLines() bool {
	if o != nil && o.ContestantLines != nil {
		return true
	}

	return false
}

// SetContestantLines gets a reference to the given []SpecialOddsContestantLine and assigns it to the ContestantLines field.
func (o *SpecialOddsSpecial) SetContestantLines(v []SpecialOddsContestantLine) {
	o.ContestantLines = &v
}

type NullableSpecialOddsSpecial struct {
	Value        SpecialOddsSpecial
	ExplicitNull bool
}

func (v NullableSpecialOddsSpecial) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableSpecialOddsSpecial) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
