/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pinapi_old

import (
	"bytes"
	"encoding/json"
	"time"
)

// Fixture struct for Fixture
type Fixture struct {
	// Event id.
	Id *int64 `json:"id,omitempty" xml:"id"`
	// If event is linked to another event, parentId will be populated.  Live event would have pre game event as parent id.
	ParentId *int64 `json:"parentId,omitempty" xml:"parentId"`
	// Start time of the event in UTC.
	Starts *time.Time `json:"starts,omitempty" xml:"starts"`
	// Home team name.
	Home *string `json:"home,omitempty" xml:"home"`
	// Away team name.
	Away *string `json:"away,omitempty" xml:"away"`
	// Team1 rotation number. Please note that in the next version of /fixtures, rotNum property will be decommissioned. ParentId can be used instead to group the related events.
	RotNum *string `json:"rotNum,omitempty" xml:"rotNum"`
	// Indicates live status of the event.   0 = No live betting will be offered on this event,  1 = Live betting event,  2 = Live betting will be offered on this match, but on a different event. Please note that [pre-game and live events are different](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-find-associated-events) .
	LiveStatus *int32 `json:"liveStatus,omitempty" xml:"liveStatus"`
	// Home team pitcher. Only for Baseball.
	HomePitcher *string `json:"homePitcher,omitempty" xml:"homePitcher"`
	// Away team pitcher. Only for Baseball.
	AwayPitcher *string `json:"awayPitcher,omitempty" xml:"awayPitcher"`
	// This is deprecated parameter, please check period's `status` in the `/odds` endpoint to see if it's open for betting.   O = This is the starting status of a game.    H = This status indicates that the lines are temporarily unavailable for betting,   I = This status indicates that one or more lines have a red circle (lower maximum bet amount).
	Status *string `json:"status,omitempty" xml:"status"`
	//  Parlay status of the event.   0 = Allowed to parlay, without restrictions,  1 = Not allowed to parlay this event,  2 = Allowed to parlay with the restrictions. You cannot have more than one leg from the same event in the parlay. All events with the same rotation number are treated as same event.
	ParlayRestriction *int32 `json:"parlayRestriction,omitempty" xml:"parlayRestriction"`
	// Whether an event is offer with alternative teaser points. Events with alternative teaser points may vary from teaser definition.
	AltTeaser *bool `json:"altTeaser,omitempty" xml:"altTeaser"`
	// Specifies based on what the event will be resulted, e.g. Corners, Bookings
	ResultingUnit *string `json:"resultingUnit,omitempty" xml:"resultingUnit"`
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Fixture) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Fixture) GetIdOk() (int64, bool) {
	if o == nil || o.Id == nil {
		var ret int64
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Fixture) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Fixture) SetId(v int64) {
	o.Id = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *Fixture) GetParentId() int64 {
	if o == nil || o.ParentId == nil {
		var ret int64
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Fixture) GetParentIdOk() (int64, bool) {
	if o == nil || o.ParentId == nil {
		var ret int64
		return ret, false
	}
	return *o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *Fixture) HasParentId() bool {
	if o != nil && o.ParentId != nil {
		return true
	}

	return false
}

// SetParentId gets a reference to the given int64 and assigns it to the ParentId field.
func (o *Fixture) SetParentId(v int64) {
	o.ParentId = &v
}

// GetStarts returns the Starts field value if set, zero value otherwise.
func (o *Fixture) GetStarts() time.Time {
	if o == nil || o.Starts == nil {
		var ret time.Time
		return ret
	}
	return *o.Starts
}

// GetStartsOk returns a tuple with the Starts field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Fixture) GetStartsOk() (time.Time, bool) {
	if o == nil || o.Starts == nil {
		var ret time.Time
		return ret, false
	}
	return *o.Starts, true
}

// HasStarts returns a boolean if a field has been set.
func (o *Fixture) HasStarts() bool {
	if o != nil && o.Starts != nil {
		return true
	}

	return false
}

// SetStarts gets a reference to the given time.Time and assigns it to the Starts field.
func (o *Fixture) SetStarts(v time.Time) {
	o.Starts = &v
}

// GetHome returns the Home field value if set, zero value otherwise.
func (o *Fixture) GetHome() string {
	if o == nil || o.Home == nil {
		var ret string
		return ret
	}
	return *o.Home
}

// GetHomeOk returns a tuple with the Home field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Fixture) GetHomeOk() (string, bool) {
	if o == nil || o.Home == nil {
		var ret string
		return ret, false
	}
	return *o.Home, true
}

// HasHome returns a boolean if a field has been set.
func (o *Fixture) HasHome() bool {
	if o != nil && o.Home != nil {
		return true
	}

	return false
}

// SetHome gets a reference to the given string and assigns it to the Home field.
func (o *Fixture) SetHome(v string) {
	o.Home = &v
}

// GetAway returns the Away field value if set, zero value otherwise.
func (o *Fixture) GetAway() string {
	if o == nil || o.Away == nil {
		var ret string
		return ret
	}
	return *o.Away
}

// GetAwayOk returns a tuple with the Away field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Fixture) GetAwayOk() (string, bool) {
	if o == nil || o.Away == nil {
		var ret string
		return ret, false
	}
	return *o.Away, true
}

// HasAway returns a boolean if a field has been set.
func (o *Fixture) HasAway() bool {
	if o != nil && o.Away != nil {
		return true
	}

	return false
}

// SetAway gets a reference to the given string and assigns it to the Away field.
func (o *Fixture) SetAway(v string) {
	o.Away = &v
}

// GetRotNum returns the RotNum field value if set, zero value otherwise.
func (o *Fixture) GetRotNum() string {
	if o == nil || o.RotNum == nil {
		var ret string
		return ret
	}
	return *o.RotNum
}

// GetRotNumOk returns a tuple with the RotNum field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Fixture) GetRotNumOk() (string, bool) {
	if o == nil || o.RotNum == nil {
		var ret string
		return ret, false
	}
	return *o.RotNum, true
}

// HasRotNum returns a boolean if a field has been set.
func (o *Fixture) HasRotNum() bool {
	if o != nil && o.RotNum != nil {
		return true
	}

	return false
}

// SetRotNum gets a reference to the given string and assigns it to the RotNum field.
func (o *Fixture) SetRotNum(v string) {
	o.RotNum = &v
}

// GetLiveStatus returns the LiveStatus field value if set, zero value otherwise.
func (o *Fixture) GetLiveStatus() int32 {
	if o == nil || o.LiveStatus == nil {
		var ret int32
		return ret
	}
	return *o.LiveStatus
}

// GetLiveStatusOk returns a tuple with the LiveStatus field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Fixture) GetLiveStatusOk() (int32, bool) {
	if o == nil || o.LiveStatus == nil {
		var ret int32
		return ret, false
	}
	return *o.LiveStatus, true
}

// HasLiveStatus returns a boolean if a field has been set.
func (o *Fixture) HasLiveStatus() bool {
	if o != nil && o.LiveStatus != nil {
		return true
	}

	return false
}

// SetLiveStatus gets a reference to the given int32 and assigns it to the LiveStatus field.
func (o *Fixture) SetLiveStatus(v int32) {
	o.LiveStatus = &v
}

// GetHomePitcher returns the HomePitcher field value if set, zero value otherwise.
func (o *Fixture) GetHomePitcher() string {
	if o == nil || o.HomePitcher == nil {
		var ret string
		return ret
	}
	return *o.HomePitcher
}

// GetHomePitcherOk returns a tuple with the HomePitcher field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Fixture) GetHomePitcherOk() (string, bool) {
	if o == nil || o.HomePitcher == nil {
		var ret string
		return ret, false
	}
	return *o.HomePitcher, true
}

// HasHomePitcher returns a boolean if a field has been set.
func (o *Fixture) HasHomePitcher() bool {
	if o != nil && o.HomePitcher != nil {
		return true
	}

	return false
}

// SetHomePitcher gets a reference to the given string and assigns it to the HomePitcher field.
func (o *Fixture) SetHomePitcher(v string) {
	o.HomePitcher = &v
}

// GetAwayPitcher returns the AwayPitcher field value if set, zero value otherwise.
func (o *Fixture) GetAwayPitcher() string {
	if o == nil || o.AwayPitcher == nil {
		var ret string
		return ret
	}
	return *o.AwayPitcher
}

// GetAwayPitcherOk returns a tuple with the AwayPitcher field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Fixture) GetAwayPitcherOk() (string, bool) {
	if o == nil || o.AwayPitcher == nil {
		var ret string
		return ret, false
	}
	return *o.AwayPitcher, true
}

// HasAwayPitcher returns a boolean if a field has been set.
func (o *Fixture) HasAwayPitcher() bool {
	if o != nil && o.AwayPitcher != nil {
		return true
	}

	return false
}

// SetAwayPitcher gets a reference to the given string and assigns it to the AwayPitcher field.
func (o *Fixture) SetAwayPitcher(v string) {
	o.AwayPitcher = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Fixture) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Fixture) GetStatusOk() (string, bool) {
	if o == nil || o.Status == nil {
		var ret string
		return ret, false
	}
	return *o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Fixture) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Fixture) SetStatus(v string) {
	o.Status = &v
}

// GetParlayRestriction returns the ParlayRestriction field value if set, zero value otherwise.
func (o *Fixture) GetParlayRestriction() int32 {
	if o == nil || o.ParlayRestriction == nil {
		var ret int32
		return ret
	}
	return *o.ParlayRestriction
}

// GetParlayRestrictionOk returns a tuple with the ParlayRestriction field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Fixture) GetParlayRestrictionOk() (int32, bool) {
	if o == nil || o.ParlayRestriction == nil {
		var ret int32
		return ret, false
	}
	return *o.ParlayRestriction, true
}

// HasParlayRestriction returns a boolean if a field has been set.
func (o *Fixture) HasParlayRestriction() bool {
	if o != nil && o.ParlayRestriction != nil {
		return true
	}

	return false
}

// SetParlayRestriction gets a reference to the given int32 and assigns it to the ParlayRestriction field.
func (o *Fixture) SetParlayRestriction(v int32) {
	o.ParlayRestriction = &v
}

// GetAltTeaser returns the AltTeaser field value if set, zero value otherwise.
func (o *Fixture) GetAltTeaser() bool {
	if o == nil || o.AltTeaser == nil {
		var ret bool
		return ret
	}
	return *o.AltTeaser
}

// GetAltTeaserOk returns a tuple with the AltTeaser field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Fixture) GetAltTeaserOk() (bool, bool) {
	if o == nil || o.AltTeaser == nil {
		var ret bool
		return ret, false
	}
	return *o.AltTeaser, true
}

// HasAltTeaser returns a boolean if a field has been set.
func (o *Fixture) HasAltTeaser() bool {
	if o != nil && o.AltTeaser != nil {
		return true
	}

	return false
}

// SetAltTeaser gets a reference to the given bool and assigns it to the AltTeaser field.
func (o *Fixture) SetAltTeaser(v bool) {
	o.AltTeaser = &v
}

// GetResultingUnit returns the ResultingUnit field value if set, zero value otherwise.
func (o *Fixture) GetResultingUnit() string {
	if o == nil || o.ResultingUnit == nil {
		var ret string
		return ret
	}
	return *o.ResultingUnit
}

// GetResultingUnitOk returns a tuple with the ResultingUnit field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Fixture) GetResultingUnitOk() (string, bool) {
	if o == nil || o.ResultingUnit == nil {
		var ret string
		return ret, false
	}
	return *o.ResultingUnit, true
}

// HasResultingUnit returns a boolean if a field has been set.
func (o *Fixture) HasResultingUnit() bool {
	if o != nil && o.ResultingUnit != nil {
		return true
	}

	return false
}

// SetResultingUnit gets a reference to the given string and assigns it to the ResultingUnit field.
func (o *Fixture) SetResultingUnit(v string) {
	o.ResultingUnit = &v
}

type NullableFixture struct {
	Value        Fixture
	ExplicitNull bool
}

func (v NullableFixture) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableFixture) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
