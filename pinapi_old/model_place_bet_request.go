/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pinapi_old

import (
	"bytes"
	"encoding/json"
)

// PlaceBetRequest Request to place a bet.
type PlaceBetRequest struct {
	OddsFormat *OddsFormat `json:"oddsFormat,omitempty" xml:"oddsFormat"`
	// This is a Unique ID for PlaceBet requests. This is to support idempotent requests.
	UniqueRequestId *string `json:"uniqueRequestId,omitempty" xml:"uniqueRequestId"`
	// Whether or not to accept a bet when there is a line change in favor of the client.
	AcceptBetterLine *bool `json:"acceptBetterLine,omitempty" xml:"acceptBetterLine"`
	// amount in clientâ€™s currency.
	Stake *float64 `json:"stake,omitempty" xml:"stake"`
	// Whether the stake amount is risk or win amount.
	WinRiskStake *string `json:"winRiskStake,omitempty" xml:"winRiskStake"`
	// Line identification.
	LineId *int64 `json:"lineId,omitempty" xml:"lineId"`
	// Alternate line identification.
	AltLineId *NullableInt64 `json:"altLineId,omitempty" xml:"altLineId"`
	// Baseball only. Refers to the pitcher for Team1. This applicable only for MONEYLINE bet type, for all other bet types this has to be TRUE.
	Pitcher1MustStart *bool `json:"pitcher1MustStart,omitempty" xml:"pitcher1MustStart"`
	// Baseball only. Refers to the pitcher for Team2. This applicable only for MONEYLINE bet type, for all other bet types this has to be TRUE.
	Pitcher2MustStart *bool `json:"pitcher2MustStart,omitempty" xml:"pitcher2MustStart"`
	// NORMAL - bet will be placed on specified stake.   FILLANDKILL - If the stake is over the max limit, bet will be placed on max limit, otherwise it will be placed on specified stake.   FILLMAXLIMIT - bet will be places on max limit, stake amount will be ignored. Please note that maximum limits can change at any moment, which may result in risking more than anticipated. This option is replacement of isMaxStakeBet from v1/bets/place'
	FillType     *string `json:"fillType,omitempty" xml:"fillType"`
	SportId      *int32  `json:"sportId,omitempty" xml:"sportId"`
	EventId      *int64  `json:"eventId,omitempty" xml:"eventId"`
	PeriodNumber *int32  `json:"periodNumber,omitempty" xml:"periodNumber"`
	// Bet type.
	BetType *string `json:"betType,omitempty" xml:"betType"`
	// Team type.
	Team *string `json:"team,omitempty" xml:"team"`
	// Side type.
	Side *NullableString `json:"side,omitempty" xml:"side"`
}

// GetOddsFormat returns the OddsFormat field value if set, zero value otherwise.
func (o *PlaceBetRequest) GetOddsFormat() OddsFormat {
	if o == nil || o.OddsFormat == nil {
		var ret OddsFormat
		return ret
	}
	return *o.OddsFormat
}

// GetOddsFormatOk returns a tuple with the OddsFormat field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetRequest) GetOddsFormatOk() (OddsFormat, bool) {
	if o == nil || o.OddsFormat == nil {
		var ret OddsFormat
		return ret, false
	}
	return *o.OddsFormat, true
}

// HasOddsFormat returns a boolean if a field has been set.
func (o *PlaceBetRequest) HasOddsFormat() bool {
	if o != nil && o.OddsFormat != nil {
		return true
	}

	return false
}

// SetOddsFormat gets a reference to the given OddsFormat and assigns it to the OddsFormat field.
func (o *PlaceBetRequest) SetOddsFormat(v OddsFormat) {
	o.OddsFormat = &v
}

// GetUniqueRequestId returns the UniqueRequestId field value if set, zero value otherwise.
func (o *PlaceBetRequest) GetUniqueRequestId() string {
	if o == nil || o.UniqueRequestId == nil {
		var ret string
		return ret
	}
	return *o.UniqueRequestId
}

// GetUniqueRequestIdOk returns a tuple with the UniqueRequestId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetRequest) GetUniqueRequestIdOk() (string, bool) {
	if o == nil || o.UniqueRequestId == nil {
		var ret string
		return ret, false
	}
	return *o.UniqueRequestId, true
}

// HasUniqueRequestId returns a boolean if a field has been set.
func (o *PlaceBetRequest) HasUniqueRequestId() bool {
	if o != nil && o.UniqueRequestId != nil {
		return true
	}

	return false
}

// SetUniqueRequestId gets a reference to the given string and assigns it to the UniqueRequestId field.
func (o *PlaceBetRequest) SetUniqueRequestId(v string) {
	o.UniqueRequestId = &v
}

// GetAcceptBetterLine returns the AcceptBetterLine field value if set, zero value otherwise.
func (o *PlaceBetRequest) GetAcceptBetterLine() bool {
	if o == nil || o.AcceptBetterLine == nil {
		var ret bool
		return ret
	}
	return *o.AcceptBetterLine
}

// GetAcceptBetterLineOk returns a tuple with the AcceptBetterLine field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetRequest) GetAcceptBetterLineOk() (bool, bool) {
	if o == nil || o.AcceptBetterLine == nil {
		var ret bool
		return ret, false
	}
	return *o.AcceptBetterLine, true
}

// HasAcceptBetterLine returns a boolean if a field has been set.
func (o *PlaceBetRequest) HasAcceptBetterLine() bool {
	if o != nil && o.AcceptBetterLine != nil {
		return true
	}

	return false
}

// SetAcceptBetterLine gets a reference to the given bool and assigns it to the AcceptBetterLine field.
func (o *PlaceBetRequest) SetAcceptBetterLine(v bool) {
	o.AcceptBetterLine = &v
}

// GetStake returns the Stake field value if set, zero value otherwise.
func (o *PlaceBetRequest) GetStake() float64 {
	if o == nil || o.Stake == nil {
		var ret float64
		return ret
	}
	return *o.Stake
}

// GetStakeOk returns a tuple with the Stake field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetRequest) GetStakeOk() (float64, bool) {
	if o == nil || o.Stake == nil {
		var ret float64
		return ret, false
	}
	return *o.Stake, true
}

// HasStake returns a boolean if a field has been set.
func (o *PlaceBetRequest) HasStake() bool {
	if o != nil && o.Stake != nil {
		return true
	}

	return false
}

// SetStake gets a reference to the given float64 and assigns it to the Stake field.
func (o *PlaceBetRequest) SetStake(v float64) {
	o.Stake = &v
}

// GetWinRiskStake returns the WinRiskStake field value if set, zero value otherwise.
func (o *PlaceBetRequest) GetWinRiskStake() string {
	if o == nil || o.WinRiskStake == nil {
		var ret string
		return ret
	}
	return *o.WinRiskStake
}

// GetWinRiskStakeOk returns a tuple with the WinRiskStake field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetRequest) GetWinRiskStakeOk() (string, bool) {
	if o == nil || o.WinRiskStake == nil {
		var ret string
		return ret, false
	}
	return *o.WinRiskStake, true
}

// HasWinRiskStake returns a boolean if a field has been set.
func (o *PlaceBetRequest) HasWinRiskStake() bool {
	if o != nil && o.WinRiskStake != nil {
		return true
	}

	return false
}

// SetWinRiskStake gets a reference to the given string and assigns it to the WinRiskStake field.
func (o *PlaceBetRequest) SetWinRiskStake(v string) {
	o.WinRiskStake = &v
}

// GetLineId returns the LineId field value if set, zero value otherwise.
func (o *PlaceBetRequest) GetLineId() int64 {
	if o == nil || o.LineId == nil {
		var ret int64
		return ret
	}
	return *o.LineId
}

// GetLineIdOk returns a tuple with the LineId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetRequest) GetLineIdOk() (int64, bool) {
	if o == nil || o.LineId == nil {
		var ret int64
		return ret, false
	}
	return *o.LineId, true
}

// HasLineId returns a boolean if a field has been set.
func (o *PlaceBetRequest) HasLineId() bool {
	if o != nil && o.LineId != nil {
		return true
	}

	return false
}

// SetLineId gets a reference to the given int64 and assigns it to the LineId field.
func (o *PlaceBetRequest) SetLineId(v int64) {
	o.LineId = &v
}

// GetAltLineId returns the AltLineId field value if set, zero value otherwise.
func (o *PlaceBetRequest) GetAltLineId() NullableInt64 {
	if o == nil || o.AltLineId == nil {
		var ret NullableInt64
		return ret
	}
	return *o.AltLineId
}

// GetAltLineIdOk returns a tuple with the AltLineId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetRequest) GetAltLineIdOk() (NullableInt64, bool) {
	if o == nil || o.AltLineId == nil {
		var ret NullableInt64
		return ret, false
	}
	return *o.AltLineId, true
}

// HasAltLineId returns a boolean if a field has been set.
func (o *PlaceBetRequest) HasAltLineId() bool {
	if o != nil && o.AltLineId != nil {
		return true
	}

	return false
}

// SetAltLineId gets a reference to the given NullableInt64 and assigns it to the AltLineId field.
func (o *PlaceBetRequest) SetAltLineId(v NullableInt64) {
	o.AltLineId = &v
}

// GetPitcher1MustStart returns the Pitcher1MustStart field value if set, zero value otherwise.
func (o *PlaceBetRequest) GetPitcher1MustStart() bool {
	if o == nil || o.Pitcher1MustStart == nil {
		var ret bool
		return ret
	}
	return *o.Pitcher1MustStart
}

// GetPitcher1MustStartOk returns a tuple with the Pitcher1MustStart field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetRequest) GetPitcher1MustStartOk() (bool, bool) {
	if o == nil || o.Pitcher1MustStart == nil {
		var ret bool
		return ret, false
	}
	return *o.Pitcher1MustStart, true
}

// HasPitcher1MustStart returns a boolean if a field has been set.
func (o *PlaceBetRequest) HasPitcher1MustStart() bool {
	if o != nil && o.Pitcher1MustStart != nil {
		return true
	}

	return false
}

// SetPitcher1MustStart gets a reference to the given bool and assigns it to the Pitcher1MustStart field.
func (o *PlaceBetRequest) SetPitcher1MustStart(v bool) {
	o.Pitcher1MustStart = &v
}

// GetPitcher2MustStart returns the Pitcher2MustStart field value if set, zero value otherwise.
func (o *PlaceBetRequest) GetPitcher2MustStart() bool {
	if o == nil || o.Pitcher2MustStart == nil {
		var ret bool
		return ret
	}
	return *o.Pitcher2MustStart
}

// GetPitcher2MustStartOk returns a tuple with the Pitcher2MustStart field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetRequest) GetPitcher2MustStartOk() (bool, bool) {
	if o == nil || o.Pitcher2MustStart == nil {
		var ret bool
		return ret, false
	}
	return *o.Pitcher2MustStart, true
}

// HasPitcher2MustStart returns a boolean if a field has been set.
func (o *PlaceBetRequest) HasPitcher2MustStart() bool {
	if o != nil && o.Pitcher2MustStart != nil {
		return true
	}

	return false
}

// SetPitcher2MustStart gets a reference to the given bool and assigns it to the Pitcher2MustStart field.
func (o *PlaceBetRequest) SetPitcher2MustStart(v bool) {
	o.Pitcher2MustStart = &v
}

// GetFillType returns the FillType field value if set, zero value otherwise.
func (o *PlaceBetRequest) GetFillType() string {
	if o == nil || o.FillType == nil {
		var ret string
		return ret
	}
	return *o.FillType
}

// GetFillTypeOk returns a tuple with the FillType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetRequest) GetFillTypeOk() (string, bool) {
	if o == nil || o.FillType == nil {
		var ret string
		return ret, false
	}
	return *o.FillType, true
}

// HasFillType returns a boolean if a field has been set.
func (o *PlaceBetRequest) HasFillType() bool {
	if o != nil && o.FillType != nil {
		return true
	}

	return false
}

// SetFillType gets a reference to the given string and assigns it to the FillType field.
func (o *PlaceBetRequest) SetFillType(v string) {
	o.FillType = &v
}

// GetSportId returns the SportId field value if set, zero value otherwise.
func (o *PlaceBetRequest) GetSportId() int32 {
	if o == nil || o.SportId == nil {
		var ret int32
		return ret
	}
	return *o.SportId
}

// GetSportIdOk returns a tuple with the SportId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetRequest) GetSportIdOk() (int32, bool) {
	if o == nil || o.SportId == nil {
		var ret int32
		return ret, false
	}
	return *o.SportId, true
}

// HasSportId returns a boolean if a field has been set.
func (o *PlaceBetRequest) HasSportId() bool {
	if o != nil && o.SportId != nil {
		return true
	}

	return false
}

// SetSportId gets a reference to the given int32 and assigns it to the SportId field.
func (o *PlaceBetRequest) SetSportId(v int32) {
	o.SportId = &v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *PlaceBetRequest) GetEventId() int64 {
	if o == nil || o.EventId == nil {
		var ret int64
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetRequest) GetEventIdOk() (int64, bool) {
	if o == nil || o.EventId == nil {
		var ret int64
		return ret, false
	}
	return *o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *PlaceBetRequest) HasEventId() bool {
	if o != nil && o.EventId != nil {
		return true
	}

	return false
}

// SetEventId gets a reference to the given int64 and assigns it to the EventId field.
func (o *PlaceBetRequest) SetEventId(v int64) {
	o.EventId = &v
}

// GetPeriodNumber returns the PeriodNumber field value if set, zero value otherwise.
func (o *PlaceBetRequest) GetPeriodNumber() int32 {
	if o == nil || o.PeriodNumber == nil {
		var ret int32
		return ret
	}
	return *o.PeriodNumber
}

// GetPeriodNumberOk returns a tuple with the PeriodNumber field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetRequest) GetPeriodNumberOk() (int32, bool) {
	if o == nil || o.PeriodNumber == nil {
		var ret int32
		return ret, false
	}
	return *o.PeriodNumber, true
}

// HasPeriodNumber returns a boolean if a field has been set.
func (o *PlaceBetRequest) HasPeriodNumber() bool {
	if o != nil && o.PeriodNumber != nil {
		return true
	}

	return false
}

// SetPeriodNumber gets a reference to the given int32 and assigns it to the PeriodNumber field.
func (o *PlaceBetRequest) SetPeriodNumber(v int32) {
	o.PeriodNumber = &v
}

// GetBetType returns the BetType field value if set, zero value otherwise.
func (o *PlaceBetRequest) GetBetType() string {
	if o == nil || o.BetType == nil {
		var ret string
		return ret
	}
	return *o.BetType
}

// GetBetTypeOk returns a tuple with the BetType field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetRequest) GetBetTypeOk() (string, bool) {
	if o == nil || o.BetType == nil {
		var ret string
		return ret, false
	}
	return *o.BetType, true
}

// HasBetType returns a boolean if a field has been set.
func (o *PlaceBetRequest) HasBetType() bool {
	if o != nil && o.BetType != nil {
		return true
	}

	return false
}

// SetBetType gets a reference to the given string and assigns it to the BetType field.
func (o *PlaceBetRequest) SetBetType(v string) {
	o.BetType = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *PlaceBetRequest) GetTeam() string {
	if o == nil || o.Team == nil {
		var ret string
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetRequest) GetTeamOk() (string, bool) {
	if o == nil || o.Team == nil {
		var ret string
		return ret, false
	}
	return *o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *PlaceBetRequest) HasTeam() bool {
	if o != nil && o.Team != nil {
		return true
	}

	return false
}

// SetTeam gets a reference to the given string and assigns it to the Team field.
func (o *PlaceBetRequest) SetTeam(v string) {
	o.Team = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *PlaceBetRequest) GetSide() NullableString {
	if o == nil || o.Side == nil {
		var ret NullableString
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetRequest) GetSideOk() (NullableString, bool) {
	if o == nil || o.Side == nil {
		var ret NullableString
		return ret, false
	}
	return *o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *PlaceBetRequest) HasSide() bool {
	if o != nil && o.Side != nil {
		return true
	}

	return false
}

// SetSide gets a reference to the given NullableString and assigns it to the Side field.
func (o *PlaceBetRequest) SetSide(v NullableString) {
	o.Side = &v
}

type NullablePlaceBetRequest struct {
	Value        PlaceBetRequest
	ExplicitNull bool
}

func (v NullablePlaceBetRequest) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullablePlaceBetRequest) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
