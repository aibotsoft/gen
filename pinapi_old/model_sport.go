/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pinapi_old

import (
	"bytes"
	"encoding/json"
)

// Sport struct for Sport
type Sport struct {
	// Sport Id.
	Id *int32 `json:"id,omitempty" xml:"id"`
	// Sport name.
	Name *string `json:"name,omitempty" xml:"name"`
	// Whether the sport currently has events or specials.
	HasOfferings *bool `json:"hasOfferings,omitempty" xml:"hasOfferings"`
	// Indicates how many specials are in the given sport.
	LeagueSpecialsCount *int32 `json:"leagueSpecialsCount,omitempty" xml:"leagueSpecialsCount"`
	// Indicates how many event specials are in the given sport.
	EventSpecialsCount *int32 `json:"eventSpecialsCount,omitempty" xml:"eventSpecialsCount"`
	// Indicates how many events are in the given sport.
	EventCount *int32 `json:"eventCount,omitempty" xml:"eventCount"`
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Sport) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Sport) GetIdOk() (int32, bool) {
	if o == nil || o.Id == nil {
		var ret int32
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Sport) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Sport) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Sport) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Sport) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Sport) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Sport) SetName(v string) {
	o.Name = &v
}

// GetHasOfferings returns the HasOfferings field value if set, zero value otherwise.
func (o *Sport) GetHasOfferings() bool {
	if o == nil || o.HasOfferings == nil {
		var ret bool
		return ret
	}
	return *o.HasOfferings
}

// GetHasOfferingsOk returns a tuple with the HasOfferings field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Sport) GetHasOfferingsOk() (bool, bool) {
	if o == nil || o.HasOfferings == nil {
		var ret bool
		return ret, false
	}
	return *o.HasOfferings, true
}

// HasHasOfferings returns a boolean if a field has been set.
func (o *Sport) HasHasOfferings() bool {
	if o != nil && o.HasOfferings != nil {
		return true
	}

	return false
}

// SetHasOfferings gets a reference to the given bool and assigns it to the HasOfferings field.
func (o *Sport) SetHasOfferings(v bool) {
	o.HasOfferings = &v
}

// GetLeagueSpecialsCount returns the LeagueSpecialsCount field value if set, zero value otherwise.
func (o *Sport) GetLeagueSpecialsCount() int32 {
	if o == nil || o.LeagueSpecialsCount == nil {
		var ret int32
		return ret
	}
	return *o.LeagueSpecialsCount
}

// GetLeagueSpecialsCountOk returns a tuple with the LeagueSpecialsCount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Sport) GetLeagueSpecialsCountOk() (int32, bool) {
	if o == nil || o.LeagueSpecialsCount == nil {
		var ret int32
		return ret, false
	}
	return *o.LeagueSpecialsCount, true
}

// HasLeagueSpecialsCount returns a boolean if a field has been set.
func (o *Sport) HasLeagueSpecialsCount() bool {
	if o != nil && o.LeagueSpecialsCount != nil {
		return true
	}

	return false
}

// SetLeagueSpecialsCount gets a reference to the given int32 and assigns it to the LeagueSpecialsCount field.
func (o *Sport) SetLeagueSpecialsCount(v int32) {
	o.LeagueSpecialsCount = &v
}

// GetEventSpecialsCount returns the EventSpecialsCount field value if set, zero value otherwise.
func (o *Sport) GetEventSpecialsCount() int32 {
	if o == nil || o.EventSpecialsCount == nil {
		var ret int32
		return ret
	}
	return *o.EventSpecialsCount
}

// GetEventSpecialsCountOk returns a tuple with the EventSpecialsCount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Sport) GetEventSpecialsCountOk() (int32, bool) {
	if o == nil || o.EventSpecialsCount == nil {
		var ret int32
		return ret, false
	}
	return *o.EventSpecialsCount, true
}

// HasEventSpecialsCount returns a boolean if a field has been set.
func (o *Sport) HasEventSpecialsCount() bool {
	if o != nil && o.EventSpecialsCount != nil {
		return true
	}

	return false
}

// SetEventSpecialsCount gets a reference to the given int32 and assigns it to the EventSpecialsCount field.
func (o *Sport) SetEventSpecialsCount(v int32) {
	o.EventSpecialsCount = &v
}

// GetEventCount returns the EventCount field value if set, zero value otherwise.
func (o *Sport) GetEventCount() int32 {
	if o == nil || o.EventCount == nil {
		var ret int32
		return ret
	}
	return *o.EventCount
}

// GetEventCountOk returns a tuple with the EventCount field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *Sport) GetEventCountOk() (int32, bool) {
	if o == nil || o.EventCount == nil {
		var ret int32
		return ret, false
	}
	return *o.EventCount, true
}

// HasEventCount returns a boolean if a field has been set.
func (o *Sport) HasEventCount() bool {
	if o != nil && o.EventCount != nil {
		return true
	}

	return false
}

// SetEventCount gets a reference to the given int32 and assigns it to the EventCount field.
func (o *Sport) SetEventCount(v int32) {
	o.EventCount = &v
}

type NullableSport struct {
	Value        Sport
	ExplicitNull bool
}

func (v NullableSport) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableSport) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
