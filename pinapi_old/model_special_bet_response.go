/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pinapi_old

import (
	"bytes"
	"encoding/json"
)

// SpecialBetResponse struct for SpecialBetResponse
type SpecialBetResponse struct {
	// Status of the request.
	Status *string `json:"status,omitempty" xml:"status"`
	// When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.  ALL_BETTING_CLOSED = Betting is not allowed at this moment. This may happen during system maintenance.    ABOVE_MAX_BET_AMOUNT = Stake is above allowed maximum amount,    BELOW_MIN_BET_AMOUNT = Stake is below allowed minimum amount,    BLOCKED_BETTING = Betting is suspended for the client,    BLOCKED_CLIENT = Client is no longer active,    CONTEST_NOT_FOUND = Incorrect contest id provided or contest is no longer available,    DUPLICATE_UNIQUE_REQUEST_ID = UniqueRequestId must be unique for each bet,    INCOMPLETE_CUSTOMER_BETTING_PROFILE = Customer profile could not be loaded,     INSUFFICIENT_FUNDS = Bet is submitted by a client with insufficient funds,    INVALID_COUNTRY = Client country is not allowed for betting,    INVALID_REQUEST = Special bet request is not valid,    LINE_CHANGED = Bet is submitted on a line that has changed,    PAST_CUTOFFTIME = Bet is submitted on a game after the betting cutoff time,    RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Self-imposed loss limit exceeded,    RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Self-imposed risk limit exceeded,   SYSTEM_ERROR_1 = Unexpected error,    SYSTEM_ERROR_2 = Unexpected error,    UNIQUE_REQUEST_ID_REQUIRED = UniqueRequestId is missing,    INVALID_CUSTOMER_PROFILE
	ErrorCode *NullableString `json:"errorCode,omitempty" xml:"errorCode"`
	// Id of a newly created bet.
	BetId *int64 `json:"betId,omitempty" xml:"betId"`
	// Unique identifier provided in the request.
	UniqueRequestId *string `json:"uniqueRequestId,omitempty" xml:"uniqueRequestId"`
	// Whether or not the bet was accepted on the line that changed in favour of client. This can be true only if acceptBetterLine in the Place Bet request is set to TRUE.
	BetterLineWasAccepted *bool       `json:"betterLineWasAccepted,omitempty" xml:"betterLineWasAccepted"`
	SpecialBet            *SpecialBet `json:"specialBet,omitempty" xml:"specialBet"`
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SpecialBetResponse) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBetResponse) GetStatusOk() (string, bool) {
	if o == nil || o.Status == nil {
		var ret string
		return ret, false
	}
	return *o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SpecialBetResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SpecialBetResponse) SetStatus(v string) {
	o.Status = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *SpecialBetResponse) GetErrorCode() NullableString {
	if o == nil || o.ErrorCode == nil {
		var ret NullableString
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBetResponse) GetErrorCodeOk() (NullableString, bool) {
	if o == nil || o.ErrorCode == nil {
		var ret NullableString
		return ret, false
	}
	return *o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *SpecialBetResponse) HasErrorCode() bool {
	if o != nil && o.ErrorCode != nil {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given NullableString and assigns it to the ErrorCode field.
func (o *SpecialBetResponse) SetErrorCode(v NullableString) {
	o.ErrorCode = &v
}

// GetBetId returns the BetId field value if set, zero value otherwise.
func (o *SpecialBetResponse) GetBetId() int64 {
	if o == nil || o.BetId == nil {
		var ret int64
		return ret
	}
	return *o.BetId
}

// GetBetIdOk returns a tuple with the BetId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBetResponse) GetBetIdOk() (int64, bool) {
	if o == nil || o.BetId == nil {
		var ret int64
		return ret, false
	}
	return *o.BetId, true
}

// HasBetId returns a boolean if a field has been set.
func (o *SpecialBetResponse) HasBetId() bool {
	if o != nil && o.BetId != nil {
		return true
	}

	return false
}

// SetBetId gets a reference to the given int64 and assigns it to the BetId field.
func (o *SpecialBetResponse) SetBetId(v int64) {
	o.BetId = &v
}

// GetUniqueRequestId returns the UniqueRequestId field value if set, zero value otherwise.
func (o *SpecialBetResponse) GetUniqueRequestId() string {
	if o == nil || o.UniqueRequestId == nil {
		var ret string
		return ret
	}
	return *o.UniqueRequestId
}

// GetUniqueRequestIdOk returns a tuple with the UniqueRequestId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBetResponse) GetUniqueRequestIdOk() (string, bool) {
	if o == nil || o.UniqueRequestId == nil {
		var ret string
		return ret, false
	}
	return *o.UniqueRequestId, true
}

// HasUniqueRequestId returns a boolean if a field has been set.
func (o *SpecialBetResponse) HasUniqueRequestId() bool {
	if o != nil && o.UniqueRequestId != nil {
		return true
	}

	return false
}

// SetUniqueRequestId gets a reference to the given string and assigns it to the UniqueRequestId field.
func (o *SpecialBetResponse) SetUniqueRequestId(v string) {
	o.UniqueRequestId = &v
}

// GetBetterLineWasAccepted returns the BetterLineWasAccepted field value if set, zero value otherwise.
func (o *SpecialBetResponse) GetBetterLineWasAccepted() bool {
	if o == nil || o.BetterLineWasAccepted == nil {
		var ret bool
		return ret
	}
	return *o.BetterLineWasAccepted
}

// GetBetterLineWasAcceptedOk returns a tuple with the BetterLineWasAccepted field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBetResponse) GetBetterLineWasAcceptedOk() (bool, bool) {
	if o == nil || o.BetterLineWasAccepted == nil {
		var ret bool
		return ret, false
	}
	return *o.BetterLineWasAccepted, true
}

// HasBetterLineWasAccepted returns a boolean if a field has been set.
func (o *SpecialBetResponse) HasBetterLineWasAccepted() bool {
	if o != nil && o.BetterLineWasAccepted != nil {
		return true
	}

	return false
}

// SetBetterLineWasAccepted gets a reference to the given bool and assigns it to the BetterLineWasAccepted field.
func (o *SpecialBetResponse) SetBetterLineWasAccepted(v bool) {
	o.BetterLineWasAccepted = &v
}

// GetSpecialBet returns the SpecialBet field value if set, zero value otherwise.
func (o *SpecialBetResponse) GetSpecialBet() SpecialBet {
	if o == nil || o.SpecialBet == nil {
		var ret SpecialBet
		return ret
	}
	return *o.SpecialBet
}

// GetSpecialBetOk returns a tuple with the SpecialBet field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBetResponse) GetSpecialBetOk() (SpecialBet, bool) {
	if o == nil || o.SpecialBet == nil {
		var ret SpecialBet
		return ret, false
	}
	return *o.SpecialBet, true
}

// HasSpecialBet returns a boolean if a field has been set.
func (o *SpecialBetResponse) HasSpecialBet() bool {
	if o != nil && o.SpecialBet != nil {
		return true
	}

	return false
}

// SetSpecialBet gets a reference to the given SpecialBet and assigns it to the SpecialBet field.
func (o *SpecialBetResponse) SetSpecialBet(v SpecialBet) {
	o.SpecialBet = &v
}

type NullableSpecialBetResponse struct {
	Value        SpecialBetResponse
	ExplicitNull bool
}

func (v NullableSpecialBetResponse) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableSpecialBetResponse) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
