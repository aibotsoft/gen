/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package pinapi

import (
	"encoding/json"
)

// PlaceBetResponseV2 struct for PlaceBetResponseV2
type PlaceBetResponseV2 struct {
	// Status of the response.
	Status *string `json:"status,omitempty"`
	// If Status is PROCESSED_WITH_ERROR, errorCode will be in the response.   ALL_BETTING_CLOSED = Betting is not allowed at this moment. This may happen during system maintenance,   ALL_LIVE_BETTING_CLOSED = Live betting is not allowed at this moment. This may happen during system maintenance,   ABOVE_EVENT_MAX = Bet cannot be placed because client exceeded allowed maximum of risk on a line,   ABOVE_MAX_BET_AMOUNT = Stake is above allowed maximum amount,    BELOW_MIN_BET_AMOUNT = Stake is below allowed minimum amount,   BLOCKED_BETTING = Betting is suspended for the client,   BLOCKED_CLIENT = Client is no longer active,    INSUFFICIENT_FUNDS = Bet is submitted by a client with insufficient funds,   INVALID_COUNTRY = Client country is not allowed for betting,   INVALID_EVENT = Invalid eventid,   INVALID_ODDS_FORMAT = If a bet was submitted with the odds format that is not allowed for the client,   LINE_CHANGED = Bet is submitted on a line that has changed,   LISTED_PITCHERS_SELECTION_ERROR = If bet was submitted with pitcher1MustStart and/or pitcher2MustStart parameters in Place Bet request with values that are not allowed,   OFFLINE_EVENT = Bet is submitted on an event that is offline or the submitted line is not offered at the moment due to points/handicap change or the submitted bet type is just not offered at the moment,   PAST_CUTOFFTIME = Bet is submitted on a game after the betting cutoff time,   RED_CARDS_CHANGED = Bet is submitted on a live soccer event with changed red card count,   SCORE_CHANGED = Bet is submitted on a live soccer event with changed score,   TIME_RESTRICTION = Bet is submitted within too short of a period from the same bet previously placed by a client,   DUPLICATE_UNIQUE_REQUEST_ID = Request with the same uniqueRequestId was already processed. Please set the new value if you still want the request to be processed,   INCOMPLETE_CUSTOMER_BETTING_PROFILE = System configuration issue,   INVALID_CUSTOMER_PROFILE = System configuration issue,   LIMITS_CONFIGURATION_ISSUE = System configuration issue,   RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Client has reached his total loss limit,   RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Client has reached his total risk limit,   SYSTEM_ERROR_3 = Unexpected error,   LICENCE_RESTRICTION_LIVE_BETTING_BLOCKED - Live betting blocked due to licence restrictions 
	ErrorCode NullableString `json:"errorCode,omitempty"`
	// Echo of the uniqueRequestId from the request.
	UniqueRequestId *string `json:"uniqueRequestId,omitempty"`
	StraightBet *StraightBet `json:"straightBet,omitempty"`
}

// NewPlaceBetResponseV2 instantiates a new PlaceBetResponseV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlaceBetResponseV2() *PlaceBetResponseV2 {
	this := PlaceBetResponseV2{}
	return &this
}

// NewPlaceBetResponseV2WithDefaults instantiates a new PlaceBetResponseV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlaceBetResponseV2WithDefaults() *PlaceBetResponseV2 {
	this := PlaceBetResponseV2{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PlaceBetResponseV2) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetResponseV2) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PlaceBetResponseV2) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PlaceBetResponseV2) SetStatus(v string) {
	o.Status = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlaceBetResponseV2) GetErrorCode() string {
	if o == nil || o.ErrorCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorCode.Get()
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlaceBetResponseV2) GetErrorCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ErrorCode.Get(), o.ErrorCode.IsSet()
}

// HasErrorCode returns a boolean if a field has been set.
func (o *PlaceBetResponseV2) HasErrorCode() bool {
	if o != nil && o.ErrorCode.IsSet() {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given NullableString and assigns it to the ErrorCode field.
func (o *PlaceBetResponseV2) SetErrorCode(v string) {
	o.ErrorCode.Set(&v)
}
// SetErrorCodeNil sets the value for ErrorCode to be an explicit nil
func (o *PlaceBetResponseV2) SetErrorCodeNil() {
	o.ErrorCode.Set(nil)
}

// UnsetErrorCode ensures that no value is present for ErrorCode, not even an explicit nil
func (o *PlaceBetResponseV2) UnsetErrorCode() {
	o.ErrorCode.Unset()
}

// GetUniqueRequestId returns the UniqueRequestId field value if set, zero value otherwise.
func (o *PlaceBetResponseV2) GetUniqueRequestId() string {
	if o == nil || o.UniqueRequestId == nil {
		var ret string
		return ret
	}
	return *o.UniqueRequestId
}

// GetUniqueRequestIdOk returns a tuple with the UniqueRequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetResponseV2) GetUniqueRequestIdOk() (*string, bool) {
	if o == nil || o.UniqueRequestId == nil {
		return nil, false
	}
	return o.UniqueRequestId, true
}

// HasUniqueRequestId returns a boolean if a field has been set.
func (o *PlaceBetResponseV2) HasUniqueRequestId() bool {
	if o != nil && o.UniqueRequestId != nil {
		return true
	}

	return false
}

// SetUniqueRequestId gets a reference to the given string and assigns it to the UniqueRequestId field.
func (o *PlaceBetResponseV2) SetUniqueRequestId(v string) {
	o.UniqueRequestId = &v
}

// GetStraightBet returns the StraightBet field value if set, zero value otherwise.
func (o *PlaceBetResponseV2) GetStraightBet() StraightBet {
	if o == nil || o.StraightBet == nil {
		var ret StraightBet
		return ret
	}
	return *o.StraightBet
}

// GetStraightBetOk returns a tuple with the StraightBet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlaceBetResponseV2) GetStraightBetOk() (*StraightBet, bool) {
	if o == nil || o.StraightBet == nil {
		return nil, false
	}
	return o.StraightBet, true
}

// HasStraightBet returns a boolean if a field has been set.
func (o *PlaceBetResponseV2) HasStraightBet() bool {
	if o != nil && o.StraightBet != nil {
		return true
	}

	return false
}

// SetStraightBet gets a reference to the given StraightBet and assigns it to the StraightBet field.
func (o *PlaceBetResponseV2) SetStraightBet(v StraightBet) {
	o.StraightBet = &v
}

func (o PlaceBetResponseV2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.ErrorCode.IsSet() {
		toSerialize["errorCode"] = o.ErrorCode.Get()
	}
	if o.UniqueRequestId != nil {
		toSerialize["uniqueRequestId"] = o.UniqueRequestId
	}
	if o.StraightBet != nil {
		toSerialize["straightBet"] = o.StraightBet
	}
	return json.Marshal(toSerialize)
}

type NullablePlaceBetResponseV2 struct {
	value *PlaceBetResponseV2
	isSet bool
}

func (v NullablePlaceBetResponseV2) Get() *PlaceBetResponseV2 {
	return v.value
}

func (v *NullablePlaceBetResponseV2) Set(val *PlaceBetResponseV2) {
	v.value = val
	v.isSet = true
}

func (v NullablePlaceBetResponseV2) IsSet() bool {
	return v.isSet
}

func (v *NullablePlaceBetResponseV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlaceBetResponseV2(val *PlaceBetResponseV2) *NullablePlaceBetResponseV2 {
	return &NullablePlaceBetResponseV2{value: val, isSet: true}
}

func (v NullablePlaceBetResponseV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlaceBetResponseV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
