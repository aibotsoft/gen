/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
)

// CancellationReasonType struct for CancellationReasonType
type CancellationReasonType struct {
	// Cancellation Reason Code
	Code *string `json:"code,omitempty"`
	Details *CancellationReasonDetailsType `json:"details,omitempty"`
}

// NewCancellationReasonType instantiates a new CancellationReasonType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancellationReasonType() *CancellationReasonType {
	this := CancellationReasonType{}
	return &this
}

// NewCancellationReasonTypeWithDefaults instantiates a new CancellationReasonType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancellationReasonTypeWithDefaults() *CancellationReasonType {
	this := CancellationReasonType{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *CancellationReasonType) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationReasonType) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *CancellationReasonType) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *CancellationReasonType) SetCode(v string) {
	o.Code = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *CancellationReasonType) GetDetails() CancellationReasonDetailsType {
	if o == nil || o.Details == nil {
		var ret CancellationReasonDetailsType
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CancellationReasonType) GetDetailsOk() (*CancellationReasonDetailsType, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *CancellationReasonType) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given CancellationReasonDetailsType and assigns it to the Details field.
func (o *CancellationReasonType) SetDetails(v CancellationReasonDetailsType) {
	o.Details = &v
}

func (o CancellationReasonType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	return json.Marshal(toSerialize)
}

type NullableCancellationReasonType struct {
	value *CancellationReasonType
	isSet bool
}

func (v NullableCancellationReasonType) Get() *CancellationReasonType {
	return v.value
}

func (v *NullableCancellationReasonType) Set(val *CancellationReasonType) {
	v.value = val
	v.isSet = true
}

func (v NullableCancellationReasonType) IsSet() bool {
	return v.isSet
}

func (v *NullableCancellationReasonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancellationReasonType(val *CancellationReasonType) *NullableCancellationReasonType {
	return &NullableCancellationReasonType{value: val, isSet: true}
}

func (v NullableCancellationReasonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancellationReasonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
