/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package pinapi

import (
	"encoding/json"
)

// SpecialOddsContestantLine struct for SpecialOddsContestantLine
type SpecialOddsContestantLine struct {
	// ContestantLine Id.
	Id *int64 `json:"id,omitempty"`
	// Line identifier required for placing a bet.
	LineId *int64 `json:"lineId,omitempty"`
	// Price of the line.
	Price *float64 `json:"price,omitempty"`
	// A number indicating the spread, over/under etc.
	Handicap *float64 `json:"handicap,omitempty"`
}

// NewSpecialOddsContestantLine instantiates a new SpecialOddsContestantLine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecialOddsContestantLine() *SpecialOddsContestantLine {
	this := SpecialOddsContestantLine{}
	return &this
}

// NewSpecialOddsContestantLineWithDefaults instantiates a new SpecialOddsContestantLine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecialOddsContestantLineWithDefaults() *SpecialOddsContestantLine {
	this := SpecialOddsContestantLine{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SpecialOddsContestantLine) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialOddsContestantLine) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SpecialOddsContestantLine) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *SpecialOddsContestantLine) SetId(v int64) {
	o.Id = &v
}

// GetLineId returns the LineId field value if set, zero value otherwise.
func (o *SpecialOddsContestantLine) GetLineId() int64 {
	if o == nil || o.LineId == nil {
		var ret int64
		return ret
	}
	return *o.LineId
}

// GetLineIdOk returns a tuple with the LineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialOddsContestantLine) GetLineIdOk() (*int64, bool) {
	if o == nil || o.LineId == nil {
		return nil, false
	}
	return o.LineId, true
}

// HasLineId returns a boolean if a field has been set.
func (o *SpecialOddsContestantLine) HasLineId() bool {
	if o != nil && o.LineId != nil {
		return true
	}

	return false
}

// SetLineId gets a reference to the given int64 and assigns it to the LineId field.
func (o *SpecialOddsContestantLine) SetLineId(v int64) {
	o.LineId = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *SpecialOddsContestantLine) GetPrice() float64 {
	if o == nil || o.Price == nil {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialOddsContestantLine) GetPriceOk() (*float64, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *SpecialOddsContestantLine) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *SpecialOddsContestantLine) SetPrice(v float64) {
	o.Price = &v
}

// GetHandicap returns the Handicap field value if set, zero value otherwise.
func (o *SpecialOddsContestantLine) GetHandicap() float64 {
	if o == nil || o.Handicap == nil {
		var ret float64
		return ret
	}
	return *o.Handicap
}

// GetHandicapOk returns a tuple with the Handicap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialOddsContestantLine) GetHandicapOk() (*float64, bool) {
	if o == nil || o.Handicap == nil {
		return nil, false
	}
	return o.Handicap, true
}

// HasHandicap returns a boolean if a field has been set.
func (o *SpecialOddsContestantLine) HasHandicap() bool {
	if o != nil && o.Handicap != nil {
		return true
	}

	return false
}

// SetHandicap gets a reference to the given float64 and assigns it to the Handicap field.
func (o *SpecialOddsContestantLine) SetHandicap(v float64) {
	o.Handicap = &v
}

func (o SpecialOddsContestantLine) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LineId != nil {
		toSerialize["lineId"] = o.LineId
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.Handicap != nil {
		toSerialize["handicap"] = o.Handicap
	}
	return json.Marshal(toSerialize)
}

type NullableSpecialOddsContestantLine struct {
	value *SpecialOddsContestantLine
	isSet bool
}

func (v NullableSpecialOddsContestantLine) Get() *SpecialOddsContestantLine {
	return v.value
}

func (v *NullableSpecialOddsContestantLine) Set(val *SpecialOddsContestantLine) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecialOddsContestantLine) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecialOddsContestantLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecialOddsContestantLine(val *SpecialOddsContestantLine) *NullableSpecialOddsContestantLine {
	return &NullableSpecialOddsContestantLine{value: val, isSet: true}
}

func (v NullableSpecialOddsContestantLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecialOddsContestantLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
