/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"time"
)

// ParlayBet struct for ParlayBet
type ParlayBet struct {
	// Bet identification
	BetId int64 `json:"betId"`
	// Unique Request Id
	UniqueRequestId *string `json:"uniqueRequestId,omitempty"`
	// Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.
	WagerNumber int `json:"wagerNumber"`
	// Date time when the bet was placed.
	PlacedAt time.Time `json:"placedAt"`
	// Bet Status.   ACCEPTED = Bet was accepted,   CANCELLED = Bet is cancelled as per Pinnacle betting rules,   LOSE = The bet is settled as lose,   PENDING_ACCEPTANCE = This status is reserved only for live bets. If a live bet is placed during danger zone or live delay is applied, it will be in PENDING_ACCEPTANCE , otherwise in ACCEPTED status. From this status bet can go to ACCEPTED or REJECTED status,   REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status,   NOT_ACCEPTED = Bet was not accepted. Bet can be in this status only if it was previously in PENDING_ACCEPTANCE status,   WON = The bet is settled as won 
	BetStatus string `json:"betStatus"`
	BetType string `json:"betType"`
	// Win amount.
	Win float64 `json:"win"`
	// Risk amount.
	Risk float64 `json:"risk"`
	// Win-Loss for settled bets.
	WinLoss NullableFloat64 `json:"winLoss,omitempty"`
	OddsFormat OddsFormat `json:"oddsFormat"`
	// Clientâ€™s commission on the bet.
	CustomerCommission NullableFloat64 `json:"customerCommission,omitempty"`
	CancellationReason *CancellationReason `json:"cancellationReason,omitempty"`
	// Update Sequence
	UpdateSequence int64 `json:"updateSequence"`
	Legs []ParlayLeg `json:"legs"`
	Price *float64 `json:"price,omitempty"`
	// Only for settled parlay. Final price may differ in case leg was cancelled or half won
	FinalPrice *float64 `json:"finalPrice,omitempty"`
}

// NewParlayBet instantiates a new ParlayBet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParlayBet(betId int64, wagerNumber int, placedAt time.Time, betStatus string, betType string, win float64, risk float64, oddsFormat OddsFormat, updateSequence int64, legs []ParlayLeg, ) *ParlayBet {
	this := ParlayBet{}
	this.BetId = betId
	this.WagerNumber = wagerNumber
	this.PlacedAt = placedAt
	this.BetStatus = betStatus
	this.BetType = betType
	this.Win = win
	this.Risk = risk
	this.OddsFormat = oddsFormat
	this.UpdateSequence = updateSequence
	this.Legs = legs
	return &this
}

// NewParlayBetWithDefaults instantiates a new ParlayBet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParlayBetWithDefaults() *ParlayBet {
	this := ParlayBet{}
	var betType string = "PARLAY"
	this.BetType = betType
	return &this
}

// GetBetId returns the BetId field value
func (o *ParlayBet) GetBetId() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.BetId
}

// GetBetIdOk returns a tuple with the BetId field value
// and a boolean to check if the value has been set.
func (o *ParlayBet) GetBetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BetId, true
}

// SetBetId sets field value
func (o *ParlayBet) SetBetId(v int64) {
	o.BetId = v
}

// GetUniqueRequestId returns the UniqueRequestId field value if set, zero value otherwise.
func (o *ParlayBet) GetUniqueRequestId() string {
	if o == nil || o.UniqueRequestId == nil {
		var ret string
		return ret
	}
	return *o.UniqueRequestId
}

// GetUniqueRequestIdOk returns a tuple with the UniqueRequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayBet) GetUniqueRequestIdOk() (*string, bool) {
	if o == nil || o.UniqueRequestId == nil {
		return nil, false
	}
	return o.UniqueRequestId, true
}

// HasUniqueRequestId returns a boolean if a field has been set.
func (o *ParlayBet) HasUniqueRequestId() bool {
	if o != nil && o.UniqueRequestId != nil {
		return true
	}

	return false
}

// SetUniqueRequestId gets a reference to the given string and assigns it to the UniqueRequestId field.
func (o *ParlayBet) SetUniqueRequestId(v string) {
	o.UniqueRequestId = &v
}

// GetWagerNumber returns the WagerNumber field value
func (o *ParlayBet) GetWagerNumber() int {
	if o == nil  {
		var ret int
		return ret
	}

	return o.WagerNumber
}

// GetWagerNumberOk returns a tuple with the WagerNumber field value
// and a boolean to check if the value has been set.
func (o *ParlayBet) GetWagerNumberOk() (*int, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WagerNumber, true
}

// SetWagerNumber sets field value
func (o *ParlayBet) SetWagerNumber(v int) {
	o.WagerNumber = v
}

// GetPlacedAt returns the PlacedAt field value
func (o *ParlayBet) GetPlacedAt() time.Time {
	if o == nil  {
		var ret time.Time
		return ret
	}

	return o.PlacedAt
}

// GetPlacedAtOk returns a tuple with the PlacedAt field value
// and a boolean to check if the value has been set.
func (o *ParlayBet) GetPlacedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PlacedAt, true
}

// SetPlacedAt sets field value
func (o *ParlayBet) SetPlacedAt(v time.Time) {
	o.PlacedAt = v
}

// GetBetStatus returns the BetStatus field value
func (o *ParlayBet) GetBetStatus() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.BetStatus
}

// GetBetStatusOk returns a tuple with the BetStatus field value
// and a boolean to check if the value has been set.
func (o *ParlayBet) GetBetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BetStatus, true
}

// SetBetStatus sets field value
func (o *ParlayBet) SetBetStatus(v string) {
	o.BetStatus = v
}

// GetBetType returns the BetType field value
func (o *ParlayBet) GetBetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.BetType
}

// GetBetTypeOk returns a tuple with the BetType field value
// and a boolean to check if the value has been set.
func (o *ParlayBet) GetBetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BetType, true
}

// SetBetType sets field value
func (o *ParlayBet) SetBetType(v string) {
	o.BetType = v
}

// GetWin returns the Win field value
func (o *ParlayBet) GetWin() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.Win
}

// GetWinOk returns a tuple with the Win field value
// and a boolean to check if the value has been set.
func (o *ParlayBet) GetWinOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Win, true
}

// SetWin sets field value
func (o *ParlayBet) SetWin(v float64) {
	o.Win = v
}

// GetRisk returns the Risk field value
func (o *ParlayBet) GetRisk() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.Risk
}

// GetRiskOk returns a tuple with the Risk field value
// and a boolean to check if the value has been set.
func (o *ParlayBet) GetRiskOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Risk, true
}

// SetRisk sets field value
func (o *ParlayBet) SetRisk(v float64) {
	o.Risk = v
}

// GetWinLoss returns the WinLoss field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParlayBet) GetWinLoss() float64 {
	if o == nil || o.WinLoss.Get() == nil {
		var ret float64
		return ret
	}
	return *o.WinLoss.Get()
}

// GetWinLossOk returns a tuple with the WinLoss field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParlayBet) GetWinLossOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WinLoss.Get(), o.WinLoss.IsSet()
}

// HasWinLoss returns a boolean if a field has been set.
func (o *ParlayBet) HasWinLoss() bool {
	if o != nil && o.WinLoss.IsSet() {
		return true
	}

	return false
}

// SetWinLoss gets a reference to the given NullableFloat64 and assigns it to the WinLoss field.
func (o *ParlayBet) SetWinLoss(v float64) {
	o.WinLoss.Set(&v)
}
// SetWinLossNil sets the value for WinLoss to be an explicit nil
func (o *ParlayBet) SetWinLossNil() {
	o.WinLoss.Set(nil)
}

// UnsetWinLoss ensures that no value is present for WinLoss, not even an explicit nil
func (o *ParlayBet) UnsetWinLoss() {
	o.WinLoss.Unset()
}

// GetOddsFormat returns the OddsFormat field value
func (o *ParlayBet) GetOddsFormat() OddsFormat {
	if o == nil  {
		var ret OddsFormat
		return ret
	}

	return o.OddsFormat
}

// GetOddsFormatOk returns a tuple with the OddsFormat field value
// and a boolean to check if the value has been set.
func (o *ParlayBet) GetOddsFormatOk() (*OddsFormat, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OddsFormat, true
}

// SetOddsFormat sets field value
func (o *ParlayBet) SetOddsFormat(v OddsFormat) {
	o.OddsFormat = v
}

// GetCustomerCommission returns the CustomerCommission field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParlayBet) GetCustomerCommission() float64 {
	if o == nil || o.CustomerCommission.Get() == nil {
		var ret float64
		return ret
	}
	return *o.CustomerCommission.Get()
}

// GetCustomerCommissionOk returns a tuple with the CustomerCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParlayBet) GetCustomerCommissionOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CustomerCommission.Get(), o.CustomerCommission.IsSet()
}

// HasCustomerCommission returns a boolean if a field has been set.
func (o *ParlayBet) HasCustomerCommission() bool {
	if o != nil && o.CustomerCommission.IsSet() {
		return true
	}

	return false
}

// SetCustomerCommission gets a reference to the given NullableFloat64 and assigns it to the CustomerCommission field.
func (o *ParlayBet) SetCustomerCommission(v float64) {
	o.CustomerCommission.Set(&v)
}
// SetCustomerCommissionNil sets the value for CustomerCommission to be an explicit nil
func (o *ParlayBet) SetCustomerCommissionNil() {
	o.CustomerCommission.Set(nil)
}

// UnsetCustomerCommission ensures that no value is present for CustomerCommission, not even an explicit nil
func (o *ParlayBet) UnsetCustomerCommission() {
	o.CustomerCommission.Unset()
}

// GetCancellationReason returns the CancellationReason field value if set, zero value otherwise.
func (o *ParlayBet) GetCancellationReason() CancellationReason {
	if o == nil || o.CancellationReason == nil {
		var ret CancellationReason
		return ret
	}
	return *o.CancellationReason
}

// GetCancellationReasonOk returns a tuple with the CancellationReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayBet) GetCancellationReasonOk() (*CancellationReason, bool) {
	if o == nil || o.CancellationReason == nil {
		return nil, false
	}
	return o.CancellationReason, true
}

// HasCancellationReason returns a boolean if a field has been set.
func (o *ParlayBet) HasCancellationReason() bool {
	if o != nil && o.CancellationReason != nil {
		return true
	}

	return false
}

// SetCancellationReason gets a reference to the given CancellationReason and assigns it to the CancellationReason field.
func (o *ParlayBet) SetCancellationReason(v CancellationReason) {
	o.CancellationReason = &v
}

// GetUpdateSequence returns the UpdateSequence field value
func (o *ParlayBet) GetUpdateSequence() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.UpdateSequence
}

// GetUpdateSequenceOk returns a tuple with the UpdateSequence field value
// and a boolean to check if the value has been set.
func (o *ParlayBet) GetUpdateSequenceOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UpdateSequence, true
}

// SetUpdateSequence sets field value
func (o *ParlayBet) SetUpdateSequence(v int64) {
	o.UpdateSequence = v
}

// GetLegs returns the Legs field value
func (o *ParlayBet) GetLegs() []ParlayLeg {
	if o == nil  {
		var ret []ParlayLeg
		return ret
	}

	return o.Legs
}

// GetLegsOk returns a tuple with the Legs field value
// and a boolean to check if the value has been set.
func (o *ParlayBet) GetLegsOk() (*[]ParlayLeg, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Legs, true
}

// SetLegs sets field value
func (o *ParlayBet) SetLegs(v []ParlayLeg) {
	o.Legs = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ParlayBet) GetPrice() float64 {
	if o == nil || o.Price == nil {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayBet) GetPriceOk() (*float64, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ParlayBet) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *ParlayBet) SetPrice(v float64) {
	o.Price = &v
}

// GetFinalPrice returns the FinalPrice field value if set, zero value otherwise.
func (o *ParlayBet) GetFinalPrice() float64 {
	if o == nil || o.FinalPrice == nil {
		var ret float64
		return ret
	}
	return *o.FinalPrice
}

// GetFinalPriceOk returns a tuple with the FinalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayBet) GetFinalPriceOk() (*float64, bool) {
	if o == nil || o.FinalPrice == nil {
		return nil, false
	}
	return o.FinalPrice, true
}

// HasFinalPrice returns a boolean if a field has been set.
func (o *ParlayBet) HasFinalPrice() bool {
	if o != nil && o.FinalPrice != nil {
		return true
	}

	return false
}

// SetFinalPrice gets a reference to the given float64 and assigns it to the FinalPrice field.
func (o *ParlayBet) SetFinalPrice(v float64) {
	o.FinalPrice = &v
}

func (o ParlayBet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["betId"] = o.BetId
	}
	if o.UniqueRequestId != nil {
		toSerialize["uniqueRequestId"] = o.UniqueRequestId
	}
	if true {
		toSerialize["wagerNumber"] = o.WagerNumber
	}
	if true {
		toSerialize["placedAt"] = o.PlacedAt
	}
	if true {
		toSerialize["betStatus"] = o.BetStatus
	}
	if true {
		toSerialize["betType"] = o.BetType
	}
	if true {
		toSerialize["win"] = o.Win
	}
	if true {
		toSerialize["risk"] = o.Risk
	}
	if o.WinLoss.IsSet() {
		toSerialize["winLoss"] = o.WinLoss.Get()
	}
	if true {
		toSerialize["oddsFormat"] = o.OddsFormat
	}
	if o.CustomerCommission.IsSet() {
		toSerialize["customerCommission"] = o.CustomerCommission.Get()
	}
	if o.CancellationReason != nil {
		toSerialize["cancellationReason"] = o.CancellationReason
	}
	if true {
		toSerialize["updateSequence"] = o.UpdateSequence
	}
	if true {
		toSerialize["legs"] = o.Legs
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.FinalPrice != nil {
		toSerialize["finalPrice"] = o.FinalPrice
	}
	return json.Marshal(toSerialize)
}

type NullableParlayBet struct {
	value *ParlayBet
	isSet bool
}

func (v NullableParlayBet) Get() *ParlayBet {
	return v.value
}

func (v *NullableParlayBet) Set(val *ParlayBet) {
	v.value = val
	v.isSet = true
}

func (v NullableParlayBet) IsSet() bool {
	return v.isSet
}

func (v *NullableParlayBet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParlayBet(val *ParlayBet) *NullableParlayBet {
	return &NullableParlayBet{value: val, isSet: true}
}

func (v NullableParlayBet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParlayBet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
