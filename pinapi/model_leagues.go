/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
)

// Leagues struct for Leagues
type Leagues struct {
	// Leagues container
	Leagues *[]League `json:"leagues,omitempty"`
}

// NewLeagues instantiates a new Leagues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeagues() *Leagues {
	this := Leagues{}
	return &this
}

// NewLeaguesWithDefaults instantiates a new Leagues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeaguesWithDefaults() *Leagues {
	this := Leagues{}
	return &this
}

// GetLeagues returns the Leagues field value if set, zero value otherwise.
func (o *Leagues) GetLeagues() []League {
	if o == nil || o.Leagues == nil {
		var ret []League
		return ret
	}
	return *o.Leagues
}

// GetLeaguesOk returns a tuple with the Leagues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leagues) GetLeaguesOk() (*[]League, bool) {
	if o == nil || o.Leagues == nil {
		return nil, false
	}
	return o.Leagues, true
}

// HasLeagues returns a boolean if a field has been set.
func (o *Leagues) HasLeagues() bool {
	if o != nil && o.Leagues != nil {
		return true
	}

	return false
}

// SetLeagues gets a reference to the given []League and assigns it to the Leagues field.
func (o *Leagues) SetLeagues(v []League) {
	o.Leagues = &v
}

func (o Leagues) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Leagues != nil {
		toSerialize["leagues"] = o.Leagues
	}
	return json.Marshal(toSerialize)
}

type NullableLeagues struct {
	value *Leagues
	isSet bool
}

func (v NullableLeagues) Get() *Leagues {
	return v.value
}

func (v *NullableLeagues) Set(val *Leagues) {
	v.value = val
	v.isSet = true
}

func (v NullableLeagues) IsSet() bool {
	return v.isSet
}

func (v *NullableLeagues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeagues(val *Leagues) *NullableLeagues {
	return &NullableLeagues{value: val, isSet: true}
}

func (v NullableLeagues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeagues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
