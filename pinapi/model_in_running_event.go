/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
)

// InRunningEvent struct for InRunningEvent
type InRunningEvent struct {
	// Game Id
	Id *int64 `json:"id,omitempty"`
	// State of the game.  1 = First half in progress,  2 = Half time in progress,  3 = Second half in progress,  4 = End of regular time, 5 = First half extra time in progress,  6 = Extra time half time in progress,  7 = Second half extra time in progress,  8 = End of extra time,  9 = End of Game,  10 = Game is temporary suspended,  11 = Penalties in progress 
	State *int `json:"state,omitempty"`
	// Elapsed minutes
	Elapsed *int `json:"elapsed,omitempty"`
}

// NewInRunningEvent instantiates a new InRunningEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInRunningEvent() *InRunningEvent {
	this := InRunningEvent{}
	return &this
}

// NewInRunningEventWithDefaults instantiates a new InRunningEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInRunningEventWithDefaults() *InRunningEvent {
	this := InRunningEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InRunningEvent) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InRunningEvent) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InRunningEvent) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *InRunningEvent) SetId(v int64) {
	o.Id = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *InRunningEvent) GetState() int {
	if o == nil || o.State == nil {
		var ret int
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InRunningEvent) GetStateOk() (*int, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *InRunningEvent) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given int and assigns it to the State field.
func (o *InRunningEvent) SetState(v int) {
	o.State = &v
}

// GetElapsed returns the Elapsed field value if set, zero value otherwise.
func (o *InRunningEvent) GetElapsed() int {
	if o == nil || o.Elapsed == nil {
		var ret int
		return ret
	}
	return *o.Elapsed
}

// GetElapsedOk returns a tuple with the Elapsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InRunningEvent) GetElapsedOk() (*int, bool) {
	if o == nil || o.Elapsed == nil {
		return nil, false
	}
	return o.Elapsed, true
}

// HasElapsed returns a boolean if a field has been set.
func (o *InRunningEvent) HasElapsed() bool {
	if o != nil && o.Elapsed != nil {
		return true
	}

	return false
}

// SetElapsed gets a reference to the given int and assigns it to the Elapsed field.
func (o *InRunningEvent) SetElapsed(v int) {
	o.Elapsed = &v
}

func (o InRunningEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Elapsed != nil {
		toSerialize["elapsed"] = o.Elapsed
	}
	return json.Marshal(toSerialize)
}

type NullableInRunningEvent struct {
	value *InRunningEvent
	isSet bool
}

func (v NullableInRunningEvent) Get() *InRunningEvent {
	return v.value
}

func (v *NullableInRunningEvent) Set(val *InRunningEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableInRunningEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableInRunningEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInRunningEvent(val *InRunningEvent) *NullableInRunningEvent {
	return &NullableInRunningEvent{value: val, isSet: true}
}

func (v NullableInRunningEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInRunningEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
