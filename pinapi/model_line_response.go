/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pinapi

import (
	"bytes"
	"encoding/json"
)

// LineResponse struct for LineResponse
type LineResponse struct {
	// If the value is NOT_EXISTS, than this will be the only parameter in the response. All other params would be empty. [SUCCESS = OK, NOT_EXISTS = Line not offered anymore]
	Status *string `json:"status,omitempty" xml:"status"`
	// Latest price.
	Price *float64 `json:"price,omitempty" xml:"price"`
	// Line identification needed to place a bet.
	LineId *int64 `json:"lineId,omitempty" xml:"lineId"`
	// This would be needed to place the bet if the handicap is on alternate line, otherwise it will not be populated in the response.
	AltLineId *int64 `json:"altLineId,omitempty" xml:"altLineId"`
	// Away team score. Applicable to soccer only.
	Team1Score *int32 `json:"team1Score,omitempty" xml:"team1Score"`
	// Home team score. Applicable to soccer only.
	Team2Score *int32 `json:"team2Score,omitempty" xml:"team2Score"`
	// Team 1 red cards. Applicable to soccer only.
	Team1RedCards *int32 `json:"team1RedCards,omitempty" xml:"team1RedCards"`
	// Team 2 red cards. Applicable to soccer only.
	Team2RedCards *int32 `json:"team2RedCards,omitempty" xml:"team2RedCards"`
	// Maximum bettable risk amount.
	MaxRiskStake *float64 `json:"maxRiskStake,omitempty" xml:"maxRiskStake"`
	// Minimum bettable risk amount.
	MinRiskStake *float64 `json:"minRiskStake,omitempty" xml:"minRiskStake"`
	// Maximum bettable win amount.
	MaxWinStake *float64 `json:"maxWinStake,omitempty" xml:"maxWinStake"`
	// Minimum bettable win amount.
	MinWinStake *float64 `json:"minWinStake,omitempty" xml:"minWinStake"`
	// Line is effective as of this date and time in UTC.
	EffectiveAsOf *string `json:"effectiveAsOf,omitempty" xml:"effectiveAsOf"`
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *LineResponse) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LineResponse) GetStatusOk() (string, bool) {
	if o == nil || o.Status == nil {
		var ret string
		return ret, false
	}
	return *o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *LineResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *LineResponse) SetStatus(v string) {
	o.Status = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *LineResponse) GetPrice() float64 {
	if o == nil || o.Price == nil {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LineResponse) GetPriceOk() (float64, bool) {
	if o == nil || o.Price == nil {
		var ret float64
		return ret, false
	}
	return *o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *LineResponse) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *LineResponse) SetPrice(v float64) {
	o.Price = &v
}

// GetLineId returns the LineId field value if set, zero value otherwise.
func (o *LineResponse) GetLineId() int64 {
	if o == nil || o.LineId == nil {
		var ret int64
		return ret
	}
	return *o.LineId
}

// GetLineIdOk returns a tuple with the LineId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LineResponse) GetLineIdOk() (int64, bool) {
	if o == nil || o.LineId == nil {
		var ret int64
		return ret, false
	}
	return *o.LineId, true
}

// HasLineId returns a boolean if a field has been set.
func (o *LineResponse) HasLineId() bool {
	if o != nil && o.LineId != nil {
		return true
	}

	return false
}

// SetLineId gets a reference to the given int64 and assigns it to the LineId field.
func (o *LineResponse) SetLineId(v int64) {
	o.LineId = &v
}

// GetAltLineId returns the AltLineId field value if set, zero value otherwise.
func (o *LineResponse) GetAltLineId() int64 {
	if o == nil || o.AltLineId == nil {
		var ret int64
		return ret
	}
	return *o.AltLineId
}

// GetAltLineIdOk returns a tuple with the AltLineId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LineResponse) GetAltLineIdOk() (int64, bool) {
	if o == nil || o.AltLineId == nil {
		var ret int64
		return ret, false
	}
	return *o.AltLineId, true
}

// HasAltLineId returns a boolean if a field has been set.
func (o *LineResponse) HasAltLineId() bool {
	if o != nil && o.AltLineId != nil {
		return true
	}

	return false
}

// SetAltLineId gets a reference to the given int64 and assigns it to the AltLineId field.
func (o *LineResponse) SetAltLineId(v int64) {
	o.AltLineId = &v
}

// GetTeam1Score returns the Team1Score field value if set, zero value otherwise.
func (o *LineResponse) GetTeam1Score() int32 {
	if o == nil || o.Team1Score == nil {
		var ret int32
		return ret
	}
	return *o.Team1Score
}

// GetTeam1ScoreOk returns a tuple with the Team1Score field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LineResponse) GetTeam1ScoreOk() (int32, bool) {
	if o == nil || o.Team1Score == nil {
		var ret int32
		return ret, false
	}
	return *o.Team1Score, true
}

// HasTeam1Score returns a boolean if a field has been set.
func (o *LineResponse) HasTeam1Score() bool {
	if o != nil && o.Team1Score != nil {
		return true
	}

	return false
}

// SetTeam1Score gets a reference to the given int32 and assigns it to the Team1Score field.
func (o *LineResponse) SetTeam1Score(v int32) {
	o.Team1Score = &v
}

// GetTeam2Score returns the Team2Score field value if set, zero value otherwise.
func (o *LineResponse) GetTeam2Score() int32 {
	if o == nil || o.Team2Score == nil {
		var ret int32
		return ret
	}
	return *o.Team2Score
}

// GetTeam2ScoreOk returns a tuple with the Team2Score field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LineResponse) GetTeam2ScoreOk() (int32, bool) {
	if o == nil || o.Team2Score == nil {
		var ret int32
		return ret, false
	}
	return *o.Team2Score, true
}

// HasTeam2Score returns a boolean if a field has been set.
func (o *LineResponse) HasTeam2Score() bool {
	if o != nil && o.Team2Score != nil {
		return true
	}

	return false
}

// SetTeam2Score gets a reference to the given int32 and assigns it to the Team2Score field.
func (o *LineResponse) SetTeam2Score(v int32) {
	o.Team2Score = &v
}

// GetTeam1RedCards returns the Team1RedCards field value if set, zero value otherwise.
func (o *LineResponse) GetTeam1RedCards() int32 {
	if o == nil || o.Team1RedCards == nil {
		var ret int32
		return ret
	}
	return *o.Team1RedCards
}

// GetTeam1RedCardsOk returns a tuple with the Team1RedCards field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LineResponse) GetTeam1RedCardsOk() (int32, bool) {
	if o == nil || o.Team1RedCards == nil {
		var ret int32
		return ret, false
	}
	return *o.Team1RedCards, true
}

// HasTeam1RedCards returns a boolean if a field has been set.
func (o *LineResponse) HasTeam1RedCards() bool {
	if o != nil && o.Team1RedCards != nil {
		return true
	}

	return false
}

// SetTeam1RedCards gets a reference to the given int32 and assigns it to the Team1RedCards field.
func (o *LineResponse) SetTeam1RedCards(v int32) {
	o.Team1RedCards = &v
}

// GetTeam2RedCards returns the Team2RedCards field value if set, zero value otherwise.
func (o *LineResponse) GetTeam2RedCards() int32 {
	if o == nil || o.Team2RedCards == nil {
		var ret int32
		return ret
	}
	return *o.Team2RedCards
}

// GetTeam2RedCardsOk returns a tuple with the Team2RedCards field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LineResponse) GetTeam2RedCardsOk() (int32, bool) {
	if o == nil || o.Team2RedCards == nil {
		var ret int32
		return ret, false
	}
	return *o.Team2RedCards, true
}

// HasTeam2RedCards returns a boolean if a field has been set.
func (o *LineResponse) HasTeam2RedCards() bool {
	if o != nil && o.Team2RedCards != nil {
		return true
	}

	return false
}

// SetTeam2RedCards gets a reference to the given int32 and assigns it to the Team2RedCards field.
func (o *LineResponse) SetTeam2RedCards(v int32) {
	o.Team2RedCards = &v
}

// GetMaxRiskStake returns the MaxRiskStake field value if set, zero value otherwise.
func (o *LineResponse) GetMaxRiskStake() float64 {
	if o == nil || o.MaxRiskStake == nil {
		var ret float64
		return ret
	}
	return *o.MaxRiskStake
}

// GetMaxRiskStakeOk returns a tuple with the MaxRiskStake field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LineResponse) GetMaxRiskStakeOk() (float64, bool) {
	if o == nil || o.MaxRiskStake == nil {
		var ret float64
		return ret, false
	}
	return *o.MaxRiskStake, true
}

// HasMaxRiskStake returns a boolean if a field has been set.
func (o *LineResponse) HasMaxRiskStake() bool {
	if o != nil && o.MaxRiskStake != nil {
		return true
	}

	return false
}

// SetMaxRiskStake gets a reference to the given float64 and assigns it to the MaxRiskStake field.
func (o *LineResponse) SetMaxRiskStake(v float64) {
	o.MaxRiskStake = &v
}

// GetMinRiskStake returns the MinRiskStake field value if set, zero value otherwise.
func (o *LineResponse) GetMinRiskStake() float64 {
	if o == nil || o.MinRiskStake == nil {
		var ret float64
		return ret
	}
	return *o.MinRiskStake
}

// GetMinRiskStakeOk returns a tuple with the MinRiskStake field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LineResponse) GetMinRiskStakeOk() (float64, bool) {
	if o == nil || o.MinRiskStake == nil {
		var ret float64
		return ret, false
	}
	return *o.MinRiskStake, true
}

// HasMinRiskStake returns a boolean if a field has been set.
func (o *LineResponse) HasMinRiskStake() bool {
	if o != nil && o.MinRiskStake != nil {
		return true
	}

	return false
}

// SetMinRiskStake gets a reference to the given float64 and assigns it to the MinRiskStake field.
func (o *LineResponse) SetMinRiskStake(v float64) {
	o.MinRiskStake = &v
}

// GetMaxWinStake returns the MaxWinStake field value if set, zero value otherwise.
func (o *LineResponse) GetMaxWinStake() float64 {
	if o == nil || o.MaxWinStake == nil {
		var ret float64
		return ret
	}
	return *o.MaxWinStake
}

// GetMaxWinStakeOk returns a tuple with the MaxWinStake field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LineResponse) GetMaxWinStakeOk() (float64, bool) {
	if o == nil || o.MaxWinStake == nil {
		var ret float64
		return ret, false
	}
	return *o.MaxWinStake, true
}

// HasMaxWinStake returns a boolean if a field has been set.
func (o *LineResponse) HasMaxWinStake() bool {
	if o != nil && o.MaxWinStake != nil {
		return true
	}

	return false
}

// SetMaxWinStake gets a reference to the given float64 and assigns it to the MaxWinStake field.
func (o *LineResponse) SetMaxWinStake(v float64) {
	o.MaxWinStake = &v
}

// GetMinWinStake returns the MinWinStake field value if set, zero value otherwise.
func (o *LineResponse) GetMinWinStake() float64 {
	if o == nil || o.MinWinStake == nil {
		var ret float64
		return ret
	}
	return *o.MinWinStake
}

// GetMinWinStakeOk returns a tuple with the MinWinStake field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LineResponse) GetMinWinStakeOk() (float64, bool) {
	if o == nil || o.MinWinStake == nil {
		var ret float64
		return ret, false
	}
	return *o.MinWinStake, true
}

// HasMinWinStake returns a boolean if a field has been set.
func (o *LineResponse) HasMinWinStake() bool {
	if o != nil && o.MinWinStake != nil {
		return true
	}

	return false
}

// SetMinWinStake gets a reference to the given float64 and assigns it to the MinWinStake field.
func (o *LineResponse) SetMinWinStake(v float64) {
	o.MinWinStake = &v
}

// GetEffectiveAsOf returns the EffectiveAsOf field value if set, zero value otherwise.
func (o *LineResponse) GetEffectiveAsOf() string {
	if o == nil || o.EffectiveAsOf == nil {
		var ret string
		return ret
	}
	return *o.EffectiveAsOf
}

// GetEffectiveAsOfOk returns a tuple with the EffectiveAsOf field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *LineResponse) GetEffectiveAsOfOk() (string, bool) {
	if o == nil || o.EffectiveAsOf == nil {
		var ret string
		return ret, false
	}
	return *o.EffectiveAsOf, true
}

// HasEffectiveAsOf returns a boolean if a field has been set.
func (o *LineResponse) HasEffectiveAsOf() bool {
	if o != nil && o.EffectiveAsOf != nil {
		return true
	}

	return false
}

// SetEffectiveAsOf gets a reference to the given string and assigns it to the EffectiveAsOf field.
func (o *LineResponse) SetEffectiveAsOf(v string) {
	o.EffectiveAsOf = &v
}

type NullableLineResponse struct {
	Value        LineResponse
	ExplicitNull bool
}

func (v NullableLineResponse) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableLineResponse) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
