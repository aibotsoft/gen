/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"time"
)

// ManualBet struct for ManualBet
type ManualBet struct {
	// Bet identification
	BetId int64 `json:"betId"`
	// Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.
	WagerNumber int `json:"wagerNumber"`
	// Date time when the bet was placed.
	PlacedAt time.Time `json:"placedAt"`
	// Bet Status.   ACCEPTED = Bet was accepted,   CANCELLED = Bet is cancelled as per Pinnacle betting rules,   LOSE = The bet is settled as lose,   REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status,   WON = The bet is settled as won  
	BetStatus string `json:"betStatus"`
	BetType string `json:"betType"`
	// Win amount.
	Win float64 `json:"win"`
	// Risk amount.
	Risk float64 `json:"risk"`
	// Win-Loss for settled bets.
	WinLoss *float64 `json:"winLoss,omitempty"`
	// Update Sequence
	UpdateSequence int64 `json:"updateSequence"`
	// Manual bet description.
	Description string `json:"description"`
	// Referenced original bet id.
	ReferenceBetId NullableInt64 `json:"referenceBetId,omitempty"`
}

// NewManualBet instantiates a new ManualBet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManualBet(betId int64, wagerNumber int, placedAt time.Time, betStatus string, betType string, win float64, risk float64, updateSequence int64, description string, ) *ManualBet {
	this := ManualBet{}
	this.BetId = betId
	this.WagerNumber = wagerNumber
	this.PlacedAt = placedAt
	this.BetStatus = betStatus
	this.BetType = betType
	this.Win = win
	this.Risk = risk
	this.UpdateSequence = updateSequence
	this.Description = description
	return &this
}

// NewManualBetWithDefaults instantiates a new ManualBet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManualBetWithDefaults() *ManualBet {
	this := ManualBet{}
	var betType string = "MANUAL"
	this.BetType = betType
	return &this
}

// GetBetId returns the BetId field value
func (o *ManualBet) GetBetId() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.BetId
}

// GetBetIdOk returns a tuple with the BetId field value
// and a boolean to check if the value has been set.
func (o *ManualBet) GetBetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BetId, true
}

// SetBetId sets field value
func (o *ManualBet) SetBetId(v int64) {
	o.BetId = v
}

// GetWagerNumber returns the WagerNumber field value
func (o *ManualBet) GetWagerNumber() int {
	if o == nil  {
		var ret int
		return ret
	}

	return o.WagerNumber
}

// GetWagerNumberOk returns a tuple with the WagerNumber field value
// and a boolean to check if the value has been set.
func (o *ManualBet) GetWagerNumberOk() (*int, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WagerNumber, true
}

// SetWagerNumber sets field value
func (o *ManualBet) SetWagerNumber(v int) {
	o.WagerNumber = v
}

// GetPlacedAt returns the PlacedAt field value
func (o *ManualBet) GetPlacedAt() time.Time {
	if o == nil  {
		var ret time.Time
		return ret
	}

	return o.PlacedAt
}

// GetPlacedAtOk returns a tuple with the PlacedAt field value
// and a boolean to check if the value has been set.
func (o *ManualBet) GetPlacedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PlacedAt, true
}

// SetPlacedAt sets field value
func (o *ManualBet) SetPlacedAt(v time.Time) {
	o.PlacedAt = v
}

// GetBetStatus returns the BetStatus field value
func (o *ManualBet) GetBetStatus() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.BetStatus
}

// GetBetStatusOk returns a tuple with the BetStatus field value
// and a boolean to check if the value has been set.
func (o *ManualBet) GetBetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BetStatus, true
}

// SetBetStatus sets field value
func (o *ManualBet) SetBetStatus(v string) {
	o.BetStatus = v
}

// GetBetType returns the BetType field value
func (o *ManualBet) GetBetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.BetType
}

// GetBetTypeOk returns a tuple with the BetType field value
// and a boolean to check if the value has been set.
func (o *ManualBet) GetBetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BetType, true
}

// SetBetType sets field value
func (o *ManualBet) SetBetType(v string) {
	o.BetType = v
}

// GetWin returns the Win field value
func (o *ManualBet) GetWin() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.Win
}

// GetWinOk returns a tuple with the Win field value
// and a boolean to check if the value has been set.
func (o *ManualBet) GetWinOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Win, true
}

// SetWin sets field value
func (o *ManualBet) SetWin(v float64) {
	o.Win = v
}

// GetRisk returns the Risk field value
func (o *ManualBet) GetRisk() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.Risk
}

// GetRiskOk returns a tuple with the Risk field value
// and a boolean to check if the value has been set.
func (o *ManualBet) GetRiskOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Risk, true
}

// SetRisk sets field value
func (o *ManualBet) SetRisk(v float64) {
	o.Risk = v
}

// GetWinLoss returns the WinLoss field value if set, zero value otherwise.
func (o *ManualBet) GetWinLoss() float64 {
	if o == nil || o.WinLoss == nil {
		var ret float64
		return ret
	}
	return *o.WinLoss
}

// GetWinLossOk returns a tuple with the WinLoss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualBet) GetWinLossOk() (*float64, bool) {
	if o == nil || o.WinLoss == nil {
		return nil, false
	}
	return o.WinLoss, true
}

// HasWinLoss returns a boolean if a field has been set.
func (o *ManualBet) HasWinLoss() bool {
	if o != nil && o.WinLoss != nil {
		return true
	}

	return false
}

// SetWinLoss gets a reference to the given float64 and assigns it to the WinLoss field.
func (o *ManualBet) SetWinLoss(v float64) {
	o.WinLoss = &v
}

// GetUpdateSequence returns the UpdateSequence field value
func (o *ManualBet) GetUpdateSequence() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.UpdateSequence
}

// GetUpdateSequenceOk returns a tuple with the UpdateSequence field value
// and a boolean to check if the value has been set.
func (o *ManualBet) GetUpdateSequenceOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UpdateSequence, true
}

// SetUpdateSequence sets field value
func (o *ManualBet) SetUpdateSequence(v int64) {
	o.UpdateSequence = v
}

// GetDescription returns the Description field value
func (o *ManualBet) GetDescription() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ManualBet) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ManualBet) SetDescription(v string) {
	o.Description = v
}

// GetReferenceBetId returns the ReferenceBetId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualBet) GetReferenceBetId() int64 {
	if o == nil || o.ReferenceBetId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ReferenceBetId.Get()
}

// GetReferenceBetIdOk returns a tuple with the ReferenceBetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualBet) GetReferenceBetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReferenceBetId.Get(), o.ReferenceBetId.IsSet()
}

// HasReferenceBetId returns a boolean if a field has been set.
func (o *ManualBet) HasReferenceBetId() bool {
	if o != nil && o.ReferenceBetId.IsSet() {
		return true
	}

	return false
}

// SetReferenceBetId gets a reference to the given NullableInt64 and assigns it to the ReferenceBetId field.
func (o *ManualBet) SetReferenceBetId(v int64) {
	o.ReferenceBetId.Set(&v)
}
// SetReferenceBetIdNil sets the value for ReferenceBetId to be an explicit nil
func (o *ManualBet) SetReferenceBetIdNil() {
	o.ReferenceBetId.Set(nil)
}

// UnsetReferenceBetId ensures that no value is present for ReferenceBetId, not even an explicit nil
func (o *ManualBet) UnsetReferenceBetId() {
	o.ReferenceBetId.Unset()
}

func (o ManualBet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["betId"] = o.BetId
	}
	if true {
		toSerialize["wagerNumber"] = o.WagerNumber
	}
	if true {
		toSerialize["placedAt"] = o.PlacedAt
	}
	if true {
		toSerialize["betStatus"] = o.BetStatus
	}
	if true {
		toSerialize["betType"] = o.BetType
	}
	if true {
		toSerialize["win"] = o.Win
	}
	if true {
		toSerialize["risk"] = o.Risk
	}
	if o.WinLoss != nil {
		toSerialize["winLoss"] = o.WinLoss
	}
	if true {
		toSerialize["updateSequence"] = o.UpdateSequence
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if o.ReferenceBetId.IsSet() {
		toSerialize["referenceBetId"] = o.ReferenceBetId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableManualBet struct {
	value *ManualBet
	isSet bool
}

func (v NullableManualBet) Get() *ManualBet {
	return v.value
}

func (v *NullableManualBet) Set(val *ManualBet) {
	v.value = val
	v.isSet = true
}

func (v NullableManualBet) IsSet() bool {
	return v.isSet
}

func (v *NullableManualBet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManualBet(val *ManualBet) *NullableManualBet {
	return &NullableManualBet{value: val, isSet: true}
}

func (v NullableManualBet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManualBet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
