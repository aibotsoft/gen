/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package pinapi

import (
	"encoding/json"
)

// TranslationByCulture struct for TranslationByCulture
type TranslationByCulture struct {
	// Culture based on which the text is translated.
	Id *string `json:"id,omitempty"`
	// Translation text.
	Text *string `json:"text,omitempty"`
}

// NewTranslationByCulture instantiates a new TranslationByCulture object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslationByCulture() *TranslationByCulture {
	this := TranslationByCulture{}
	return &this
}

// NewTranslationByCultureWithDefaults instantiates a new TranslationByCulture object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslationByCultureWithDefaults() *TranslationByCulture {
	this := TranslationByCulture{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TranslationByCulture) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslationByCulture) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TranslationByCulture) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TranslationByCulture) SetId(v string) {
	o.Id = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *TranslationByCulture) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslationByCulture) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *TranslationByCulture) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *TranslationByCulture) SetText(v string) {
	o.Text = &v
}

func (o TranslationByCulture) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableTranslationByCulture struct {
	value *TranslationByCulture
	isSet bool
}

func (v NullableTranslationByCulture) Get() *TranslationByCulture {
	return v.value
}

func (v *NullableTranslationByCulture) Set(val *TranslationByCulture) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslationByCulture) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslationByCulture) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslationByCulture(val *TranslationByCulture) *NullableTranslationByCulture {
	return &NullableTranslationByCulture{value: val, isSet: true}
}

func (v NullableTranslationByCulture) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslationByCulture) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
