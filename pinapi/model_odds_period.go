/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pinapi

import (
	"bytes"
	"encoding/json"
	"time"
)

// OddsPeriod struct for OddsPeriod
type OddsPeriod struct {
	// Line Id.
	LineId *int64 `json:"lineId,omitempty" xml:"lineId"`
	// This represents the period of the match. For example, for soccer we have  0 (Game), 1 (1st Half) & 2 (2nd Half)
	Number *int32 `json:"number,omitempty" xml:"number"`
	// Periodâ€™s wagering cut-off date in UTC.
	Cutoff *time.Time `json:"cutoff,omitempty" xml:"cutoff"`
	// 1 - online, period is open for betting  2 - offline, period is not open for betting
	Status *int32 `json:"status,omitempty" xml:"status"`
	// Maximum spread bet volume. See [How to calculate max risk from the max volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)
	MaxSpread *float64 `json:"maxSpread,omitempty" xml:"maxSpread"`
	// Maximum moneyline bet volume. See [How to calculate max risk from the max volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)
	MaxMoneyline *float64 `json:"maxMoneyline,omitempty" xml:"maxMoneyline"`
	// Maximum total points bet volume. See [How to calculate max risk from the max volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)
	MaxTotal *float64 `json:"maxTotal,omitempty" xml:"maxTotal"`
	// Maximum team total points bet volume. See [How to calculate max risk from the max volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)
	MaxTeamTotal *float64 `json:"maxTeamTotal,omitempty" xml:"maxTeamTotal"`
	// Container for spread odds.
	Spreads   *[]OddsSpread  `json:"spreads,omitempty" xml:"spreads"`
	Moneyline *OddsMoneyline `json:"moneyline,omitempty" xml:"moneyline"`
	// Container for team total points.
	Totals    *[]OddsTotal    `json:"totals,omitempty" xml:"totals"`
	TeamTotal *OddsTeamTotals `json:"teamTotal,omitempty" xml:"teamTotal"`
}

// GetLineId returns the LineId field value if set, zero value otherwise.
func (o *OddsPeriod) GetLineId() int64 {
	if o == nil || o.LineId == nil {
		var ret int64
		return ret
	}
	return *o.LineId
}

// GetLineIdOk returns a tuple with the LineId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsPeriod) GetLineIdOk() (int64, bool) {
	if o == nil || o.LineId == nil {
		var ret int64
		return ret, false
	}
	return *o.LineId, true
}

// HasLineId returns a boolean if a field has been set.
func (o *OddsPeriod) HasLineId() bool {
	if o != nil && o.LineId != nil {
		return true
	}

	return false
}

// SetLineId gets a reference to the given int64 and assigns it to the LineId field.
func (o *OddsPeriod) SetLineId(v int64) {
	o.LineId = &v
}

// GetNumber returns the Number field value if set, zero value otherwise.
func (o *OddsPeriod) GetNumber() int32 {
	if o == nil || o.Number == nil {
		var ret int32
		return ret
	}
	return *o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsPeriod) GetNumberOk() (int32, bool) {
	if o == nil || o.Number == nil {
		var ret int32
		return ret, false
	}
	return *o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *OddsPeriod) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given int32 and assigns it to the Number field.
func (o *OddsPeriod) SetNumber(v int32) {
	o.Number = &v
}

// GetCutoff returns the Cutoff field value if set, zero value otherwise.
func (o *OddsPeriod) GetCutoff() time.Time {
	if o == nil || o.Cutoff == nil {
		var ret time.Time
		return ret
	}
	return *o.Cutoff
}

// GetCutoffOk returns a tuple with the Cutoff field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsPeriod) GetCutoffOk() (time.Time, bool) {
	if o == nil || o.Cutoff == nil {
		var ret time.Time
		return ret, false
	}
	return *o.Cutoff, true
}

// HasCutoff returns a boolean if a field has been set.
func (o *OddsPeriod) HasCutoff() bool {
	if o != nil && o.Cutoff != nil {
		return true
	}

	return false
}

// SetCutoff gets a reference to the given time.Time and assigns it to the Cutoff field.
func (o *OddsPeriod) SetCutoff(v time.Time) {
	o.Cutoff = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *OddsPeriod) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsPeriod) GetStatusOk() (int32, bool) {
	if o == nil || o.Status == nil {
		var ret int32
		return ret, false
	}
	return *o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *OddsPeriod) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *OddsPeriod) SetStatus(v int32) {
	o.Status = &v
}

// GetMaxSpread returns the MaxSpread field value if set, zero value otherwise.
func (o *OddsPeriod) GetMaxSpread() float64 {
	if o == nil || o.MaxSpread == nil {
		var ret float64
		return ret
	}
	return *o.MaxSpread
}

// GetMaxSpreadOk returns a tuple with the MaxSpread field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsPeriod) GetMaxSpreadOk() (float64, bool) {
	if o == nil || o.MaxSpread == nil {
		var ret float64
		return ret, false
	}
	return *o.MaxSpread, true
}

// HasMaxSpread returns a boolean if a field has been set.
func (o *OddsPeriod) HasMaxSpread() bool {
	if o != nil && o.MaxSpread != nil {
		return true
	}

	return false
}

// SetMaxSpread gets a reference to the given float64 and assigns it to the MaxSpread field.
func (o *OddsPeriod) SetMaxSpread(v float64) {
	o.MaxSpread = &v
}

// GetMaxMoneyline returns the MaxMoneyline field value if set, zero value otherwise.
func (o *OddsPeriod) GetMaxMoneyline() float64 {
	if o == nil || o.MaxMoneyline == nil {
		var ret float64
		return ret
	}
	return *o.MaxMoneyline
}

// GetMaxMoneylineOk returns a tuple with the MaxMoneyline field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsPeriod) GetMaxMoneylineOk() (float64, bool) {
	if o == nil || o.MaxMoneyline == nil {
		var ret float64
		return ret, false
	}
	return *o.MaxMoneyline, true
}

// HasMaxMoneyline returns a boolean if a field has been set.
func (o *OddsPeriod) HasMaxMoneyline() bool {
	if o != nil && o.MaxMoneyline != nil {
		return true
	}

	return false
}

// SetMaxMoneyline gets a reference to the given float64 and assigns it to the MaxMoneyline field.
func (o *OddsPeriod) SetMaxMoneyline(v float64) {
	o.MaxMoneyline = &v
}

// GetMaxTotal returns the MaxTotal field value if set, zero value otherwise.
func (o *OddsPeriod) GetMaxTotal() float64 {
	if o == nil || o.MaxTotal == nil {
		var ret float64
		return ret
	}
	return *o.MaxTotal
}

// GetMaxTotalOk returns a tuple with the MaxTotal field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsPeriod) GetMaxTotalOk() (float64, bool) {
	if o == nil || o.MaxTotal == nil {
		var ret float64
		return ret, false
	}
	return *o.MaxTotal, true
}

// HasMaxTotal returns a boolean if a field has been set.
func (o *OddsPeriod) HasMaxTotal() bool {
	if o != nil && o.MaxTotal != nil {
		return true
	}

	return false
}

// SetMaxTotal gets a reference to the given float64 and assigns it to the MaxTotal field.
func (o *OddsPeriod) SetMaxTotal(v float64) {
	o.MaxTotal = &v
}

// GetMaxTeamTotal returns the MaxTeamTotal field value if set, zero value otherwise.
func (o *OddsPeriod) GetMaxTeamTotal() float64 {
	if o == nil || o.MaxTeamTotal == nil {
		var ret float64
		return ret
	}
	return *o.MaxTeamTotal
}

// GetMaxTeamTotalOk returns a tuple with the MaxTeamTotal field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsPeriod) GetMaxTeamTotalOk() (float64, bool) {
	if o == nil || o.MaxTeamTotal == nil {
		var ret float64
		return ret, false
	}
	return *o.MaxTeamTotal, true
}

// HasMaxTeamTotal returns a boolean if a field has been set.
func (o *OddsPeriod) HasMaxTeamTotal() bool {
	if o != nil && o.MaxTeamTotal != nil {
		return true
	}

	return false
}

// SetMaxTeamTotal gets a reference to the given float64 and assigns it to the MaxTeamTotal field.
func (o *OddsPeriod) SetMaxTeamTotal(v float64) {
	o.MaxTeamTotal = &v
}

// GetSpreads returns the Spreads field value if set, zero value otherwise.
func (o *OddsPeriod) GetSpreads() []OddsSpread {
	if o == nil || o.Spreads == nil {
		var ret []OddsSpread
		return ret
	}
	return *o.Spreads
}

// GetSpreadsOk returns a tuple with the Spreads field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsPeriod) GetSpreadsOk() ([]OddsSpread, bool) {
	if o == nil || o.Spreads == nil {
		var ret []OddsSpread
		return ret, false
	}
	return *o.Spreads, true
}

// HasSpreads returns a boolean if a field has been set.
func (o *OddsPeriod) HasSpreads() bool {
	if o != nil && o.Spreads != nil {
		return true
	}

	return false
}

// SetSpreads gets a reference to the given []OddsSpread and assigns it to the Spreads field.
func (o *OddsPeriod) SetSpreads(v []OddsSpread) {
	o.Spreads = &v
}

// GetMoneyline returns the Moneyline field value if set, zero value otherwise.
func (o *OddsPeriod) GetMoneyline() OddsMoneyline {
	if o == nil || o.Moneyline == nil {
		var ret OddsMoneyline
		return ret
	}
	return *o.Moneyline
}

// GetMoneylineOk returns a tuple with the Moneyline field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsPeriod) GetMoneylineOk() (OddsMoneyline, bool) {
	if o == nil || o.Moneyline == nil {
		var ret OddsMoneyline
		return ret, false
	}
	return *o.Moneyline, true
}

// HasMoneyline returns a boolean if a field has been set.
func (o *OddsPeriod) HasMoneyline() bool {
	if o != nil && o.Moneyline != nil {
		return true
	}

	return false
}

// SetMoneyline gets a reference to the given OddsMoneyline and assigns it to the Moneyline field.
func (o *OddsPeriod) SetMoneyline(v OddsMoneyline) {
	o.Moneyline = &v
}

// GetTotals returns the Totals field value if set, zero value otherwise.
func (o *OddsPeriod) GetTotals() []OddsTotal {
	if o == nil || o.Totals == nil {
		var ret []OddsTotal
		return ret
	}
	return *o.Totals
}

// GetTotalsOk returns a tuple with the Totals field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsPeriod) GetTotalsOk() ([]OddsTotal, bool) {
	if o == nil || o.Totals == nil {
		var ret []OddsTotal
		return ret, false
	}
	return *o.Totals, true
}

// HasTotals returns a boolean if a field has been set.
func (o *OddsPeriod) HasTotals() bool {
	if o != nil && o.Totals != nil {
		return true
	}

	return false
}

// SetTotals gets a reference to the given []OddsTotal and assigns it to the Totals field.
func (o *OddsPeriod) SetTotals(v []OddsTotal) {
	o.Totals = &v
}

// GetTeamTotal returns the TeamTotal field value if set, zero value otherwise.
func (o *OddsPeriod) GetTeamTotal() OddsTeamTotals {
	if o == nil || o.TeamTotal == nil {
		var ret OddsTeamTotals
		return ret
	}
	return *o.TeamTotal
}

// GetTeamTotalOk returns a tuple with the TeamTotal field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsPeriod) GetTeamTotalOk() (OddsTeamTotals, bool) {
	if o == nil || o.TeamTotal == nil {
		var ret OddsTeamTotals
		return ret, false
	}
	return *o.TeamTotal, true
}

// HasTeamTotal returns a boolean if a field has been set.
func (o *OddsPeriod) HasTeamTotal() bool {
	if o != nil && o.TeamTotal != nil {
		return true
	}

	return false
}

// SetTeamTotal gets a reference to the given OddsTeamTotals and assigns it to the TeamTotal field.
func (o *OddsPeriod) SetTeamTotal(v OddsTeamTotals) {
	o.TeamTotal = &v
}

type NullableOddsPeriod struct {
	Value        OddsPeriod
	ExplicitNull bool
}

func (v NullableOddsPeriod) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableOddsPeriod) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
