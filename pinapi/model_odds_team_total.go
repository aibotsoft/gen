/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pinapi

import (
	"bytes"
	"encoding/json"
)

// OddsTeamTotal struct for OddsTeamTotal
type OddsTeamTotal struct {
	// Total points.
	Points *float64 `json:"points,omitempty" xml:"points"`
	// Over price.
	Over *float64 `json:"over,omitempty" xml:"over"`
	// Under price.
	Under *float64 `json:"under,omitempty" xml:"under"`
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *OddsTeamTotal) GetPoints() float64 {
	if o == nil || o.Points == nil {
		var ret float64
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsTeamTotal) GetPointsOk() (float64, bool) {
	if o == nil || o.Points == nil {
		var ret float64
		return ret, false
	}
	return *o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *OddsTeamTotal) HasPoints() bool {
	if o != nil && o.Points != nil {
		return true
	}

	return false
}

// SetPoints gets a reference to the given float64 and assigns it to the Points field.
func (o *OddsTeamTotal) SetPoints(v float64) {
	o.Points = &v
}

// GetOver returns the Over field value if set, zero value otherwise.
func (o *OddsTeamTotal) GetOver() float64 {
	if o == nil || o.Over == nil {
		var ret float64
		return ret
	}
	return *o.Over
}

// GetOverOk returns a tuple with the Over field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsTeamTotal) GetOverOk() (float64, bool) {
	if o == nil || o.Over == nil {
		var ret float64
		return ret, false
	}
	return *o.Over, true
}

// HasOver returns a boolean if a field has been set.
func (o *OddsTeamTotal) HasOver() bool {
	if o != nil && o.Over != nil {
		return true
	}

	return false
}

// SetOver gets a reference to the given float64 and assigns it to the Over field.
func (o *OddsTeamTotal) SetOver(v float64) {
	o.Over = &v
}

// GetUnder returns the Under field value if set, zero value otherwise.
func (o *OddsTeamTotal) GetUnder() float64 {
	if o == nil || o.Under == nil {
		var ret float64
		return ret
	}
	return *o.Under
}

// GetUnderOk returns a tuple with the Under field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsTeamTotal) GetUnderOk() (float64, bool) {
	if o == nil || o.Under == nil {
		var ret float64
		return ret, false
	}
	return *o.Under, true
}

// HasUnder returns a boolean if a field has been set.
func (o *OddsTeamTotal) HasUnder() bool {
	if o != nil && o.Under != nil {
		return true
	}

	return false
}

// SetUnder gets a reference to the given float64 and assigns it to the Under field.
func (o *OddsTeamTotal) SetUnder(v float64) {
	o.Under = &v
}

type NullableOddsTeamTotal struct {
	Value        OddsTeamTotal
	ExplicitNull bool
}

func (v NullableOddsTeamTotal) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableOddsTeamTotal) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
