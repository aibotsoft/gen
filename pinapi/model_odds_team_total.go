/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
)

// OddsTeamTotal struct for OddsTeamTotal
type OddsTeamTotal struct {
	// Total points.
	Points *float64 `json:"points,omitempty"`
	// Over price.
	Over *float64 `json:"over,omitempty"`
	// Under price.
	Under *float64 `json:"under,omitempty"`
}

// NewOddsTeamTotal instantiates a new OddsTeamTotal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOddsTeamTotal() *OddsTeamTotal {
	this := OddsTeamTotal{}
	return &this
}

// NewOddsTeamTotalWithDefaults instantiates a new OddsTeamTotal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOddsTeamTotalWithDefaults() *OddsTeamTotal {
	this := OddsTeamTotal{}
	return &this
}

// GetPoints returns the Points field value if set, zero value otherwise.
func (o *OddsTeamTotal) GetPoints() float64 {
	if o == nil || o.Points == nil {
		var ret float64
		return ret
	}
	return *o.Points
}

// GetPointsOk returns a tuple with the Points field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OddsTeamTotal) GetPointsOk() (*float64, bool) {
	if o == nil || o.Points == nil {
		return nil, false
	}
	return o.Points, true
}

// HasPoints returns a boolean if a field has been set.
func (o *OddsTeamTotal) HasPoints() bool {
	if o != nil && o.Points != nil {
		return true
	}

	return false
}

// SetPoints gets a reference to the given float64 and assigns it to the Points field.
func (o *OddsTeamTotal) SetPoints(v float64) {
	o.Points = &v
}

// GetOver returns the Over field value if set, zero value otherwise.
func (o *OddsTeamTotal) GetOver() float64 {
	if o == nil || o.Over == nil {
		var ret float64
		return ret
	}
	return *o.Over
}

// GetOverOk returns a tuple with the Over field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OddsTeamTotal) GetOverOk() (*float64, bool) {
	if o == nil || o.Over == nil {
		return nil, false
	}
	return o.Over, true
}

// HasOver returns a boolean if a field has been set.
func (o *OddsTeamTotal) HasOver() bool {
	if o != nil && o.Over != nil {
		return true
	}

	return false
}

// SetOver gets a reference to the given float64 and assigns it to the Over field.
func (o *OddsTeamTotal) SetOver(v float64) {
	o.Over = &v
}

// GetUnder returns the Under field value if set, zero value otherwise.
func (o *OddsTeamTotal) GetUnder() float64 {
	if o == nil || o.Under == nil {
		var ret float64
		return ret
	}
	return *o.Under
}

// GetUnderOk returns a tuple with the Under field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OddsTeamTotal) GetUnderOk() (*float64, bool) {
	if o == nil || o.Under == nil {
		return nil, false
	}
	return o.Under, true
}

// HasUnder returns a boolean if a field has been set.
func (o *OddsTeamTotal) HasUnder() bool {
	if o != nil && o.Under != nil {
		return true
	}

	return false
}

// SetUnder gets a reference to the given float64 and assigns it to the Under field.
func (o *OddsTeamTotal) SetUnder(v float64) {
	o.Under = &v
}

func (o OddsTeamTotal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Points != nil {
		toSerialize["points"] = o.Points
	}
	if o.Over != nil {
		toSerialize["over"] = o.Over
	}
	if o.Under != nil {
		toSerialize["under"] = o.Under
	}
	return json.Marshal(toSerialize)
}

type NullableOddsTeamTotal struct {
	value *OddsTeamTotal
	isSet bool
}

func (v NullableOddsTeamTotal) Get() *OddsTeamTotal {
	return v.value
}

func (v *NullableOddsTeamTotal) Set(val *OddsTeamTotal) {
	v.value = val
	v.isSet = true
}

func (v NullableOddsTeamTotal) IsSet() bool {
	return v.isSet
}

func (v *NullableOddsTeamTotal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOddsTeamTotal(val *OddsTeamTotal) *NullableOddsTeamTotal {
	return &NullableOddsTeamTotal{value: val, isSet: true}
}

func (v NullableOddsTeamTotal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOddsTeamTotal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
