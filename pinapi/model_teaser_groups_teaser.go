/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package pinapi

import (
	"encoding/json"
)

// TeaserGroupsTeaser struct for TeaserGroupsTeaser
type TeaserGroupsTeaser struct {
	// Unique identifier.
	Id *int64 `json:"id,omitempty"`
	// Description for the Teaser.
	Description *string `json:"description,omitempty"`
	// Unique Sport identifier. Sport details can be retrieved from a call to v2/sports endpoint.
	SportId *int `json:"sportId,omitempty"`
	// Minimum number of legs that must be selected.
	MinLegs *int `json:"minLegs,omitempty"`
	// Maximum number of legs that can be selected.
	MaxLegs *int `json:"maxLegs,omitempty"`
	// If 'true' then all legs must be from the same event, otherwise legs can be from different events.
	SameEventOnly *bool `json:"sameEventOnly,omitempty"`
	// A collection of Payout indicating all possible payout combinations.
	Payouts *[]TeaserGroupsPayout `json:"payouts,omitempty"`
	// A collection of Leagues available to the teaser.
	Leagues *[]TeaserGroupsLeague `json:"leagues,omitempty"`
}

// NewTeaserGroupsTeaser instantiates a new TeaserGroupsTeaser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeaserGroupsTeaser() *TeaserGroupsTeaser {
	this := TeaserGroupsTeaser{}
	return &this
}

// NewTeaserGroupsTeaserWithDefaults instantiates a new TeaserGroupsTeaser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeaserGroupsTeaserWithDefaults() *TeaserGroupsTeaser {
	this := TeaserGroupsTeaser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TeaserGroupsTeaser) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserGroupsTeaser) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TeaserGroupsTeaser) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *TeaserGroupsTeaser) SetId(v int64) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TeaserGroupsTeaser) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserGroupsTeaser) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TeaserGroupsTeaser) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TeaserGroupsTeaser) SetDescription(v string) {
	o.Description = &v
}

// GetSportId returns the SportId field value if set, zero value otherwise.
func (o *TeaserGroupsTeaser) GetSportId() int {
	if o == nil || o.SportId == nil {
		var ret int
		return ret
	}
	return *o.SportId
}

// GetSportIdOk returns a tuple with the SportId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserGroupsTeaser) GetSportIdOk() (*int, bool) {
	if o == nil || o.SportId == nil {
		return nil, false
	}
	return o.SportId, true
}

// HasSportId returns a boolean if a field has been set.
func (o *TeaserGroupsTeaser) HasSportId() bool {
	if o != nil && o.SportId != nil {
		return true
	}

	return false
}

// SetSportId gets a reference to the given int and assigns it to the SportId field.
func (o *TeaserGroupsTeaser) SetSportId(v int) {
	o.SportId = &v
}

// GetMinLegs returns the MinLegs field value if set, zero value otherwise.
func (o *TeaserGroupsTeaser) GetMinLegs() int {
	if o == nil || o.MinLegs == nil {
		var ret int
		return ret
	}
	return *o.MinLegs
}

// GetMinLegsOk returns a tuple with the MinLegs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserGroupsTeaser) GetMinLegsOk() (*int, bool) {
	if o == nil || o.MinLegs == nil {
		return nil, false
	}
	return o.MinLegs, true
}

// HasMinLegs returns a boolean if a field has been set.
func (o *TeaserGroupsTeaser) HasMinLegs() bool {
	if o != nil && o.MinLegs != nil {
		return true
	}

	return false
}

// SetMinLegs gets a reference to the given int and assigns it to the MinLegs field.
func (o *TeaserGroupsTeaser) SetMinLegs(v int) {
	o.MinLegs = &v
}

// GetMaxLegs returns the MaxLegs field value if set, zero value otherwise.
func (o *TeaserGroupsTeaser) GetMaxLegs() int {
	if o == nil || o.MaxLegs == nil {
		var ret int
		return ret
	}
	return *o.MaxLegs
}

// GetMaxLegsOk returns a tuple with the MaxLegs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserGroupsTeaser) GetMaxLegsOk() (*int, bool) {
	if o == nil || o.MaxLegs == nil {
		return nil, false
	}
	return o.MaxLegs, true
}

// HasMaxLegs returns a boolean if a field has been set.
func (o *TeaserGroupsTeaser) HasMaxLegs() bool {
	if o != nil && o.MaxLegs != nil {
		return true
	}

	return false
}

// SetMaxLegs gets a reference to the given int and assigns it to the MaxLegs field.
func (o *TeaserGroupsTeaser) SetMaxLegs(v int) {
	o.MaxLegs = &v
}

// GetSameEventOnly returns the SameEventOnly field value if set, zero value otherwise.
func (o *TeaserGroupsTeaser) GetSameEventOnly() bool {
	if o == nil || o.SameEventOnly == nil {
		var ret bool
		return ret
	}
	return *o.SameEventOnly
}

// GetSameEventOnlyOk returns a tuple with the SameEventOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserGroupsTeaser) GetSameEventOnlyOk() (*bool, bool) {
	if o == nil || o.SameEventOnly == nil {
		return nil, false
	}
	return o.SameEventOnly, true
}

// HasSameEventOnly returns a boolean if a field has been set.
func (o *TeaserGroupsTeaser) HasSameEventOnly() bool {
	if o != nil && o.SameEventOnly != nil {
		return true
	}

	return false
}

// SetSameEventOnly gets a reference to the given bool and assigns it to the SameEventOnly field.
func (o *TeaserGroupsTeaser) SetSameEventOnly(v bool) {
	o.SameEventOnly = &v
}

// GetPayouts returns the Payouts field value if set, zero value otherwise.
func (o *TeaserGroupsTeaser) GetPayouts() []TeaserGroupsPayout {
	if o == nil || o.Payouts == nil {
		var ret []TeaserGroupsPayout
		return ret
	}
	return *o.Payouts
}

// GetPayoutsOk returns a tuple with the Payouts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserGroupsTeaser) GetPayoutsOk() (*[]TeaserGroupsPayout, bool) {
	if o == nil || o.Payouts == nil {
		return nil, false
	}
	return o.Payouts, true
}

// HasPayouts returns a boolean if a field has been set.
func (o *TeaserGroupsTeaser) HasPayouts() bool {
	if o != nil && o.Payouts != nil {
		return true
	}

	return false
}

// SetPayouts gets a reference to the given []TeaserGroupsPayout and assigns it to the Payouts field.
func (o *TeaserGroupsTeaser) SetPayouts(v []TeaserGroupsPayout) {
	o.Payouts = &v
}

// GetLeagues returns the Leagues field value if set, zero value otherwise.
func (o *TeaserGroupsTeaser) GetLeagues() []TeaserGroupsLeague {
	if o == nil || o.Leagues == nil {
		var ret []TeaserGroupsLeague
		return ret
	}
	return *o.Leagues
}

// GetLeaguesOk returns a tuple with the Leagues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserGroupsTeaser) GetLeaguesOk() (*[]TeaserGroupsLeague, bool) {
	if o == nil || o.Leagues == nil {
		return nil, false
	}
	return o.Leagues, true
}

// HasLeagues returns a boolean if a field has been set.
func (o *TeaserGroupsTeaser) HasLeagues() bool {
	if o != nil && o.Leagues != nil {
		return true
	}

	return false
}

// SetLeagues gets a reference to the given []TeaserGroupsLeague and assigns it to the Leagues field.
func (o *TeaserGroupsTeaser) SetLeagues(v []TeaserGroupsLeague) {
	o.Leagues = &v
}

func (o TeaserGroupsTeaser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.SportId != nil {
		toSerialize["sportId"] = o.SportId
	}
	if o.MinLegs != nil {
		toSerialize["minLegs"] = o.MinLegs
	}
	if o.MaxLegs != nil {
		toSerialize["maxLegs"] = o.MaxLegs
	}
	if o.SameEventOnly != nil {
		toSerialize["sameEventOnly"] = o.SameEventOnly
	}
	if o.Payouts != nil {
		toSerialize["payouts"] = o.Payouts
	}
	if o.Leagues != nil {
		toSerialize["leagues"] = o.Leagues
	}
	return json.Marshal(toSerialize)
}

type NullableTeaserGroupsTeaser struct {
	value *TeaserGroupsTeaser
	isSet bool
}

func (v NullableTeaserGroupsTeaser) Get() *TeaserGroupsTeaser {
	return v.value
}

func (v *NullableTeaserGroupsTeaser) Set(val *TeaserGroupsTeaser) {
	v.value = val
	v.isSet = true
}

func (v NullableTeaserGroupsTeaser) IsSet() bool {
	return v.isSet
}

func (v *NullableTeaserGroupsTeaser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeaserGroupsTeaser(val *TeaserGroupsTeaser) *NullableTeaserGroupsTeaser {
	return &NullableTeaserGroupsTeaser{value: val, isSet: true}
}

func (v NullableTeaserGroupsTeaser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeaserGroupsTeaser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
