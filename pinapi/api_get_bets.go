/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// GetBetsApiService GetBetsApi service
type GetBetsApiService service

type apiBetsGetBetsByTypeV3Request struct {
	ctx _context.Context
	apiService *GetBetsApiService
	betlist *string
	betStatuses *[]string
	fromDate *string
	toDate *string
	sortDir *string
	pageSize *int
	fromRecord *int
	betids *[]int64
	uniqueRequestIds *[]string
}


func (r apiBetsGetBetsByTypeV3Request) Betlist(betlist string) apiBetsGetBetsByTypeV3Request {
	r.betlist = &betlist
	return r
}

func (r apiBetsGetBetsByTypeV3Request) BetStatuses(betStatuses []string) apiBetsGetBetsByTypeV3Request {
	r.betStatuses = &betStatuses
	return r
}

func (r apiBetsGetBetsByTypeV3Request) FromDate(fromDate string) apiBetsGetBetsByTypeV3Request {
	r.fromDate = &fromDate
	return r
}

func (r apiBetsGetBetsByTypeV3Request) ToDate(toDate string) apiBetsGetBetsByTypeV3Request {
	r.toDate = &toDate
	return r
}

func (r apiBetsGetBetsByTypeV3Request) SortDir(sortDir string) apiBetsGetBetsByTypeV3Request {
	r.sortDir = &sortDir
	return r
}

func (r apiBetsGetBetsByTypeV3Request) PageSize(pageSize int) apiBetsGetBetsByTypeV3Request {
	r.pageSize = &pageSize
	return r
}

func (r apiBetsGetBetsByTypeV3Request) FromRecord(fromRecord int) apiBetsGetBetsByTypeV3Request {
	r.fromRecord = &fromRecord
	return r
}

func (r apiBetsGetBetsByTypeV3Request) Betids(betids []int64) apiBetsGetBetsByTypeV3Request {
	r.betids = &betids
	return r
}

func (r apiBetsGetBetsByTypeV3Request) UniqueRequestIds(uniqueRequestIds []string) apiBetsGetBetsByTypeV3Request {
	r.uniqueRequestIds = &uniqueRequestIds
	return r
}

/*
BetsGetBetsByTypeV3 Get Bets - v3
Returns bets. 


### Get running bets by time range:
```
https://api.pinnacle.com/v3/bets?betlist=RUNNING&fromDate=2017-11-21T00:00:00Z&toDate=2017-11-29T00:00:00Z
```
Running bets are queried by *placedAt* date time


### Get settled bets by time range:
  
```
https://api.pinnacle.com/v3/bets?betlist=SETTLED&fromDate=2015-12-28T00:00:00Z&toDate=2015-12-29T00:00:00Z
```
Settled bets are queried by *settledAt* date time
https://api.pinnacle.com/v3/bets?betlist=SETTLED&fromDate=2017-11-20T00:00:00Z&toDate=2017-11-23T00:00:00Z


### Get settled cancelled bets by time range:
  
```
https://api.pinnacle.com/v3/bets?betList=SETTLED&fromDate=2018-03-01&toDate=2018-03-28&betStatuses=CANCELLED
```


### Get bets by bet ids:

```
https://api.pinnacle.com/v3/bets?betIds=775856112,775856113,775856114
```

### Get bets by uniqueRequestIds:

```
https://api.pinnacle.com/v3/bets?uniqueRequestIds=62335222-dae4-479a-8c05-46440ccdd3bb,42335222-dae4-479a-8c05-46440ccdd3bb
```

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return apiBetsGetBetsByTypeV3Request
*/
func (a *GetBetsApiService) BetsGetBetsByTypeV3(ctx _context.Context) apiBetsGetBetsByTypeV3Request {
	return apiBetsGetBetsByTypeV3Request{
		apiService: a,
		ctx: ctx,
	}
}

/*
Execute executes the request
 @return GetBetsByTypeResponseV3
*/
func (r apiBetsGetBetsByTypeV3Request) Execute() (GetBetsByTypeResponseV3, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetBetsByTypeResponseV3
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "GetBetsApiService.BetsGetBetsByTypeV3")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/bets"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
									
	if r.betlist != nil {
		localVarQueryParams.Add("betlist", parameterToString(*r.betlist, ""))
	}
	if r.betStatuses != nil {
		localVarQueryParams.Add("betStatuses", parameterToString(*r.betStatuses, "csv"))
	}
	if r.fromDate != nil {
		localVarQueryParams.Add("fromDate", parameterToString(*r.fromDate, ""))
	}
	if r.toDate != nil {
		localVarQueryParams.Add("toDate", parameterToString(*r.toDate, ""))
	}
	if r.sortDir != nil {
		localVarQueryParams.Add("sortDir", parameterToString(*r.sortDir, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("pageSize", parameterToString(*r.pageSize, ""))
	}
	if r.fromRecord != nil {
		localVarQueryParams.Add("fromRecord", parameterToString(*r.fromRecord, ""))
	}
	if r.betids != nil {
		localVarQueryParams.Add("betids", parameterToString(*r.betids, "csv"))
	}
	if r.uniqueRequestIds != nil {
		localVarQueryParams.Add("uniqueRequestIds", parameterToString(*r.uniqueRequestIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v GetBetsByTypeResponseV3
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponseWithErrorRef
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
