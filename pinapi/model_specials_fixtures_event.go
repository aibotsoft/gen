/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
)

// SpecialsFixturesEvent Optional event asscoaited with the special.
type SpecialsFixturesEvent struct {
	// Event Id
	Id *int `json:"id,omitempty"`
	// The period of the match. For example in soccer 0 (Game), 1 (1st Half) & 2 (2nd Half)
	PeriodNumber *int `json:"periodNumber,omitempty"`
	// Home team name.
	Home *string `json:"home,omitempty"`
	// Away team name.
	Away *string `json:"away,omitempty"`
}

// NewSpecialsFixturesEvent instantiates a new SpecialsFixturesEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecialsFixturesEvent() *SpecialsFixturesEvent {
	this := SpecialsFixturesEvent{}
	return &this
}

// NewSpecialsFixturesEventWithDefaults instantiates a new SpecialsFixturesEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecialsFixturesEventWithDefaults() *SpecialsFixturesEvent {
	this := SpecialsFixturesEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SpecialsFixturesEvent) GetId() int {
	if o == nil || o.Id == nil {
		var ret int
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialsFixturesEvent) GetIdOk() (*int, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SpecialsFixturesEvent) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int and assigns it to the Id field.
func (o *SpecialsFixturesEvent) SetId(v int) {
	o.Id = &v
}

// GetPeriodNumber returns the PeriodNumber field value if set, zero value otherwise.
func (o *SpecialsFixturesEvent) GetPeriodNumber() int {
	if o == nil || o.PeriodNumber == nil {
		var ret int
		return ret
	}
	return *o.PeriodNumber
}

// GetPeriodNumberOk returns a tuple with the PeriodNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialsFixturesEvent) GetPeriodNumberOk() (*int, bool) {
	if o == nil || o.PeriodNumber == nil {
		return nil, false
	}
	return o.PeriodNumber, true
}

// HasPeriodNumber returns a boolean if a field has been set.
func (o *SpecialsFixturesEvent) HasPeriodNumber() bool {
	if o != nil && o.PeriodNumber != nil {
		return true
	}

	return false
}

// SetPeriodNumber gets a reference to the given int and assigns it to the PeriodNumber field.
func (o *SpecialsFixturesEvent) SetPeriodNumber(v int) {
	o.PeriodNumber = &v
}

// GetHome returns the Home field value if set, zero value otherwise.
func (o *SpecialsFixturesEvent) GetHome() string {
	if o == nil || o.Home == nil {
		var ret string
		return ret
	}
	return *o.Home
}

// GetHomeOk returns a tuple with the Home field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialsFixturesEvent) GetHomeOk() (*string, bool) {
	if o == nil || o.Home == nil {
		return nil, false
	}
	return o.Home, true
}

// HasHome returns a boolean if a field has been set.
func (o *SpecialsFixturesEvent) HasHome() bool {
	if o != nil && o.Home != nil {
		return true
	}

	return false
}

// SetHome gets a reference to the given string and assigns it to the Home field.
func (o *SpecialsFixturesEvent) SetHome(v string) {
	o.Home = &v
}

// GetAway returns the Away field value if set, zero value otherwise.
func (o *SpecialsFixturesEvent) GetAway() string {
	if o == nil || o.Away == nil {
		var ret string
		return ret
	}
	return *o.Away
}

// GetAwayOk returns a tuple with the Away field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialsFixturesEvent) GetAwayOk() (*string, bool) {
	if o == nil || o.Away == nil {
		return nil, false
	}
	return o.Away, true
}

// HasAway returns a boolean if a field has been set.
func (o *SpecialsFixturesEvent) HasAway() bool {
	if o != nil && o.Away != nil {
		return true
	}

	return false
}

// SetAway gets a reference to the given string and assigns it to the Away field.
func (o *SpecialsFixturesEvent) SetAway(v string) {
	o.Away = &v
}

func (o SpecialsFixturesEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.PeriodNumber != nil {
		toSerialize["periodNumber"] = o.PeriodNumber
	}
	if o.Home != nil {
		toSerialize["home"] = o.Home
	}
	if o.Away != nil {
		toSerialize["away"] = o.Away
	}
	return json.Marshal(toSerialize)
}

type NullableSpecialsFixturesEvent struct {
	value *SpecialsFixturesEvent
	isSet bool
}

func (v NullableSpecialsFixturesEvent) Get() *SpecialsFixturesEvent {
	return v.value
}

func (v *NullableSpecialsFixturesEvent) Set(val *SpecialsFixturesEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecialsFixturesEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecialsFixturesEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecialsFixturesEvent(val *SpecialsFixturesEvent) *NullableSpecialsFixturesEvent {
	return &NullableSpecialsFixturesEvent{value: val, isSet: true}
}

func (v NullableSpecialsFixturesEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecialsFixturesEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
