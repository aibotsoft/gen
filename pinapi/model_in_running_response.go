/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package pinapi

import (
	"encoding/json"
)

// InRunningResponse struct for InRunningResponse
type InRunningResponse struct {
	// Sports container
	Sports *[]InRunningSport `json:"sports,omitempty"`
}

// NewInRunningResponse instantiates a new InRunningResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInRunningResponse() *InRunningResponse {
	this := InRunningResponse{}
	return &this
}

// NewInRunningResponseWithDefaults instantiates a new InRunningResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInRunningResponseWithDefaults() *InRunningResponse {
	this := InRunningResponse{}
	return &this
}

// GetSports returns the Sports field value if set, zero value otherwise.
func (o *InRunningResponse) GetSports() []InRunningSport {
	if o == nil || o.Sports == nil {
		var ret []InRunningSport
		return ret
	}
	return *o.Sports
}

// GetSportsOk returns a tuple with the Sports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InRunningResponse) GetSportsOk() (*[]InRunningSport, bool) {
	if o == nil || o.Sports == nil {
		return nil, false
	}
	return o.Sports, true
}

// HasSports returns a boolean if a field has been set.
func (o *InRunningResponse) HasSports() bool {
	if o != nil && o.Sports != nil {
		return true
	}

	return false
}

// SetSports gets a reference to the given []InRunningSport and assigns it to the Sports field.
func (o *InRunningResponse) SetSports(v []InRunningSport) {
	o.Sports = &v
}

func (o InRunningResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Sports != nil {
		toSerialize["sports"] = o.Sports
	}
	return json.Marshal(toSerialize)
}

type NullableInRunningResponse struct {
	value *InRunningResponse
	isSet bool
}

func (v NullableInRunningResponse) Get() *InRunningResponse {
	return v.value
}

func (v *NullableInRunningResponse) Set(val *InRunningResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInRunningResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInRunningResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInRunningResponse(val *InRunningResponse) *NullableInRunningResponse {
	return &NullableInRunningResponse{value: val, isSet: true}
}

func (v NullableInRunningResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInRunningResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
