/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package pinapi

import (
	"encoding/json"
)

// SpecialOddsLeague struct for SpecialOddsLeague
type SpecialOddsLeague struct {
	// League id.
	Id *int `json:"id,omitempty"`
	// A collection of FixturesSpecial.
	Specials *[]SpecialOddsSpecial `json:"specials,omitempty"`
}

// NewSpecialOddsLeague instantiates a new SpecialOddsLeague object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecialOddsLeague() *SpecialOddsLeague {
	this := SpecialOddsLeague{}
	return &this
}

// NewSpecialOddsLeagueWithDefaults instantiates a new SpecialOddsLeague object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecialOddsLeagueWithDefaults() *SpecialOddsLeague {
	this := SpecialOddsLeague{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SpecialOddsLeague) GetId() int {
	if o == nil || o.Id == nil {
		var ret int
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialOddsLeague) GetIdOk() (*int, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SpecialOddsLeague) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int and assigns it to the Id field.
func (o *SpecialOddsLeague) SetId(v int) {
	o.Id = &v
}

// GetSpecials returns the Specials field value if set, zero value otherwise.
func (o *SpecialOddsLeague) GetSpecials() []SpecialOddsSpecial {
	if o == nil || o.Specials == nil {
		var ret []SpecialOddsSpecial
		return ret
	}
	return *o.Specials
}

// GetSpecialsOk returns a tuple with the Specials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialOddsLeague) GetSpecialsOk() (*[]SpecialOddsSpecial, bool) {
	if o == nil || o.Specials == nil {
		return nil, false
	}
	return o.Specials, true
}

// HasSpecials returns a boolean if a field has been set.
func (o *SpecialOddsLeague) HasSpecials() bool {
	if o != nil && o.Specials != nil {
		return true
	}

	return false
}

// SetSpecials gets a reference to the given []SpecialOddsSpecial and assigns it to the Specials field.
func (o *SpecialOddsLeague) SetSpecials(v []SpecialOddsSpecial) {
	o.Specials = &v
}

func (o SpecialOddsLeague) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Specials != nil {
		toSerialize["specials"] = o.Specials
	}
	return json.Marshal(toSerialize)
}

type NullableSpecialOddsLeague struct {
	value *SpecialOddsLeague
	isSet bool
}

func (v NullableSpecialOddsLeague) Get() *SpecialOddsLeague {
	return v.value
}

func (v *NullableSpecialOddsLeague) Set(val *SpecialOddsLeague) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecialOddsLeague) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecialOddsLeague) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecialOddsLeague(val *SpecialOddsLeague) *NullableSpecialOddsLeague {
	return &NullableSpecialOddsLeague{value: val, isSet: true}
}

func (v NullableSpecialOddsLeague) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecialOddsLeague) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
