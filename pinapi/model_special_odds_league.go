/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pinapi

import (
	"bytes"
	"encoding/json"
)

// SpecialOddsLeague struct for SpecialOddsLeague
type SpecialOddsLeague struct {
	// League id.
	Id *int32 `json:"id,omitempty" xml:"id"`
	// A collection of FixturesSpecial.
	Specials *[]SpecialOddsSpecial `json:"specials,omitempty" xml:"specials"`
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SpecialOddsLeague) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialOddsLeague) GetIdOk() (int32, bool) {
	if o == nil || o.Id == nil {
		var ret int32
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SpecialOddsLeague) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *SpecialOddsLeague) SetId(v int32) {
	o.Id = &v
}

// GetSpecials returns the Specials field value if set, zero value otherwise.
func (o *SpecialOddsLeague) GetSpecials() []SpecialOddsSpecial {
	if o == nil || o.Specials == nil {
		var ret []SpecialOddsSpecial
		return ret
	}
	return *o.Specials
}

// GetSpecialsOk returns a tuple with the Specials field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialOddsLeague) GetSpecialsOk() ([]SpecialOddsSpecial, bool) {
	if o == nil || o.Specials == nil {
		var ret []SpecialOddsSpecial
		return ret, false
	}
	return *o.Specials, true
}

// HasSpecials returns a boolean if a field has been set.
func (o *SpecialOddsLeague) HasSpecials() bool {
	if o != nil && o.Specials != nil {
		return true
	}

	return false
}

// SetSpecials gets a reference to the given []SpecialOddsSpecial and assigns it to the Specials field.
func (o *SpecialOddsLeague) SetSpecials(v []SpecialOddsSpecial) {
	o.Specials = &v
}

type NullableSpecialOddsLeague struct {
	Value        SpecialOddsLeague
	ExplicitNull bool
}

func (v NullableSpecialOddsLeague) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableSpecialOddsLeague) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
