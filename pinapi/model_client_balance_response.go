/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package pinapi

import (
	"encoding/json"
)

// ClientBalanceResponse Client Balance Details
type ClientBalanceResponse struct {
	// Amount available for betting.
	AvailableBalance float64 `json:"availableBalance"`
	// Sum of not yet settled bet amounts.
	OutstandingTransactions float64 `json:"outstandingTransactions"`
	// Client’s credit.
	GivenCredit float64 `json:"givenCredit"`
	// Client’s currency code.
	Currency string `json:"currency"`
}

// NewClientBalanceResponse instantiates a new ClientBalanceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientBalanceResponse(availableBalance float64, outstandingTransactions float64, givenCredit float64, currency string, ) *ClientBalanceResponse {
	this := ClientBalanceResponse{}
	this.AvailableBalance = availableBalance
	this.OutstandingTransactions = outstandingTransactions
	this.GivenCredit = givenCredit
	this.Currency = currency
	return &this
}

// NewClientBalanceResponseWithDefaults instantiates a new ClientBalanceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientBalanceResponseWithDefaults() *ClientBalanceResponse {
	this := ClientBalanceResponse{}
	return &this
}

// GetAvailableBalance returns the AvailableBalance field value
func (o *ClientBalanceResponse) GetAvailableBalance() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.AvailableBalance
}

// GetAvailableBalanceOk returns a tuple with the AvailableBalance field value
// and a boolean to check if the value has been set.
func (o *ClientBalanceResponse) GetAvailableBalanceOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AvailableBalance, true
}

// SetAvailableBalance sets field value
func (o *ClientBalanceResponse) SetAvailableBalance(v float64) {
	o.AvailableBalance = v
}

// GetOutstandingTransactions returns the OutstandingTransactions field value
func (o *ClientBalanceResponse) GetOutstandingTransactions() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.OutstandingTransactions
}

// GetOutstandingTransactionsOk returns a tuple with the OutstandingTransactions field value
// and a boolean to check if the value has been set.
func (o *ClientBalanceResponse) GetOutstandingTransactionsOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OutstandingTransactions, true
}

// SetOutstandingTransactions sets field value
func (o *ClientBalanceResponse) SetOutstandingTransactions(v float64) {
	o.OutstandingTransactions = v
}

// GetGivenCredit returns the GivenCredit field value
func (o *ClientBalanceResponse) GetGivenCredit() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.GivenCredit
}

// GetGivenCreditOk returns a tuple with the GivenCredit field value
// and a boolean to check if the value has been set.
func (o *ClientBalanceResponse) GetGivenCreditOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.GivenCredit, true
}

// SetGivenCredit sets field value
func (o *ClientBalanceResponse) SetGivenCredit(v float64) {
	o.GivenCredit = v
}

// GetCurrency returns the Currency field value
func (o *ClientBalanceResponse) GetCurrency() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *ClientBalanceResponse) GetCurrencyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *ClientBalanceResponse) SetCurrency(v string) {
	o.Currency = v
}

func (o ClientBalanceResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["availableBalance"] = o.AvailableBalance
	}
	if true {
		toSerialize["outstandingTransactions"] = o.OutstandingTransactions
	}
	if true {
		toSerialize["givenCredit"] = o.GivenCredit
	}
	if true {
		toSerialize["currency"] = o.Currency
	}
	return json.Marshal(toSerialize)
}

type NullableClientBalanceResponse struct {
	value *ClientBalanceResponse
	isSet bool
}

func (v NullableClientBalanceResponse) Get() *ClientBalanceResponse {
	return v.value
}

func (v *NullableClientBalanceResponse) Set(val *ClientBalanceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableClientBalanceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableClientBalanceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientBalanceResponse(val *ClientBalanceResponse) *NullableClientBalanceResponse {
	return &NullableClientBalanceResponse{value: val, isSet: true}
}

func (v NullableClientBalanceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientBalanceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
