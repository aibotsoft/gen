/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
)

// TeaserGroups struct for TeaserGroups
type TeaserGroups struct {
	// Unique identifier.
	Id *int64 `json:"id,omitempty"`
	// Friendly name for the Teaser Group
	Name *string `json:"name,omitempty"`
	// A collection of Teaser.
	Teasers *[]TeaserGroupsTeaser `json:"teasers,omitempty"`
}

// NewTeaserGroups instantiates a new TeaserGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeaserGroups() *TeaserGroups {
	this := TeaserGroups{}
	return &this
}

// NewTeaserGroupsWithDefaults instantiates a new TeaserGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeaserGroupsWithDefaults() *TeaserGroups {
	this := TeaserGroups{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TeaserGroups) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserGroups) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TeaserGroups) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *TeaserGroups) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TeaserGroups) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserGroups) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TeaserGroups) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TeaserGroups) SetName(v string) {
	o.Name = &v
}

// GetTeasers returns the Teasers field value if set, zero value otherwise.
func (o *TeaserGroups) GetTeasers() []TeaserGroupsTeaser {
	if o == nil || o.Teasers == nil {
		var ret []TeaserGroupsTeaser
		return ret
	}
	return *o.Teasers
}

// GetTeasersOk returns a tuple with the Teasers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserGroups) GetTeasersOk() (*[]TeaserGroupsTeaser, bool) {
	if o == nil || o.Teasers == nil {
		return nil, false
	}
	return o.Teasers, true
}

// HasTeasers returns a boolean if a field has been set.
func (o *TeaserGroups) HasTeasers() bool {
	if o != nil && o.Teasers != nil {
		return true
	}

	return false
}

// SetTeasers gets a reference to the given []TeaserGroupsTeaser and assigns it to the Teasers field.
func (o *TeaserGroups) SetTeasers(v []TeaserGroupsTeaser) {
	o.Teasers = &v
}

func (o TeaserGroups) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Teasers != nil {
		toSerialize["teasers"] = o.Teasers
	}
	return json.Marshal(toSerialize)
}

type NullableTeaserGroups struct {
	value *TeaserGroups
	isSet bool
}

func (v NullableTeaserGroups) Get() *TeaserGroups {
	return v.value
}

func (v *NullableTeaserGroups) Set(val *TeaserGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableTeaserGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableTeaserGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeaserGroups(val *TeaserGroups) *NullableTeaserGroups {
	return &NullableTeaserGroups{value: val, isSet: true}
}

func (v NullableTeaserGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeaserGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
