/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pinapi

import (
	"bytes"
	"encoding/json"
)

// OddsLeague struct for OddsLeague
type OddsLeague struct {
	// League Id.
	Id *int32 `json:"id,omitempty" xml:"id"`
	// Contains a list of events.
	Events *[]OddsEvent `json:"events,omitempty" xml:"events"`
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OddsLeague) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsLeague) GetIdOk() (int32, bool) {
	if o == nil || o.Id == nil {
		var ret int32
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OddsLeague) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *OddsLeague) SetId(v int32) {
	o.Id = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *OddsLeague) GetEvents() []OddsEvent {
	if o == nil || o.Events == nil {
		var ret []OddsEvent
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *OddsLeague) GetEventsOk() ([]OddsEvent, bool) {
	if o == nil || o.Events == nil {
		var ret []OddsEvent
		return ret, false
	}
	return *o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *OddsLeague) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []OddsEvent and assigns it to the Events field.
func (o *OddsLeague) SetEvents(v []OddsEvent) {
	o.Events = &v
}

type NullableOddsLeague struct {
	Value        OddsLeague
	ExplicitNull bool
}

func (v NullableOddsLeague) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableOddsLeague) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
