openapi: 3.0.1
info:
  title: Pinnacle - Customer API Reference
  description: >

    # Authentication 


    API uses HTTP Basic access authentication. You need to send Authorization
    HTTP Request header:  


    `Authorization: Basic <Base64 value of UTF-8 encoded "username:password">`


    Example:


    `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
  version: 1.0.0
  x-logo:
    url: >-
      https://avatars2.githubusercontent.com/u/31601407?s=400&u=f3c6e1cfc8a26665e4a4df6d8da4a7ee527aeceb&v=4
servers:
  - url: 'https://api.pinnacle.com/'
security:
  - basicAuth: []
paths:
  /v1/client/balance:
    get:
      tags:
        - Client Balance
      summary: Get Client Balance - v1
      description: Returns current client balance.
      operationId: Client_Balance_V1_Get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientBalanceResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ClientBalanceResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ClientBalanceResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ClientBalanceResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
            text/json:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
            text/xml:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
      deprecated: false
  /v1/translations:
    get:
      tags:
        - Get Translations
      summary: Get Translations - v1
      description: >
        Returns language translations.  


        Example to translate `football` and `soccer` to German and French
        language: 

          ```
          
          https://api.pinnacle.com/v1/translations?cultureCodes=de-DE|fr-FR&baseTexts=Football|Soccer
          

          ```
          ## Supported languages 
          
          | Language   | Culture |
          |------------|---------|
          | English    | en-US   |
          | British    | en-GB   |
          | ChineseSI  | zh-CN   |
          | ChineseTR  | zh-TW   |
          | Finnish    | fi-FI   |
          | German     | de-DE   |
          | Hebrew     | he-IL   |
          | Italian    | it-IT   |
          | Norwegian  | nb-NO   |
          | Portuguese | pt-BR   |
          | Russian    | ru-RU   |
          | Spanish    | es-ES   |
          | Swedish    | sv-SE   |
          | Thai       | th-TH   |
          | Polish     | pl-PL   |
          | French     | fr-FR   |
          | Japanese   | ja-JP   |
          | Korean     | ko-KR   |
          | Vietnamese | vi-VN   |
          | Indonesian | id-ID   |
          | Czech      | cs-CZ   |
          
          
      operationId: Translations_V1_Get
      parameters:
        - name: cultureCodes
          in: query
          description: Array of language cultures separated with |.
          required: true
          style: pipeDelimited
          schema:
            type: array
            items:
              type: string
        - name: baseTexts
          in: query
          description: >-
            Array of base texts to be translated separated with |. Each base
            text in the array must be URL encoded. Base texts are not case
            sensitive.
          required: true
          style: pipeDelimited
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TranslationResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
  /v2/bets/straight:
    post:
      tags:
        - Place Bets
      summary: Place straight bet  - v2
      description: >
        Place straight bet (SPREAD, MONEYLINE, TOTAL_POINTS, TEAM_TOTAL_POINTS).


        Please note when the status is PENDING_ACCEPTANCE and if the live delay
        was applied, the response will not have betId. Client would have to call
        /bets by uniqueRequestId to check the status if the bet was ACCEPTED. 
        For more details please see [How to place a bet on live
        events?](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-place-a-bet-on-live-events)


        Make sure you handle properly the case of an unexpected error as per
         [How to handle error on placing a bet?](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-handle-unexpected-error-on-placing-a-bet)
      operationId: Bets_StraightV2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaceBetRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceBetResponseV2'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWithErrorRef'
      x-codegen-request-body-name: request
  /v1/bets/special:
    post:
      tags:
        - Place Bets
      summary: Place specials bet.
      description: |

        Make sure you handle properly the case of an unexpected error as per
         [How to handle error on placing a bet?](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-handle-unexpected-error-on-placing-a-bet)
      operationId: Bets_Special
      requestBody:
        description: The SpecialBet request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultiBetRequest.SpecialBetRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MultiBetResponse.SpecialBetResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWithErrorRef'
      x-codegen-request-body-name: request
  /v3/bets:
    get:
      tags:
        - Get Bets
      summary: Get Bets - v3
      description: >
        Returns bets. 



        ### Get running bets by time range:

        ```

        https://api.pinnacle.com/v3/bets?betlist=RUNNING&fromDate=2017-11-21T00:00:00Z&toDate=2017-11-29T00:00:00Z

        ```

        Running bets are queried by *placedAt* date time



        ### Get settled bets by time range:
          
        ```

        https://api.pinnacle.com/v3/bets?betlist=SETTLED&fromDate=2015-12-28T00:00:00Z&toDate=2015-12-29T00:00:00Z

        ```

        Settled bets are queried by *settledAt* date time

        https://api.pinnacle.com/v3/bets?betlist=SETTLED&fromDate=2017-11-20T00:00:00Z&toDate=2017-11-23T00:00:00Z



        ### Get settled cancelled bets by time range:
          
        ```

        https://api.pinnacle.com/v3/bets?betList=SETTLED&fromDate=2018-03-01&toDate=2018-03-28&betStatuses=CANCELLED

        ```



        ### Get bets by bet ids:


        ```

        https://api.pinnacle.com/v3/bets?betIds=775856112,775856113,775856114

        ```


        ### Get bets by uniqueRequestIds:


        ```

        https://api.pinnacle.com/v3/bets?uniqueRequestIds=62335222-dae4-479a-8c05-46440ccdd3bb,42335222-dae4-479a-8c05-46440ccdd3bb

        ```
      operationId: Bets_GetBetsByTypeV3
      parameters:
        - name: betlist
          in: query
          description: Type of bet list to return. Not needed when betids is submitted.
          schema:
            type: string
            enum:
              - SETTLED
              - RUNNING
              - ALL
        - name: betStatuses
          in: query
          description: >-
            Type of bet statues to return. This works only in conjustion with
            betlist, as additional filter.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
              enum:
                - WON
                - LOSE
                - CANCELLED
                - REFUNDED
                - NOT_ACCEPTED
                - ACCEPTED
                - PENDING_ACCEPTANCE
        - name: fromDate
          in: query
          description: >
            Start date of the requested period. Required when betlist parameter
            is submitted. Start date can be up to 30 days in the past. Expected
            format is ISO8601 - can be set to just date or date and time.
          schema:
            type: string
        - name: toDate
          in: query
          description: >
            End date of the requested period. Required when betlist parameter is
            submitted. Expected format is ISO8601 - can be set to just date or
            date and time.  toDate value is exclusive, meaning it cannot be
            equal to fromDate.
          schema:
            type: string
        - name: sortDir
          in: query
          description: >-
            Sort direction by postedAt/settledAt. Respected only when querying
            by date range.
          schema:
            type: string
            default: ASC
            enum:
              - ASC
              - DESC
        - name: pageSize
          in: query
          description: >-
            Page size in case. Max is 1000. Respected only when querying by date
            range.
          schema:
            type: integer
            default: 1000
        - name: fromRecord
          in: query
          description: >-
            Starting record (inclusive) of the result. Respected only when
            querying by date range. To fetch next page set it to toRecord+1 
          schema:
            type: integer
            default: 0
        - name: betids
          in: query
          description: >-
            A comma separated list of bet ids. When betids is submitted, no
            other parameter is necessary. Maximum is 100 ids. Works for all non
            settled bets and all bets settled in the last 30 days.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: integer
              format: int64
        - name: uniqueRequestIds
          in: query
          description: >
            A comma separated list of `uniqueRequestId` from the place bet
            request. If specified, it's highest priority, all other parameters
            are ignored. Maximum is 10 ids. If client has bet id, preferred way
            is to use `betIds` query parameter, you can use `uniqueRequestIds`
            when you do not  have bet id. 

            That are 2 cases when client may not have a bet id:


            1. When you bet on live event with live delay, place bet response in
            that case does not return bet id, so client can query bet status by
            `uniqueRequestIds`.

            2. In case of any network issues when client is not sure what
            happened with his place bet request. Empty response means that the
            bet was not placed. Please check [Deduplication
            section](https://www.pinnacle.com/de/api/manual#overview) for more
            details.


            Note that there is a restriction: querying by uniqueRequestIds  is
            supported for straight and  special bets and only up to 30 min from
            the moment the bet was place. 
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBetsByTypeResponseV3'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWithErrorRef'
  /v1/bets/betting-status:
    get:
      tags:
        - Betting Status
      summary: Get Betting Status
      description: >-
        Returns current betting status. During maintenance windows betting could
        be disabled, you can call this operation to check the current betting
        status.
      operationId: Bets_GetBettingStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BettingStatusResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseWithErrorRef'
  /v1/fixtures:
    get:
      tags:
        - Fixtures
      summary: Get Fixtures - v1
      description: >-
        Returns all **non-settled** events for the given sport. Please note that
        it is possible that the event is in Get Fixtures response but not in Get
        Odds. This happens when the odds are not currently available for
        wagering. Please note that it is possible to receive the same exact
        response when using **since** parameter. This is rare and can be caused
        by internal updates of event properties.
      operationId: Fixtures_V1_Get
      parameters:
        - name: sportId
          in: query
          description: The sport id to retrieve the fixtures for.
          required: true
          schema:
            type: integer
            format: int32
        - name: leagueIds
          in: query
          description: >-
            The leagueIds array may contain a list of comma separated league
            ids.
          required: false
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: isLive
          in: query
          description: >-
            To retrieve ONLY live events set the value to 1 (isLive=1). Missing
            or any other value will result in retrieval of events regardless of
            their Live status.
          required: false
          schema:
            type: boolean
        - name: since
          in: query
          description: >-
            This is used to receive incremental updates. Use the value of last
            from previous fixtures response. When since parameter is not
            provided, the fixtures are delayed up to 1 minute to encourage the
            use of the parameter.
          required: false
          schema:
            type: integer
            format: int64
        - name: eventIds
          in: query
          description: Comma separated list of event ids to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FixturesResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
  /v1/fixtures/special:
    get:
      tags:
        - Fixtures
      summary: Get Special Fixtures - v1
      description: Returns all **non-settled** specials for the given sport.
      operationId: Fixtures_Special_V1_Get
      parameters:
        - name: sportId
          in: query
          description: Id of a sport for which to retrieve the specials.
          required: true
          schema:
            type: integer
            format: int32
        - name: leagueIds
          in: query
          description: >-
            The leagueIds array may contain a list of comma separated league
            ids.
          required: false
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: since
          in: query
          description: >-
            This is used to receive incremental updates. Use the value of last
            field from the previous response. When since parameter is not
            provided, the fixtures are delayed up to 1 min to encourage the use
            of the parameter.
          required: false
          schema:
            type: integer
            format: int64
        - name: category
          in: query
          description: The category the special falls under.
          required: false
          schema:
            type: string
        - name: eventId
          in: query
          description: Id of an event associated with a special.
          required: false
          schema:
            type: integer
            format: int64
        - name: specialId
          in: query
          description: Id of the special.
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialsFixturesResponse'
              examples:
                response:
                  value:
                    sportId: 4
                    last: 636433059508250600
                    leagues:
                      - id: 487
                        specials:
                          - id: 1
                            betType: MULTI_WAY_HEAD_TO_HEAD
                            name: Will the 4th quarter be odd or even?
                            date: '2017-10-11T14:00:00Z'
                            cutoff: '2017-10-11T14:00:00Z'
                            category: 1/4 Totals
                            units: ''
                            status: I
                            event:
                              id: 1
                              periodNumber: 0
                            contestants:
                              - id: 1
                                name: Odd
                                rotNum: 100
                              - id: 2
                                name: Even
                                rotNum: 101
                          - id: 2
                            betType: MULTI_WAY_HEAD_TO_HEAD
                            name: Will the 3rd quarter be odd or even?
                            date: '2017-10-11T14:00:00Z'
                            cutoff: '2017-10-11T14:00:00Z'
                            category: 1/4 Totals
                            units: ''
                            status: I
                            event:
                              id: 1
                              periodNumber: 0
                            contestants:
                              - id: 3
                                name: Odd
                                rotNum: 100
                              - id: 4
                                name: Even
                                rotNum: 101
                          - id: 3
                            betType: MULTI_WAY_HEAD_TO_HEAD
                            name: Will the 2nd quarter be odd or even?
                            date: '2017-10-11T14:00:00Z'
                            cutoff: '2017-10-11T14:00:00Z'
                            category: 1/4 Totals
                            units: ''
                            status: H
                            event:
                              id: 1
                              periodNumber: 0
                            contestants:
                              - id: 5
                                name: Odd
                                rotNum: 100
                              - id: 6
                                name: Even
                                rotNum: 101
                          - id: 4
                            betType: MULTI_WAY_HEAD_TO_HEAD
                            name: Will the 1st quarter be odd or even?
                            date: '2017-10-11T14:00:00Z'
                            cutoff: '2017-10-11T14:00:00Z'
                            category: 1/4 Totals
                            units: ''
                            status: I
                            event:
                              id: 1
                              periodNumber: 0
                            contestants:
                              - id: 7
                                name: Odd
                                rotNum: 100
                              - id: 8
                                name: Even
                                rotNum: 101
                          - id: 5
                            betType: MULTI_WAY_HEAD_TO_HEAD
                            name: Will the 4th quarter be odd or even?
                            date: '2017-10-11T14:00:00Z'
                            cutoff: '2017-10-11T14:00:00Z'
                            category: 1/4 Totals
                            units: ''
                            status: null
                            event:
                              id: 2
                              periodNumber: 0
                            contestants:
                              - id: 9
                                name: Odd
                                rotNum: 100
                              - id: 10
                                name: Even
                                rotNum: 101
                          - id: 6
                            betType: MULTI_WAY_HEAD_TO_HEAD
                            name: Will the 3rd quarter be odd or even?
                            date: '2017-10-11T14:00:00Z'
                            cutoff: '2017-10-11T14:00:00Z'
                            category: 1/4 Totals
                            units: ''
                            status: I
                            event:
                              id: 2
                              periodNumber: 0
                            contestants:
                              - id: 11
                                name: Odd
                                rotNum: 100
                              - id: 12
                                name: Even
                                rotNum: 101
                          - id: 7
                            betType: MULTI_WAY_HEAD_TO_HEAD
                            name: Will the 2nd quarter be odd or even?
                            date: '2017-10-11T14:00:00Z'
                            cutoff: '2017-10-11T14:00:00Z'
                            category: 1/4 Totals
                            units: ''
                            status: I
                            event:
                              id: 2
                              periodNumber: 0
                            contestants:
                              - id: 13
                                name: Odd
                                rotNum: 100
                              - id: 14
                                name: Even
                                rotNum: 101
                          - id: 8
                            betType: MULTI_WAY_HEAD_TO_HEAD
                            name: Will the 1st quarter be odd or even?
                            date: '2017-10-11T14:00:00Z'
                            cutoff: '2017-10-11T14:00:00Z'
                            category: 1/4 Totals
                            units: ''
                            status: H
                            event:
                              id: 2
                              periodNumber: 0
                            contestants:
                              - id: 15
                                name: Odd
                                rotNum: 100
                              - id: 16
                                name: Even
                                rotNum: 101
                          - id: 9
                            betType: MULTI_WAY_HEAD_TO_HEAD
                            name: Who will win the NBA finals?
                            date: '2017-10-11T14:00:00Z'
                            cutoff: '2017-10-11T14:00:00Z'
                            category: Outright Winner
                            units: ''
                            status: I
                            contestants:
                              - id: 17
                                name: Golden State Warriors
                                rotNum: 100
                              - id: 18
                                name: Cleveland Cavaliers
                                rotNum: 101
                              - id: 19
                                name: San Antonio Spurs
                                rotNum: 102
                              - id: 20
                                name: Chicago Bulls
                                rotNum: 103
                      - id: 578
                        specials:
                          - id: 10
                            betType: MULTI_WAY_HEAD_TO_HEAD
                            name: Who will win the WNBA finals?
                            date: '2017-10-11T14:00:00Z'
                            cutoff: '2017-10-11T14:00:00Z'
                            category: Outright Winner
                            units: ''
                            status: I
                            contestants:
                              - id: 21
                                name: Minnesota Lynx
                                rotNum: 100
                              - id: 22
                                name: Indiana Fever
                                rotNum: 101
                              - id: 23
                                name: Phoenix Mercury
                                rotNum: 102
                              - id: 24
                                name: Chicago Sky
                                rotNum: 103
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
      deprecated: false
  /v1/fixtures/settled:
    get:
      tags:
        - Fixtures
      summary: Get Settled Fixtures - v1
      description: Returns fixtures settled in the last 24 hours for the given sport.
      operationId: Fixtures_Settled_V1_Get
      parameters:
        - name: sportId
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: leagueIds
          in: query
          required: false
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: since
          in: query
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettledFixturesSport'
              examples:
                response:
                  value:
                    sportId: 0
                    last: 0
                    leagues:
                      - id: 0
                        events:
                          - id: 0
                            periods:
                              - number: 0
                                status: 0
                                settlementId: 0
                                settledAt: '2017-09-03T18:21:22.3846289-07:00'
                                team1Score: 0
                                team2Score: 0
                                cancellationReason:
                                  code: string
                                  details:
                                    correctTeam1Id: string
                                    correctTeam2Id: string
                                    correctListedPitcher1: string
                                    correctListedPitcher2: string
                                    correctSpread: '0.0'
                                    correctTotalPoints: '0.0'
                                    correctTeam1TotalPoints: '0.0'
                                    correctTeam2TotalPoints: '0.0'
                                    correctTeam1Score: '0'
                                    correctTeam2Score: '0'
                                    correctTeam1TennisSetsScore: '0'
                                    correctTeam2TennisSetsScore: '0'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
  /v1/fixtures/special/settled:
    get:
      tags:
        - Fixtures
      summary: Get Settled Special Fixtures - v1
      description: >-
        Returns all specials which are settled in the last 24 hours for the
        given Sport.
      operationId: Fixtures_Specials_Settled_V1_Get
      parameters:
        - name: sportId
          in: query
          description: Id of the sport for which to retrieve the settled specials.
          required: true
          schema:
            type: integer
            format: int32
        - name: leagueIds
          in: query
          description: Array of leagueIds. This is optional parameter.
          required: false
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: since
          in: query
          description: >-
            This is used to receive incremental updates. Use the value of last
            from previous response.
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettledSpecialsResponse'
              examples:
                response:
                  value:
                    sportId: 0
                    last: 0
                    leagues:
                      - id: 0
                        specials:
                          - settledAt: '2017-10-11T15:05:50.996671Z'
                            cancellationReason:
                              code: string
                              details:
                                correctTeam1Id: string
                                correctTeam2Id: string
                                correctListedPitcher1: string
                                correctListedPitcher2: string
                                correctSpread: '0.0'
                                correctTotalPoints: '0.0'
                                correctTeam1TotalPoints: '0.0'
                                correctTeam2TotalPoints: '0.0'
                                correctTeam1Score: '0'
                                correctTeam2Score: '0'
                                correctTeam1TennisSetsScore: '0'
                                correctTeam2TennisSetsScore: '0'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
      deprecated: false
  /v1/odds:
    get:
      tags:
        - Odds
      summary: Get Straight Odds - v1
      description: >-
        Returns straight odds for all non-settled events. Please note that it
        is  possible that the event is in Get Fixtures response but not in Get
        Odds. This happens when the odds are not currently available for
        wagering.
      operationId: Odds_Straight_V1_Get
      parameters:
        - name: sportId
          in: query
          description: The sportid for which to retrieve the odds.
          required: true
          schema:
            type: integer
            format: int32
        - name: leagueIds
          in: query
          description: >-
            The leagueIds array may contain a list of comma separated league
            ids.
          required: false
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: oddsFormat
          in: query
          description: >-
            Format in which we return the odds. Default is American. [American,
            Decimal, HongKong, Indonesian, Malay]
          required: false
          schema:
            type: string
            enum:
              - American
              - Decimal
              - HongKong
              - Indonesian
              - Malay
        - name: since
          in: query
          description: >-
            This is used to receive incremental updates. Use the value of last
            from previous odds response. When since parameter is not provided,
            the odds are delayed up to 1 min to encourage the use of the
            parameter. Please note that when using since parameter you will get
            in the response ONLY changed periods. If a period did not have any
            changes it will not be in the response.
          required: false
          schema:
            type: integer
            format: int64
        - name: isLive
          in: query
          description: >-
            To retrieve ONLY live odds set the value to 1 (isLive=1). Otherwise
            response will have all odds.
          required: false
          schema:
            type: boolean
        - name: eventIds
          in: query
          description: Filter by EventIds
          required: false
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int64
        - name: toCurrencyCode
          in: query
          description: >-
            3 letter currency code as in the
            [/currency](https://pinnacleapi.github.io/linesapi#operation/Currencies_V2_Get)
            response. Limits will be returned in the requested currency. Default
            is USD.
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OddsResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/odds/special:
    get:
      tags:
        - Odds
      summary: Get Special Odds - v1
      description: Returns odds for specials for all non-settled events.
      operationId: Odds_Special_V1_Get
      parameters:
        - name: oddsFormat
          in: query
          description: >-
            Format the odds are returned in. [American, Decimal, HongKong,
            Indonesian, Malay]
          required: false
          schema:
            type: string
            enum:
              - American
              - Decimal
              - HongKong
              - Indonesian
              - Malay
        - name: sportId
          in: query
          description: Id of a sport for which to retrieve the specials.
          required: true
          schema:
            type: integer
            format: int32
        - name: leagueIds
          in: query
          description: >-
            The leagueIds array may contain a list of comma separated league
            ids.
          required: false
          explode: true
          schema:
            type: array
            items:
              type: integer
              format: int32
        - name: since
          in: query
          description: >-
            This is used to receive incremental updates. Use the value of last
            from previous response. When since parameter is not provided, the
            fixtures are delayed up to 1 min to encourage the use of the
            parameter.
          required: false
          schema:
            type: integer
            format: int64
        - name: specialId
          in: query
          description: Id of the special. This is an optional argument.
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialOddsResponse'
              examples:
                response:
                  value:
                    sportId: 4
                    last: 636433059510590700
                    leagues:
                      - id: 487
                        specials:
                          - id: 1
                            maxBet: 100
                            contestantLines:
                              - id: 1
                                lineId: 1001
                                price: -199
                                handicap: null
                              - id: 2
                                lineId: 1002
                                price: -198
                                handicap: null
                          - id: 2
                            maxBet: 100
                            contestantLines:
                              - id: 3
                                lineId: 1003
                                price: -197
                                handicap: null
                              - id: 4
                                lineId: 1004
                                price: -196
                                handicap: null
                          - id: 3
                            maxBet: 100
                            contestantLines:
                              - id: 5
                                lineId: 1005
                                price: -195
                                handicap: null
                              - id: 6
                                lineId: 1006
                                price: -194
                                handicap: null
                          - id: 4
                            maxBet: 100
                            contestantLines:
                              - id: 7
                                lineId: 1007
                                price: -193
                                handicap: null
                              - id: 8
                                lineId: 1008
                                price: -192
                                handicap: null
                          - id: 5
                            maxBet: 100
                            contestantLines:
                              - id: 9
                                lineId: 1009
                                price: -191
                                handicap: null
                              - id: 10
                                lineId: 1010
                                price: -190
                                handicap: null
                          - id: 6
                            maxBet: 100
                            contestantLines:
                              - id: 11
                                lineId: 1011
                                price: -189
                                handicap: null
                              - id: 12
                                lineId: 1012
                                price: -188
                                handicap: null
                          - id: 7
                            maxBet: 100
                            contestantLines:
                              - id: 13
                                lineId: 1013
                                price: -187
                                handicap: null
                              - id: 14
                                lineId: 1014
                                price: -186
                                handicap: null
                          - id: 8
                            maxBet: 100
                            contestantLines:
                              - id: 15
                                lineId: 1015
                                price: -185
                                handicap: null
                              - id: 16
                                lineId: 1016
                                price: -184
                                handicap: null
                          - id: 9
                            maxBet: 100
                            contestantLines:
                              - id: 17
                                lineId: 1017
                                price: -183
                                handicap: null
                              - id: 18
                                lineId: 1018
                                price: -182
                                handicap: null
                              - id: 19
                                lineId: 1019
                                price: -181
                                handicap: null
                              - id: 20
                                lineId: 1020
                                price: -180
                                handicap: null
                      - id: 578
                        specials:
                          - id: 10
                            maxBet: 100
                            contestantLines:
                              - id: 21
                                lineId: 1021
                                price: -179
                                handicap: null
                              - id: 22
                                lineId: 1022
                                price: -178
                                handicap: null
                              - id: 23
                                lineId: 1023
                                price: -177
                                handicap: null
                              - id: 24
                                lineId: 1024
                                price: -176
                                handicap: null
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
      deprecated: false
  /v1/line:
    get:
      tags:
        - Line
      summary: Get Straight Line - v1
      description: Returns latest line.
      operationId: Line_Straight_V1_Get
      parameters:
        - name: leagueId
          in: query
          description: League Id.
          required: true
          schema:
            type: integer
            format: int32
        - name: handicap
          in: query
          description: >-
            This is needed for SPREAD, TOTAL_POINTS and TEAM_TOTAL_POINTS bet
            types
          required: true
          schema:
            type: number
            format: double
        - name: oddsFormat
          in: query
          description: Format in which we return the odds. Default is American.
          required: true
          schema:
            type: string
            enum:
              - American
              - Decimal
              - HongKong
              - Indonesian
              - Malay
        - name: sportId
          in: query
          description: Sport identification
          required: true
          schema:
            type: integer
            format: int32
        - name: eventId
          in: query
          description: Event identification
          required: true
          schema:
            type: integer
            format: int64
        - name: periodNumber
          in: query
          description: >-
            This represents the period of the match. For example, for soccer we
            have 0 (Game),  1 (1st Half) & 2 (2nd Half)
          required: true
          schema:
            type: integer
            format: int32
        - name: betType
          in: query
          description: Bet Type
          required: true
          schema:
            type: string
            enum:
              - SPREAD
              - MONEYLINE
              - TOTAL_POINTS
              - TEAM_TOTAL_POINTS
        - name: team
          in: query
          description: >-
            Chosen team type. This is needed only for SPREAD, MONEYLINE and
            TEAM_TOTAL_POINTS bet types
          required: false
          schema:
            type: string
            enum:
              - Team1
              - Team2
              - Draw
        - name: side
          in: query
          description: >-
            Chosen side. This is needed only for TOTAL_POINTS and
            TEAM_TOTAL_POINTS
          required: false
          schema:
            type: string
            enum:
              - OVER
              - UNDER
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LineResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
  /v1/line/special:
    get:
      tags:
        - Line
      operationId: Line_Special_V1_Get
      summary: Get Special Line - v1
      description: Returns special lines and calculate odds.
      parameters:
        - name: oddsFormat
          in: query
          description: >-
            Format the odds are returned in. [American, Decimal, HongKong,
            Indonesian, Malay]
          required: true
          schema:
            type: string
            enum:
              - American
              - Decimal
              - HongKong
              - Indonesian
              - Malay
        - name: specialId
          in: query
          description: Id of the special.
          required: true
          schema:
            type: integer
            format: int64
        - name: contestantId
          in: query
          description: Id of the contestant.
          required: true
          schema:
            type: integer
            format: int64
        - name: handicap
          in: query
          description: >-
            handicap of the contestant. As contestant's handicap is a mutable
            property, it may happened that line/special returns status:SUCCESS,
            but with the different handicap from the one that client had at the
            moment of calling the line/special. One can specify handicap
            parameter in the request and if the contestant's handicap changed,
            it would return status:NOT_EXISTS. This way line/special is more
            aligned to how /line works.
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecialLineResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
      deprecated: false
  /v2/sports:
    get:
      tags:
        - Others
      summary: Get Sports - v2
      description: >-
        Returns all sports with the status whether they currently have lines or
        not.
      operationId: Sports_V2_Get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SportsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinesErrorResponse'
  /v2/leagues:
    get:
      tags:
        - Others
      summary: Get Leagues - v2
      description: >-
        Returns all sports leagues with the status whether they currently have
        lines or not.
      operationId: Leagues_V2_Get
      parameters:
        - name: sportId
          in: query
          description: Sport id for which the leagues are requested.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Leagues'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
  /v1/periods:
    get:
      tags:
        - Others
      summary: Get Periods - v1
      description: Returns all periods for a given sport.
      operationId: Periods_V1_Get
      parameters:
        - name: sportId
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SportPeriod'
              examples:
                response:
                  value:
                    periods:
                      - number: 0
                        description: Match
                        shortDescription: FT
                        spreadDescription: Handicap
                        moneylineDescription: 1X2
                        totalDescription: Total
                        team1TotalDescription: Team 1 Goals
                        team2TotalDescription: Team 2 Goals
                        spreadShortDescription: HDP
                        moneylineShortDescription: 1X2
                        totalShortDescription: O/U
                        team1TotalShortDescription: Team 1 Goals
                        team2TotalShortDescription: Team 2 Goals
                      - number: 1
                        description: 1st Half
                        shortDescription: 1st H
                        spreadDescription: 1H Handicap
                        moneylineDescription: 1H 1X2
                        totalDescription: 1H Total
                        team1TotalDescription: 1H Team 1 Goals
                        team2TotalDescription: 1H Team 2 Goals
                        spreadShortDescription: 1H HDP
                        moneylineShortDescription: 1H 1X2
                        totalShortDescription: 1H O/U
                        team1TotalShortDescription: 1H GOAL
                        team2TotalShortDescription: 1H GOAL
                      - number: 2
                        description: 2nd Half
                        shortDescription: 2nd H
                        spreadDescription: 2H Handicap
                        moneylineDescription: 2H 1X2
                        totalDescription: 2H Total
                        team1TotalDescription: 2H Team 1 Goals
                        team2TotalDescription: 2H Team 2 Goals
                        spreadShortDescription: 2H HDP
                        moneylineShortDescription: 2H 1X2
                        totalShortDescription: 2H O/U
                        team1TotalShortDescription: 2H GOAL
                        team2TotalShortDescription: 2H GOAL
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
  /v1/inrunning:
    get:
      tags:
        - Others
      summary: Get In-Running - v1
      description: >-
        Returns all live soccer events that have a status that indicates the
        event is in progress.
      operationId: InRunning_V1_Get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InRunningResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedLinesErrorResponse'
  /v1/teaser/groups:
    get:
      tags:
        - Others
      summary: Get Teaser Groups - v1
      description: Returns all teaser groups.
      operationId: Teaser_Groups_V1_Get
      parameters:
        - name: oddsFormat
          in: query
          description: >-
            Format the odds are returned in. [American, Decimal, HongKong,
            Indonesian, Malay]
          required: true
          schema:
            type: string
            enum:
              - American
              - Decimal
              - HongKong
              - Indonesian
              - Malay
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeaserGroupsResponse'
        '400':
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
  /v1/cancellationreasons:
    get:
      tags:
        - Others
      summary: Get Cancellation Reasons - v1
      description: Lookup for all the cancellation reasons
      operationId: CancellationReasons_V1_Get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancellationReasonResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
  /v2/currencies:
    get:
      tags:
        - Others
      summary: Get Currencies - v2
      description: Returns the list of supported currencies
      operationId: Currencies_V2_Get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessfulCurrenciesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExtendedErrorResponse'
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
          description: >
            INVALID_REQUEST_DATA  = Invalid request parameters (http status
            400)  

            INVALID_CREDENTIALS = Authorization failed, invalid credentials
            (http status 401)  

            INVALID_AUTHORIZATION_HEADER = HTTP Authorization header is missing
            (http status 401) 

            ACCOUNT_INACTIVE = Client's account is not active (http status
            403)  

            NO_API_ACCESS = Account not permitted to access the API (http status
            403) 

            RESUBMIT_REQUEST = It can happen only when placing a bet (http
            status 400).  Unable to process the request but the request itself
            is valid. This happens more often on the live betting in situations
            when there is more than one place bet request at the same on the
            same line. When this happens, we don't keep the place bet request on
            the server until we know if we can accept or reject the bet, but
            instead we return the error. It's also very likely that the line
            will change after that. To reduce a chance of getting
            RESUBMIT_REQUEST client should try to place a bet as fast as
            possible. 
          enum:
            - INVALID_REQUEST_DATA
            - INVALID_CREDENTIALS
            - INVALID_AUTHORIZATION_HEADER
            - ACCOUNT_INACTIVE
            - NO_API_ACCESS
            - RESUBMIT_REQUEST
        message:
          type: string
    ExtendedErrorResponse:
      type: object
      properties:
        ref:
          type: string
        code:
          type: string
        message:
          type: string
    ClientBalanceResponse:
      required:
        - availableBalance
        - currency
        - givenCredit
        - outstandingTransactions
      type: object
      properties:
        availableBalance:
          type: number
          description: Amount available for betting.
          format: double
        outstandingTransactions:
          type: number
          description: Sum of not yet settled bet amounts.
          format: double
        givenCredit:
          type: number
          description: Client’s credit.
          format: double
        currency:
          type: string
          description: Client’s currency code.
      description: Client Balance Details
    TranslationResponse:
      type: object
      properties:
        translations:
          type: array
          description: Collection of translations.
          items:
            $ref: '#/components/schemas/Translation'
    Translation:
      type: object
      properties:
        text:
          type: string
          description: Original requested text to be translated.
          example: Football
        cultures:
          type: array
          description: Collection of translations by culture.
          items:
            $ref: '#/components/schemas/TranslationByCulture'
    TranslationByCulture:
      type: object
      properties:
        id:
          type: string
          description: Culture based on which the text is translated.
          example: fr-FR
          enum:
            - en-US
            - en-GB
            - zh-CN
            - zh-TW
            - fi-FI
            - de-DE
            - he-IL
            - it-IT
            - nb-NO
            - pt-BR
            - ru-RU
            - es-ES
            - sv-SE
            - th-TH
            - pl-PL
            - fr-FR
            - ja-JP
            - ko-KR
            - vi-VN
            - id-ID
            - cs-CZ
        text:
          type: string
          description: Translation text.
          example: Football américain
    PlaceBetRequest:
      type: object
      properties:
        oddsFormat:
          $ref: '#/components/schemas/OddsFormat'
        uniqueRequestId:
          type: string
          description: >-
            This is a Unique ID for PlaceBet requests. This is to support
            idempotent requests.
          format: uuid
          example: d5cc50e4-284d-4d50-8d49-429bdc4f2a48
        acceptBetterLine:
          type: boolean
          description: >-
            Whether or not to accept a bet when there is a line change in favor
            of the client.
          example: true
        stake:
          type: number
          description: amount in client’s currency.
          format: double
          example: 10.5
        winRiskStake:
          type: string
          description: Whether the stake amount is risk or win amount.
          example: RISK
          enum:
            - WIN
            - RISK
        lineId:
          type: integer
          description: Line identification.
          format: int64
          example: 420921914
        altLineId:
          type: integer
          description: Alternate line identification.
          format: int64
          nullable: true
        pitcher1MustStart:
          type: boolean
          description: >-
            Baseball only. Refers to the pitcher for Team1. This applicable only
            for MONEYLINE bet type, for all other bet types this has to be TRUE.
        pitcher2MustStart:
          type: boolean
          description: >-
            Baseball only. Refers to the pitcher for Team2. This applicable only
            for MONEYLINE bet type, for all other bet types this has to be TRUE.
        fillType:
          type: string
          description: >
            NORMAL - bet will be placed on specified stake.  

            FILLANDKILL - If the stake is over the max limit, bet will be placed
            on max limit, otherwise it will be placed on specified stake.  

            FILLMAXLIMIT - bet will be places on max limit, stake amount will be
            ignored. Please note that maximum limits can change at any moment,
            which may result in risking more than anticipated. This option is
            replacement of isMaxStakeBet from v1/bets/place'
          example: NORMAL
          default: NORMAL
          enum:
            - NORMAL
            - FILLANDKILL
            - FILLMAXLIMIT
        sportId:
          type: integer
          format: int32
          example: 29
        eventId:
          type: integer
          format: int64
          example: 757504261
        periodNumber:
          type: integer
          format: int32
          example: 0
        betType:
          type: string
          description: Bet type.
          example: MONEYLINE
          enum:
            - MONEYLINE
            - TEAM_TOTAL_POINTS
            - SPREAD
            - TOTAL_POINTS
        team:
          type: string
          description: Team type.
          example: TEAM1
          enum:
            - TEAM1
            - TEAM2
            - DRAW
        side:
          type: string
          description: Side type.
          nullable: true
          example: null
          enum:
            - OVER
            - UNDER
      description: Request to place a bet.
    PlaceBetResponseV2:
      type: object
      properties:
        status:
          type: string
          description: Status of the response.
          example: ACCEPTED
          enum:
            - ACCEPTED
            - PENDING_ACCEPTANCE
            - PROCESSED_WITH_ERROR
        errorCode:
          type: string
          description: >
            If Status is PROCESSED_WITH_ERROR, errorCode will be in the
            response. 


            ALL_BETTING_CLOSED = Betting is not allowed at this moment. This may
            happen during system maintenance,  

            ALL_LIVE_BETTING_CLOSED = Live betting is not allowed at this
            moment. This may happen during system maintenance,  

            ABOVE_EVENT_MAX = Bet cannot be placed because client exceeded
            allowed maximum of risk on a line,  

            ABOVE_MAX_BET_AMOUNT = Stake is above allowed maximum amount,   

            BELOW_MIN_BET_AMOUNT = Stake is below allowed minimum amount,  

            BLOCKED_BETTING = Betting is suspended for the client,  

            BLOCKED_CLIENT = Client is no longer active,   

            INSUFFICIENT_FUNDS = Bet is submitted by a client with insufficient
            funds,  

            INVALID_COUNTRY = Client country is not allowed for betting,  

            INVALID_EVENT = Invalid eventid,  

            INVALID_ODDS_FORMAT = If a bet was submitted with the odds format
            that is not allowed for the client,  

            LINE_CHANGED = Bet is submitted on a line that has changed,  

            LISTED_PITCHERS_SELECTION_ERROR = If bet was submitted with
            pitcher1MustStart and/or pitcher2MustStart parameters in Place Bet
            request with values that are not allowed,  

            OFFLINE_EVENT = Bet is submitted on an event that is offline or the
            submitted line is not offered at the moment due to points/handicap
            change or the submitted bet type is just not offered at the
            moment,  

            PAST_CUTOFFTIME = Bet is submitted on a game after the betting
            cutoff time,  

            RED_CARDS_CHANGED = Bet is submitted on a live soccer event with
            changed red card count,  

            SCORE_CHANGED = Bet is submitted on a live soccer event with changed
            score,  

            TIME_RESTRICTION = Bet is submitted within too short of a period
            from the same bet previously placed by a client,  

            DUPLICATE_UNIQUE_REQUEST_ID = Request with the same uniqueRequestId
            was already processed. Please set the new value if you still want
            the request to be processed,  

            INCOMPLETE_CUSTOMER_BETTING_PROFILE = System configuration issue,  

            INVALID_CUSTOMER_PROFILE = System configuration issue,  

            LIMITS_CONFIGURATION_ISSUE = System configuration issue,  

            RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Client has reached his
            total loss limit,  

            RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Client has reached his
            total risk limit,  

            SYSTEM_ERROR_3 = Unexpected error,  

            LICENCE_RESTRICTION_LIVE_BETTING_BLOCKED - Live betting blocked due
            to licence restrictions
          nullable: true
          example: null
          enum:
            - ALL_BETTING_CLOSED
            - ALL_LIVE_BETTING_CLOSED
            - ABOVE_EVENT_MAX
            - ABOVE_MAX_BET_AMOUNT
            - BELOW_MIN_BET_AMOUNT
            - BLOCKED_BETTING
            - BLOCKED_CLIENT
            - INSUFFICIENT_FUNDS
            - INVALID_COUNTRY
            - INVALID_EVENT
            - INVALID_ODDS_FORMAT
            - LINE_CHANGED
            - LISTED_PITCHERS_SELECTION_ERROR
            - OFFLINE_EVENT
            - PAST_CUTOFFTIME
            - RED_CARDS_CHANGED
            - SCORE_CHANGED
            - TIME_RESTRICTION
            - DUPLICATE_UNIQUE_REQUEST_ID
            - INCOMPLETE_CUSTOMER_BETTING_PROFILE
            - INVALID_CUSTOMER_PROFILE
            - LIMITS_CONFIGURATION_ISSUE
            - RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED
            - RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED
            - SYSTEM_ERROR_3
            - LICENCE_RESTRICTION_LIVE_BETTING_BLOCKED
        uniqueRequestId:
          type: string
          description: Echo of the uniqueRequestId from the request.
          example: D5CC50E4-284D-4D50-8D49-429BDC4F2A4
        straightBet:
          $ref: '#/components/schemas/StraightBet'
      description: ''
    StraightBet:
      required:
        - betId
        - betStatus
        - betType
        - oddsFormat
        - placedAt
        - risk
        - updateSequence
        - wagerNumber
        - win
      type: object
      properties:
        betId:
          type: integer
          description: Bet identification
          format: int64
          example: 759629245
        wagerNumber:
          type: integer
          description: >-
            Wager identification. All bets placed thru the API will have value
            1. Website Classic view supports multiple contest(special) bets
            placement in the same bet slip in that case the bet would have
            appropriate wager number, as well as all round robin parlay bets.
          format: int32
          example: 1
        placedAt:
          type: string
          description: Date time when the bet was placed.
          format: date-time
          example: 2017-09-05T01:32:59.000Z
        betStatus:
          type: string
          description: >
            Bet Status.  


            ACCEPTED = Bet was accepted,  

            CANCELLED = Bet is cancelled as per Pinnacle betting rules,  

            LOSE = The bet is settled as lose,  

            PENDING_ACCEPTANCE = This status is reserved only for live bets. If
            a live bet is placed during danger zone or live delay is applied, it
            will be in PENDING_ACCEPTANCE , otherwise in ACCEPTED status. From
            this status bet can go to ACCEPTED or NOT_ACCEPTED status,  

            REFUNDED = When an event is cancelled or when the bet is settled as
            push, the bet will have REFUNDED status,  

            NOT_ACCEPTED = Bet was not accepted. Bet can be in this status only
            if it was previously in PENDING_ACCEPTANCE status,  

            WON = The bet is settled as won 
          example: ACCEPTED
          enum:
            - ACCEPTED
            - CANCELLED
            - LOSE
            - PENDING_ACCEPTANCE
            - REFUNDED
            - NOT_ACCEPTED
            - WON
        betType:
          type: string
          description: Bet type.
          example: MONEYLINE
          enum:
            - MONEYLINE
            - TEAM_TOTAL_POINTS
            - SPREAD
            - TOTAL_POINTS
            - SPECIAL
            - PARLAY
            - TEASER
            - MANUAL
        win:
          type: number
          description: Win amount.
          format: double
          example: 1
        risk:
          type: number
          description: Risk amount.
          format: double
          example: 1.5
        winLoss:
          type: number
          description: Win-Loss for settled bets.
          format: double
          nullable: true
        oddsFormat:
          $ref: '#/components/schemas/OddsFormat'
        customerCommission:
          type: number
          description: Client’s commission on the bet.
          format: double
          nullable: true
        cancellationReason:
          $ref: '#/components/schemas/CancellationReason'
        updateSequence:
          type: integer
          description: Update Sequence
          format: int64
          example: 111548915
        sportId:
          type: integer
          description: ''
          format: int32
          example: 29
        leagueId:
          type: integer
          description: ''
          format: int32
          example: 2462
        eventId:
          type: integer
          description: ''
          format: int64
          example: 757064557
        handicap:
          type: number
          description: ''
          format: double
          nullable: true
        price:
          type: number
          description: ''
          format: double
          example: -155
        teamName:
          type: string
          description: ''
          example: Crvena Zvezda
        side:
          type: string
          description: Side type.
          nullable: true
          example: null
          enum:
            - OVER
            - UNDER
        pitcher1:
          type: string
          description: Pitcher name of team1. Only for bets on baseball.
          nullable: true
          example: null
        pitcher2:
          type: string
          description: Pitcher name of team2. Only for bets on baseball.
          nullable: true
          example: null
        pitcher1MustStart:
          type: string
          description: Whether the team1 pitcher must start. Only for bets on baseball.
          nullable: true
          example: null
        pitcher2MustStart:
          type: string
          description: Whether the team1 pitcher must start. Only for bets on baseball.
          nullable: true
          example: null
        team1:
          type: string
          description: ''
          example: Crvena Zvezda
        team2:
          type: string
          description: ''
          example: Partizan
        periodNumber:
          type: integer
          description: ''
          format: int32
          example: 0
        team1Score:
          type: number
          description: 'Team 1 score that the bet was placed on, only for live bets.'
          format: double
          nullable: true
        team2Score:
          type: number
          description: 'Team 2 score that the bet was placed, only for live bets.'
          format: double
          nullable: true
        ftTeam1Score:
          type: number
          description: 'Full time team 1 score, only for settled bets.'
          format: double
          nullable: true
        ftTeam2Score:
          type: number
          description: 'Full time team 2 score, only for settled bets.'
          format: double
          nullable: true
        pTeam1Score:
          type: number
          description: >-
            .End of period team 1 score, only for settled bets. If the bet was
            placed on Game period (periodNumber =0) , this will be null . 
          format: double
          nullable: true
        pTeam2Score:
          type: number
          description: >-
            End of period team 2 score, only for settled bets. If the bet was
            placed on Game period (periodNumber =0), this will be null
          format: double
          nullable: true
        isLive:
          type: string
          description: Whether the bet is on live event
          example: 'false'
      description: ''
    StraightBetV3:
      required:
        - betId
        - betStatus
        - betType
        - oddsFormat
        - placedAt
        - risk
        - updateSequence
        - wagerNumber
        - win
      type: object
      properties:
        betId:
          type: integer
          description: Bet identification
          format: int64
          example: 759629245
        wagerNumber:
          type: integer
          description: >-
            Wager identification. All bets placed thru the API will have value
            1. Website Classic view supports multiple contest(special) bets
            placement in the same bet slip in that case the bet would have
            appropriate wager number, as well as all round robin parlay bets.
          format: int32
          example: 1
        placedAt:
          type: string
          description: Date time when the bet was placed.
          format: date-time
          example: 2017-09-05T01:32:59.000Z
        betStatus:
          type: string
          description: >
            Bet Status.  


            ACCEPTED = Bet was accepted,  

            CANCELLED = Bet is cancelled as per Pinnacle betting rules,  

            LOSE = The bet is settled as lose,  

            PENDING_ACCEPTANCE = This status is reserved only for live bets. If
            a live bet is placed during danger zone or live delay is applied, it
            will be in PENDING_ACCEPTANCE , otherwise in ACCEPTED status. From
            this status bet can go to ACCEPTED or NOT_ACCEPTED status,  

            REFUNDED = When an event is cancelled or when the bet is settled as
            push, the bet will have REFUNDED status,  

            NOT_ACCEPTED = Bet was not accepted. Bet can be in this status only
            if it was previously in PENDING_ACCEPTANCE status,  

            WON = The bet is settled as won 
          example: ACCEPTED
          enum:
            - ACCEPTED
            - CANCELLED
            - LOSE
            - PENDING_ACCEPTANCE
            - REFUNDED
            - NOT_ACCEPTED
            - WON
        betType:
          type: string
          description: Bet type.
          example: MONEYLINE
          enum:
            - MONEYLINE
            - TEAM_TOTAL_POINTS
            - SPREAD
            - TOTAL_POINTS
            - SPECIAL
            - PARLAY
            - TEASER
            - MANUAL
        win:
          type: number
          description: Win amount.
          format: double
          example: 1
        risk:
          type: number
          description: Risk amount.
          format: double
          example: 1.5
        winLoss:
          type: number
          description: Win-Loss for settled bets.
          format: double
          nullable: true
        oddsFormat:
          $ref: '#/components/schemas/OddsFormat'
        customerCommission:
          type: number
          description: Client’s commission on the bet.
          format: double
          nullable: true
        cancellationReason:
          $ref: '#/components/schemas/CancellationReason'
        updateSequence:
          type: integer
          description: Update Sequence
          format: int64
          example: 111548915
        sportId:
          type: integer
          description: ''
          format: int32
          example: 29
        leagueId:
          type: integer
          description: ''
          format: int32
          example: 2462
        eventId:
          type: integer
          description: ''
          format: int64
          example: 757064557
        handicap:
          type: number
          description: ''
          format: double
          nullable: true
        price:
          type: number
          description: ''
          format: double
          example: -155
        teamName:
          type: string
          description: ''
          example: Crvena Zvezda
        side:
          type: string
          description: Side type.
          nullable: true
          example: null
          enum:
            - OVER
            - UNDER
        pitcher1:
          type: string
          description: Pitcher name of team1. Only for bets on baseball.
          nullable: true
          example: null
        pitcher2:
          type: string
          description: Pitcher name of team2. Only for bets on baseball.
          nullable: true
          example: null
        pitcher1MustStart:
          type: boolean
          description: >-
            Baseball only. Refers to the pitcher for Team1.  This applicable
            only for MONEYLINE bet type, for all other bet types this has to be
            TRUE.
          nullable: true
          example: false
        pitcher2MustStart:
          type: boolean
          description: >-
            Baseball only. Refers to the pitcher for Team2.  This applicable
            only for MONEYLINE bet type, for all other bet types this has to be
            TRUE.
          nullable: true
          example: false
        team1:
          type: string
          description: ''
          example: Crvena Zvezda
        team2:
          type: string
          description: ''
          example: Partizan
        periodNumber:
          type: integer
          description: ''
          format: int32
          example: 0
        team1Score:
          type: number
          description: 'Team 1 score that the bet was placed on, only for live bets.'
          format: double
          nullable: true
        team2Score:
          type: number
          description: 'Team 2 score that the bet was placed, only for live bets.'
          format: double
          nullable: true
        ftTeam1Score:
          type: number
          description: 'Full time team 1 score, only for settled bets.'
          format: double
          nullable: true
        ftTeam2Score:
          type: number
          description: 'Full time team 2 score, only for settled bets.'
          format: double
          nullable: true
        pTeam1Score:
          type: number
          description: >-
            .End of period team 1 score, only for settled bets. If the bet was
            placed on Game period (periodNumber =0), this will be null . 
          format: double
          nullable: true
        pTeam2Score:
          type: number
          description: >-
            End of period team 2 score, only for settled bets. If the bet was
            placed on Game period (periodNumber =0), this will be null
          format: double
          nullable: true
        isLive:
          type: boolean
          description: Whether the bet is on live event
          example: false
        eventStartTime:
          type: string
          description: Date time when the event starts.
          format: date-time
          example: 2017-10-05T01:32:59.000Z
      description: ''
    CancellationReason:
      required:
        - code
      type: object
      properties:
        code:
          type: string
          example: FBS_CW_227
        details:
          $ref: '#/components/schemas/CancellationDetails'
      description: |
        Possible keys \:  
        * correctTeam1Id
        * correctTeam2Id
        * correctListedPitcher1
        * correctListedPitcher2
        * correctSpread
        * correctTotalPoints
        * correctTeam1TotalPoints
        * correctTeam2TotalPoints
        * correctTeam1Score
        * correctTeam2Score
        * correctTeam1TennisSetsScore
        * correctTeam2TennisSetsScore
    CancellationDetails:
      type: array
      example:
        - key: correctSpread
          value: -1.5
      items:
        $ref: '#/components/schemas/CancellationDetailsItem'
    CancellationDetailsItem:
      type: object
      properties:
        key:
          type: string
          example: correctSpread
        value:
          type: string
          example: '1.5'
    ErrorResponseWithErrorRef:
      type: object
      properties:
        ref:
          type: string
          example: f5d9ba85-cc97-47a9-ad92-ea57d0ea2cc0
        code:
          type: string
          example: UNEXPECTED_ERROR
        message:
          type: string
          example: Internal error
    ParlayBet:
      required:
        - betId
        - betStatus
        - betType
        - legs
        - oddsFormat
        - placedAt
        - risk
        - updateSequence
        - wagerNumber
        - win
      type: object
      properties:
        betId:
          type: integer
          description: Bet identification
          format: int64
          example: 760404490
        uniqueRequestId:
          type: string
          description: Unique Request Id
          format: uuid
          example: 10924e23-a2fe-4317-bffd-80504675f554
        wagerNumber:
          type: integer
          description: >-
            Wager identification. All bets placed thru the API will have value
            1. Website Classic view supports multiple contest(special) bets
            placement in the same bet slip in that case the bet would have
            appropriate wager number, as well as all round robin parlay bets.
          format: int32
          example: 1
        placedAt:
          type: string
          description: Date time when the bet was placed.
          format: date-time
          example: 2017-09-08T00:55:11.000Z
        betStatus:
          type: string
          description: >
            Bet Status. 


            ACCEPTED = Bet was accepted,  

            CANCELLED = Bet is cancelled as per Pinnacle betting rules,  

            LOSE = The bet is settled as lose,  

            PENDING_ACCEPTANCE = This status is reserved only for live bets. If
            a live bet is placed during danger zone or live delay is applied, it
            will be in PENDING_ACCEPTANCE , otherwise in ACCEPTED status. From
            this status bet can go to ACCEPTED or REJECTED status,  

            REFUNDED = When an event is cancelled or when the bet is settled as
            push, the bet will have REFUNDED status,  

            NOT_ACCEPTED = Bet was not accepted. Bet can be in this status only
            if it was previously in PENDING_ACCEPTANCE status,  

            WON = The bet is settled as won
          example: ACCEPTED
          enum:
            - ACCEPTED
            - CANCELLED
            - LOSE
            - PENDING_ACCEPTANCE
            - REFUNDED
            - NOT_ACCEPTED
            - WON
        betType:
          type: string
          example: PARLAY
          default: PARLAY
        win:
          type: number
          description: Win amount.
          format: double
          example: 6.82
        risk:
          type: number
          description: Risk amount.
          format: double
          example: 1
        winLoss:
          type: number
          description: Win-Loss for settled bets.
          format: double
          nullable: true
        oddsFormat:
          $ref: '#/components/schemas/OddsFormat'
        customerCommission:
          type: number
          description: Client’s commission on the bet.
          format: double
          nullable: true
        cancellationReason:
          $ref: '#/components/schemas/CancellationReason'
        updateSequence:
          type: integer
          description: Update Sequence
          format: int64
          example: 112839436
        legs:
          type: array
          description: ''
          items:
            $ref: '#/components/schemas/ParlayLeg'
        price:
          type: number
          description: ''
          format: double
          example: 682
        finalPrice:
          type: number
          description: >-
            Only for settled parlay. Final price may differ in case leg was
            cancelled or half won
          format: double
          example: 0
      description: ''
    ParlayLeg:
      type: object
      properties:
        sportId:
          type: integer
          description: ''
          format: int32
          example: 29
        legBetType:
          type: string
          description: Parlay leg type.
          example: MONEYLINE
          enum:
            - MONEYLINE
            - SPREAD
            - TOTAL_POINTS
        legBetStatus:
          type: string
          description: >
            Parlay Leg status.

            CANCELLED = The leg is canceled- the stake on this leg will be
            transferred to the next one. In this case the leg will be ignored
            when calculating the winLoss,  

            LOSE = The leg is a loss or a push-lose. When Push-lose happens, the
            half of the stake on the leg will be pushed to the next leg, and the
            other half will be a lose. This can happen only when the leg is
            placed on a quarter points handicap,  

            PUSH = The leg is a push - the stake on this leg will be transferred
            to the next one. In this case the leg will be ignored when
            calculating the winLoss,  

            REFUNDED = The leg is refunded - the stake on this leg will be
            transferred to the next one. In this case the leg will be ignored
            when calculating the winLoss,  

            WON = The leg is a won or a push-won. When Push-won happens, the
            half of the stake on the leg will be pushed to the next leg, and the
            other half is won. This can happen only when the leg is placed on a
            quarter points handicap 
          enum:
            - CANCELLED
            - LOSE
            - PUSH
            - REFUNDED
            - WON
            - ACCEPTED
        leagueId:
          type: integer
          description: ''
          format: int32
          example: 1766
        eventId:
          type: integer
          description: ''
          format: int64
          example: 758024079
        eventStartTime:
          type: string
          description: Date time when the event starts.
          format: date-time
          example: 2017-10-05T01:32:59.000Z
        handicap:
          type: number
          description: ''
          format: double
          nullable: true
        price:
          type: number
          description: ''
          format: double
          example: 193
        teamName:
          type: string
          description: ''
          example: Adelaide United
        side:
          type: string
          description: Side type.
          nullable: true
          example: null
          enum:
            - OVER
            - UNDER
        pitcher1:
          type: string
          description: ''
          nullable: true
          example: null
        pitcher2:
          type: string
          description: ''
          nullable: true
          example: null
        pitcher1MustStart:
          type: boolean
          description: ''
          example: false
        pitcher2MustStart:
          type: boolean
          description: ''
          example: false
        team1:
          type: string
          description: Wellington Phoenix
        team2:
          type: string
          description: Adelaide United
        periodNumber:
          type: integer
          description: ''
          format: int32
          example: 0
        ftTeam1Score:
          type: number
          description: Full time team 1 score
          format: double
          nullable: true
        ftTeam2Score:
          type: number
          description: Full time team 2 score
          format: double
          nullable: true
        pTeam1Score:
          type: number
          description: >-
            End of period team 1 score. If the bet was placed on Game period
            (periodNumber =0) , this will be null
          format: double
          nullable: true
        pTeam2Score:
          type: number
          description: >-
            End of period team 2 score. If the bet was placed on Game period
            (periodNumber =0) , this will be null
          format: double
          nullable: true
        cancellationReason:
          $ref: '#/components/schemas/CancellationReason'
      description: ''
    MultiBetRequest.SpecialBetRequest:
      type: object
      properties:
        bets:
          type: array
          description: The individual bets.
          items:
            $ref: '#/components/schemas/SpecialBetRequest'
      description: ''
    SpecialBetRequest:
      type: object
      properties:
        uniqueRequestId:
          type: string
          description: >-
            This unique id of the place bet requests. This is to support
            idempotent requests.
          format: uuid
          example: 10924e23-a2fe-4317-bffd-80504675f554
        acceptBetterLine:
          type: boolean
          description: >-
            Whether or not to accept a bet when there is a line change in favor
            of the client.
          example: true
        oddsFormat:
          $ref: '#/components/schemas/OddsFormat'
        stake:
          type: number
          description: amount in client’s currency.
          format: double
          example: 10.5
        winRiskStake:
          type: string
          description: Whether the stake amount is risk or win amount.
          example: RISK
          enum:
            - WIN
            - RISK
        lineId:
          type: integer
          description: Line identification.
          format: int64
          example: 51024304
        specialId:
          type: integer
          description: Special identification.
          format: int64
          example: 726394409
        contestantId:
          type: integer
          description: Contestant identification.
          format: int64
          example: 726394411
      description: ''
    MultiBetResponse.SpecialBetResponse:
      type: object
      properties:
        bets:
          type: array
          description: The individual bets.
          items:
            $ref: '#/components/schemas/SpecialBetResponse'
      description: ''
    SpecialBetResponse:
      type: object
      properties:
        status:
          type: string
          description: Status of the request.
          example: ACCEPTED
          enum:
            - ACCEPTED
            - PROCESSED_WITH_ERROR
        errorCode:
          type: string
          description: >
            When Status is PROCESSED_WITH_ERROR, provides a code indicating the
            specific problem.


            ALL_BETTING_CLOSED = Betting is not allowed at this moment. This may
            happen during system maintenance.  
             ABOVE_MAX_BET_AMOUNT = Stake is above allowed maximum amount,  
             BELOW_MIN_BET_AMOUNT = Stake is below allowed minimum amount,  
             BLOCKED_BETTING = Betting is suspended for the client,  
             BLOCKED_CLIENT = Client is no longer active,  
             CONTEST_NOT_FOUND = Incorrect contest id provided or contest is no longer available,  
             DUPLICATE_UNIQUE_REQUEST_ID = UniqueRequestId must be unique for each bet,  
             INCOMPLETE_CUSTOMER_BETTING_PROFILE = Customer profile could not be loaded,   
             INSUFFICIENT_FUNDS = Bet is submitted by a client with insufficient funds,  
             INVALID_COUNTRY = Client country is not allowed for betting,  
             INVALID_REQUEST = Special bet request is not valid,  
             LINE_CHANGED = Bet is submitted on a line that has changed,  
             PAST_CUTOFFTIME = Bet is submitted on a game after the betting cutoff time,  
             RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Self-imposed loss limit exceeded,  
             RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Self-imposed risk limit exceeded, 
             SYSTEM_ERROR_1 = Unexpected error,  
             SYSTEM_ERROR_2 = Unexpected error,  
             UNIQUE_REQUEST_ID_REQUIRED = UniqueRequestId is missing,  
             INVALID_CUSTOMER_PROFILE
          nullable: true
          example: null
          enum:
            - ALL_BETTING_CLOSED
            - ABOVE_MAX_BET_AMOUNT
            - BELOW_MIN_BET_AMOUNT
            - BLOCKED_BETTING
            - BLOCKED_CLIENT
            - CONTEST_NOT_FOUND
            - DUPLICATE_UNIQUE_REQUEST_ID
            - INCOMPLETE_CUSTOMER_BETTING_PROFILE
            - INSUFFICIENT_FUNDS
            - INVALID_COUNTRY
            - INVALID_REQUEST
            - LINE_CHANGED
            - PAST_CUTOFFTIME
            - RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED
            - RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED
            - SYSTEM_ERROR_1
            - SYSTEM_ERROR_2
            - UNIQUE_REQUEST_ID_REQUIRED
            - INVALID_CUSTOMER_PROFILE
        betId:
          type: integer
          description: Id of a newly created bet.
          format: int64
          example: 760745142
        uniqueRequestId:
          type: string
          description: Unique identifier provided in the request.
          format: uuid
          example: 10924e23-a2fe-4317-bffd-80504675f554
        betterLineWasAccepted:
          type: boolean
          description: >-
            Whether or not the bet was accepted on the line that changed in
            favour of client. This can be true only if acceptBetterLine in the
            Place Bet request is set to TRUE.
          example: false
        specialBet:
          $ref: '#/components/schemas/SpecialBet'
    SpecialBet:
      required:
        - betId
        - betStatus
        - betType
        - contestantId
        - contestantName
        - leagueId
        - oddsFormat
        - placedAt
        - price
        - risk
        - specialId
        - specialName
        - sportId
        - updateSequence
        - wagerNumber
        - win
      type: object
      properties:
        betId:
          type: integer
          description: Bet identification
          format: int64
          example: 760748770
        uniqueRequestId:
          type: string
          description: Unique Request Id
          format: uuid
          example: 10924e23-a2fe-4317-bffd-80504675f554
        wagerNumber:
          type: integer
          description: >-
            Wager identification. All bets placed thru the API will have value
            1. Website Classic view supports multiple contest(special) bets
            placement in the same bet slip in that case the bet would have
            appropriate wager number, as well as all round robin parlay bets.
          format: int32
          example: 1
        placedAt:
          type: string
          description: Date time when the bet was placed.
          format: date-time
          example: 2017-09-09T01:49:43.000Z
        betStatus:
          type: string
          description: >
            Bet Status. 

            ACCEPTED = Bet was accepted, 

            CANCELLED = Bet is cancelled as per Pinnacle betting rules, 

            LOSE = The bet is settled as lose,

            REFUNDED = When an event is cancelled or when the bet is settled as
            push, the bet will have REFUNDED status, 

            WON = The bet is settled as won 
          example: ACCEPTED
          enum:
            - ACCEPTED
            - CANCELLED
            - LOSE
            - REFUNDED
            - WON
        betType:
          type: string
          example: SPECIAL
          default: SPECIAL
        win:
          type: number
          description: Win amount.
          format: double
          example: 1
        risk:
          type: number
          description: Risk amount.
          format: double
          example: 1.51
        winLoss:
          type: number
          description: Win-Loss for settled bets.
          format: double
          nullable: true
        oddsFormat:
          $ref: '#/components/schemas/OddsFormat'
        customerCommission:
          type: number
          description: Client’s commission on the bet.
          format: double
          nullable: true
        cancellationReason:
          $ref: '#/components/schemas/CancellationReason'
        updateSequence:
          type: integer
          description: Update Sequence. It gets updated when the bet status change.
          format: int64
          example: 113214135
        specialId:
          type: integer
          description: ''
          format: int64
          example: 726397620
        specialName:
          type: string
          description: ''
          example: Denver Broncos Regular Season Wins?
        contestantId:
          type: integer
          description: ''
          format: int64
          example: 726397622
        contestantName:
          type: string
          description: ''
          example: Under
        price:
          type: number
          description: ''
          format: double
          example: -151
        handicap:
          type: number
          description: ''
          format: double
          example: 8.5
        units:
          type: string
          description: ''
          example: Regular Season Wins
        sportId:
          type: integer
          description: ''
          format: int32
          example: 15
        leagueId:
          type: integer
          description: ''
          format: int32
          example: 889
        eventId:
          type: integer
          description: Populated if bet was placed on a special linked to the event.
          format: int64
          nullable: true
        periodNumber:
          type: integer
          description: Populated if bet was placed on a special linked to the event.
          format: int32
          nullable: true
        team1:
          type: string
          description: Populated if bet was placed on a special linked to the event.
          nullable: true
          example: null
        team2:
          type: string
          description: Populated if bet was placed on a special linked to the event.
          nullable: true
          example: null
        eventStartTime:
          type: string
          description: Date time when the event starts
          format: date-time
          example: 2017-10-05T01:32:59.000Z
      description: ''
    GetBetsByTypeResponseV3:
      type: object
      properties:
        moreAvailable:
          type: boolean
          description: Whether there are more pages available.
        pageSize:
          type: integer
          description: Page size. Default is 1000.
        fromRecord:
          type: integer
          description: Starting record number of the result set. Records start at zero
        toRecord:
          type: integer
          description: Ending record number of the result set.
        straightBets:
          type: array
          description: A collection of placed straight bets.
          items:
            $ref: '#/components/schemas/StraightBetV3'
        parlayBets:
          type: array
          description: A collection of placed parlay bets.
          items:
            $ref: '#/components/schemas/ParlayBet'
        teaserBets:
          type: array
          description: A collection of placed teaser bets.
          items:
            $ref: '#/components/schemas/TeaserBet'
        specialBets:
          type: array
          description: A collection of placed special bets.
          items:
            $ref: '#/components/schemas/SpecialBet'
        manualBets:
          type: array
          description: A collection of placed manual bets.
          items:
            $ref: '#/components/schemas/ManualBet'
      description: ''
    TeaserBet:
      required:
        - betId
        - betStatus
        - betType
        - isSameEventOnly
        - legs
        - maxPicks
        - minPicks
        - oddsFormat
        - placedAt
        - risk
        - teaserName
        - updateSequence
        - wagerNumber
        - win
      type: object
      properties:
        betId:
          type: integer
          description: Bet identification
          format: int64
        uniqueRequestId:
          type: string
          description: Unique Request Id
          format: uuid
          example: 10924e23-a2fe-4317-bffd-80504675f554
        wagerNumber:
          type: integer
          description: >-
            Wager identification. All bets placed thru the API will have value
            1. Website Classic view supports multiple contest(special) bets
            placement in the same bet slip in that case the bet would have
            appropriate wager number, as well as all round robin parlay bets.
          format: int32
        placedAt:
          type: string
          description: Date time when the bet was placed.
          format: date-time
        betStatus:
          type: string
          description: >
            Bet Status. 


            ACCEPTED = Bet was accepted,  

            CANCELLED = Bet is cancelled as per Pinnacle betting rules,  

            LOSE = The bet is settled as lose,  

            REFUNDED = When an event is cancelled or when the bet is settled as
            push, the bet will have REFUNDED status,  

            WON = The bet is settled as won 
          enum:
            - ACCEPTED
            - CANCELLED
            - LOSE
            - REFUNDED
            - WON
        betType:
          type: string
          example: TEASER
          default: TEASER
        win:
          type: number
          description: Win amount.
          format: double
        risk:
          type: number
          description: Risk amount.
          format: double
        winLoss:
          type: number
          description: Win-Loss for settled bets.
          format: double
        oddsFormat:
          $ref: '#/components/schemas/OddsFormat'
        customerCommission:
          type: number
          description: Client’s commission on the bet.
          format: double
        cancellationReason:
          $ref: '#/components/schemas/CancellationReason'
        updateSequence:
          type: integer
          description: Update Sequence
          format: int64
        teaserName:
          type: string
          description: ''
        isSameEventOnly:
          type: boolean
          description: ''
        minPicks:
          type: number
          description: ''
          format: double
        maxPicks:
          type: number
          description: ''
          format: double
        price:
          type: number
          description: >-
            Populated for all teaser bets and will be the original price at the
            time of the placement.
          format: double
          example: 682
        finalPrice:
          type: number
          description: >-
            Only for settled parlay. Final price may differ in case leg was
            cancelled or half won.
          format: double
          example: 0
        teaserId:
          type: number
          description: Reference to the teaser id
          format: int32
        teaserGroupId:
          type: number
          description: Reference to the teaser group id
          format: int32
        legs:
          type: array
          description: ''
          items:
            $ref: '#/components/schemas/TeaserLeg'
      description: ''
    ManualBet:
      required:
        - betId
        - betStatus
        - betType
        - description
        - placedAt
        - risk
        - updateSequence
        - wagerNumber
        - win
      type: object
      properties:
        betId:
          type: integer
          description: Bet identification
          format: int64
          example: 760063588
        wagerNumber:
          type: integer
          description: >-
            Wager identification. All bets placed thru the API will have value
            1. Website Classic view supports multiple contest(special) bets
            placement in the same bet slip in that case the bet would have
            appropriate wager number, as well as all round robin parlay bets.
          format: int32
          example: 1
        placedAt:
          type: string
          description: Date time when the bet was placed.
          format: date-time
          example: 2017-09-06T14:56:27.000Z
        betStatus:
          type: string
          description: >
            Bet Status. 


            ACCEPTED = Bet was accepted,  

            CANCELLED = Bet is cancelled as per Pinnacle betting rules,  

            LOSE = The bet is settled as lose,  

            REFUNDED = When an event is cancelled or when the bet is settled as
            push, the bet will have REFUNDED status,  

            WON = The bet is settled as won 
          enum:
            - ACCEPTED
            - CANCELLED
            - LOSE
            - REFUNDED
            - WON
        betType:
          type: string
          example: MANUAL
          default: MANUAL
        win:
          type: number
          description: Win amount.
          format: double
          example: 15000
        risk:
          type: number
          description: Risk amount.
          format: double
          example: 500
        winLoss:
          type: number
          description: Win-Loss for settled bets.
          format: double
        updateSequence:
          type: integer
          description: Update Sequence
          format: int64
          example: 112472310
        description:
          type: string
          description: Manual bet description.
          example: Soccer Props - Partizan vs Crvena Zvezda - Partizan @ +3000
        referenceBetId:
          type: integer
          description: Referenced original bet id.
          format: int64
          nullable: true
      description: ''
    TeaserLeg:
      type: object
      properties:
        sportId:
          type: integer
          description: ''
          format: int32
        legBetType:
          type: string
          description: Teaser leg type.
          enum:
            - SPREAD
            - TOTAL_POINTS
        legBetStatus:
          type: string
          description: >
            CANCELLED = The leg is canceled- the stake on this leg will be
            transferred to the next one. In this case the leg will be ignored
            when calculating the winLoss,  

            LOSE = The leg is a loss or a push-lose. When Push-lose happens, the
            half of the stake on the leg will be pushed to the next leg, and the
            other half will be a lose. This can happen only when the leg is
            placed on a quarter points handicap,  

            PUSH = The leg is a push - the stake on this leg will be transferred
            to the next one. In this case the leg will be ignored when
            calculating the winLoss,  

            REFUNDED = The leg is refunded - the stake on this leg will be
            transferred to the next one. In this case the leg will be ignored
            when calculating the winLoss,  

            WON = The leg is a won or a push-won. When Push-won happens, the
            half of the stake on the leg will be pushed to the next leg, and the
            other half is won. This can happen only when the leg is placed on a
            quarter points handicap  
          enum:
            - CANCELLED
            - LOSE
            - PUSH
            - REFUNDED
            - WON
        leagueId:
          type: integer
          description: ''
          format: int32
        eventId:
          type: integer
          description: ''
          format: int64
        eventStartTime:
          type: string
          description: Date time when the event starts.
          format: date-time
          example: 2017-10-05T01:32:59.000Z
        handicap:
          type: number
          description: ''
          format: double
        teamName:
          type: string
          description: ''
        side:
          type: string
          description: Side type.
          enum:
            - OVER
            - UNDER
        team1:
          type: string
          description: ''
        team2:
          type: string
          description: ''
        periodNumber:
          type: integer
          description: ''
          format: int32
      description: ''
    OddsFormat:
      type: string
      description: |
        Bet odds format.  
        AMERICAN = American odds format,  
        DECIMAL = Decimal (European) odds format,  
        HONGKONG = Hong Kong odds format,  
        INDONESIAN = Indonesian odds format,  
        MALAY = Malaysian odds format 
      example: DECIMAL
      enum:
        - AMERICAN
        - DECIMAL
        - HONGKONG
        - INDONESIAN
        - MALAY
    BettingStatusResponse:
      required:
        - status
      type: object
      properties:
        status:
          type: string
          description: |
            Betting status.
          enum:
            - ALL_BETTING_ENABLED
            - ALL_LIVE_BETTING_CLOSED
            - ALL_BETTING_CLOSED
      description: ''
    LinesErrorResponse:
      type: object
      properties:
        status:
          type: string
        error:
          $ref: '#/components/schemas/ErrorResponse'
        code:
          type: integer
          format: int32
          description: Code identifying an error that occurred.
    ExtendedLinesErrorResponse:
      type: object
      properties:
        ref:
          type: string
        status:
          type: string
        error:
          $ref: '#/components/schemas/ErrorResponse'
        code:
          type: integer
          format: int32
          description: Code identifying an error that occurred.
    CancellationReasonResponse:
      type: object
      properties:
        cancellationReasons:
          type: array
          description: Contains a list of Cancellation Reasons.
          items:
            $ref: '#/components/schemas/CancellationReason'
      description: Cancellation Response Data
    SuccessfulCurrenciesResponse:
      type: object
      properties:
        currencies:
          type: array
          description: Currencies container.
          items:
            $ref: '#/components/schemas/Currency'
    Currency:
      type: object
      properties:
        code:
          type: string
          description: Currency code.
          example: AED
        name:
          type: string
          description: Currency name.
          example: United Arab Emirates Dirham
        rate:
          type: number
          format: double
          description: Exchange rate to USD.
          example: 3.6738
    FixturesResponse:
      type: object
      properties:
        sportId:
          type: integer
          format: int32
          description: Same as requested sport Id.
        last:
          type: integer
          format: int64
          description: >-
            Use this value for the subsequent requests for since query parameter
            to get just the changes since previous response.
        league:
          type: array
          description: Contains a list of Leagues.
          items:
            $ref: '#/components/schemas/FixturesLeague'
    FixturesLeague:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: League ID.
        name:
          type: string
          description: League Name.
        events:
          type: array
          description: Contains a list of events.
          items:
            $ref: '#/components/schemas/Fixture'
    Fixture:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Event id.
        parentId:
          type: integer
          format: int64
          description: >-
            If event is linked to another event, parentId will be populated. 
            Live event would have pre game event as parent id.
        starts:
          type: string
          format: date-time
          description: Start time of the event in UTC.
        home:
          type: string
          description: Home team name.
        away:
          type: string
          description: Away team name.
        rotNum:
          type: string
          description: >-
            Team1 rotation number. Please note that in the next version of
            /fixtures, rotNum property will be decommissioned. ParentId can be
            used instead to group the related events.
        liveStatus:
          type: integer
          format: int32
          description: >
            Indicates live status of the event. 


            0 = No live betting will be offered on this event, 

            1 = Live betting event, 

            2 = Live betting will be offered on this match, but on a different
            event. Please note that [pre-game and live events are
            different](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-find-associated-events)
            .
          enum:
            - 0
            - 1
            - 2
        homePitcher:
          type: string
          description: Home team pitcher. Only for Baseball.
        awayPitcher:
          type: string
          description: Away team pitcher. Only for Baseball.
        status:
          type: string
          description: |
            This is deprecated parameter, please check period's `status` in the
            `/odds` endpoint to see if it's open for betting.


            O = This is the starting status of a game.  

            H = This status indicates that the lines are temporarily unavailable
            for betting, 

            I = This status indicates that one or more lines have a red circle
            (lower maximum bet amount).
          enum:
            - O
            - H
            - I
          deprecated: true
        parlayRestriction:
          type: integer
          format: int32
          description: >

            Parlay status of the event. 


            0 = Allowed to parlay, without restrictions, 

            1 = Not allowed to parlay this event, 

            2 = Allowed to parlay with the restrictions. You cannot have more
            than one leg from the same event in the parlay. All events with the
            same rotation number are treated as same event.
          enum:
            - 0
            - 1
            - 2
        altTeaser:
          type: boolean
          description: >-
            Whether an event is offer with alternative teaser points. Events
            with alternative teaser points may vary from teaser definition.
        resultingUnit:
          type: string
          description: >
            Specifies based on what the event will be resulted, e.g. Corners,
            Bookings 
    SettledFixturesSport:
      type: object
      properties:
        sportId:
          type: integer
          format: int32
          description: Same as requested sport Id.
        last:
          type: integer
          format: int64
          description: >-
            Use this value for the subsequent requests for since query parameter
            to get just the changes since previous response.
        leagues:
          type: array
          description: Contains a list of Leagues.
          items:
            $ref: '#/components/schemas/SettledFixturesLeague'
    SettledFixturesLeague:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: League Id.
        events:
          type: array
          description: Contains a list of events.
          items:
            $ref: '#/components/schemas/SettledFixturesEvent'
    SettledFixturesEvent:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Event Id.
        periods:
          type: array
          description: Contains a list of periods.
          items:
            $ref: '#/components/schemas/SettledFixturesPeriod'
    SettledFixturesPeriod:
      type: object
      properties:
        number:
          type: integer
          format: int32
          description: >-
            This represents the period of the match. For example, for soccer we
            have 0 (Game), 1 (1st Half) & 2 (2nd Half)
        status:
          type: integer
          format: int32
          description: |
            Period settlement status. 

            1 = Event period is settled, 
            2 = Event period is re-settled, 
            3 = Event period is cancelled, 
            4 = Event period is re-settled as cancelled, 
            5 = Event is deleted
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
        settlementId:
          type: integer
          format: int64
          description: >-
            Unique id of the settlement. In case of a re-settlement, a new
            settlementId and settledAt will be generated.
        settledAt:
          type: string
          format: date-time
          description: Date and time in UTC when the period was settled.
        team1Score:
          type: integer
          format: int32
          description: Team1 score.
        team2Score:
          type: integer
          format: int32
          description: Team2 score.
        team1ScoreSets:
          type: integer
          format: int32
          description: Team1 sets score. Supported for tennis only.
        team2ScoreSets:
          type: integer
          format: int32
          description: Team2 sets score. Supported for tennis only.
        cancellationReason:
          $ref: '#/components/schemas/CancellationReasonType'
    CancellationReasonType:
      type: object
      properties:
        code:
          type: string
          description: Cancellation Reason Code
        details:
          $ref: '#/components/schemas/CancellationReasonDetailsType'
    CancellationReasonDetailsType:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    InRunningResponse:
      type: object
      properties:
        sports:
          type: array
          description: Sports container
          items:
            $ref: '#/components/schemas/InRunningSport'
    InRunningSport:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Sport Id
        leagues:
          type: array
          description: Leagues container
          items:
            $ref: '#/components/schemas/InRunningLeague'
    InRunningLeague:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: League Id
        events:
          type: array
          description: Events container
          items:
            $ref: '#/components/schemas/InRunningEvent'
    InRunningEvent:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Game Id
        state:
          type: integer
          format: int32
          description: |
            State of the game.

            1 = First half in progress, 
            2 = Half time in progress, 
            3 = Second half in progress, 
            4 = End of regular time,
            5 = First half extra time in progress, 
            6 = Extra time half time in progress, 
            7 = Second half extra time in progress, 
            8 = End of extra time, 
            9 = End of Game, 
            10 = Game is temporary suspended, 
            11 = Penalties in progress
          enum:
            - 1
            - 2
            - 3
            - 4
            - 5
            - 6
            - 7
            - 8
            - 9
            - 10
            - 11
        elapsed:
          type: integer
          format: int32
          description: Elapsed minutes
    Leagues:
      type: object
      properties:
        leagues:
          type: array
          description: Leagues container
          items:
            $ref: '#/components/schemas/League'
    League:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: League Id.
        name:
          type: string
          description: Name of the league.
        homeTeamType:
          type: string
          description: >-
            Specifies whether the home team is team1 or team2. You need this
            information to place a bet.
        hasOfferings:
          type: boolean
          description: Whether the league currently has events or specials.
        container:
          type: string
          description: 'Represents grouping for the league, usually a region/country'
        allowRoundRobins:
          type: boolean
          description: >-
            Specifies whether you can place parlay round robins on events in
            this league.
        leagueSpecialsCount:
          type: integer
          format: int32
          description: Indicates how many specials are in the given league.
        eventSpecialsCount:
          type: integer
          format: int32
          description: Indicates how many game specials are in the given league.
        eventCount:
          type: integer
          format: int32
          description: Indicates how many events are in the given league.
    LineResponse:
      type: object
      properties:
        status:
          type: string
          description: >-
            If the value is NOT_EXISTS, than this will be the only parameter in
            the response. All other params would be empty. [SUCCESS = OK,
            NOT_EXISTS = Line not offered anymore]
          enum:
            - SUCCESS
            - NOT_EXISTS
        price:
          type: number
          format: double
          description: Latest price.
        lineId:
          type: integer
          format: int64
          description: Line identification needed to place a bet.
        altLineId:
          type: integer
          format: int64
          description: >-
            This would be needed to place the bet if the handicap is on
            alternate line, otherwise it will not be populated in the response.
        team1Score:
          type: integer
          format: int32
          description: Away team score. Applicable to soccer only.
        team2Score:
          type: integer
          format: int32
          description: Home team score. Applicable to soccer only.
        team1RedCards:
          type: integer
          format: int32
          description: Team 1 red cards. Applicable to soccer only.
        team2RedCards:
          type: integer
          format: int32
          description: Team 2 red cards. Applicable to soccer only.
        maxRiskStake:
          type: number
          format: double
          description: Maximum bettable risk amount.
        minRiskStake:
          type: number
          format: double
          description: Minimum bettable risk amount.
        maxWinStake:
          type: number
          format: double
          description: Maximum bettable win amount.
        minWinStake:
          type: number
          format: double
          description: Minimum bettable win amount.
        effectiveAsOf:
          type: string
          description: Line is effective as of this date and time in UTC.
    OddsResponse:
      type: object
      properties:
        sportId:
          type: integer
          format: int32
          description: Same as requested sport Id.
        last:
          type: integer
          format: int64
          description: >-
            Use this value for the subsequent requests for since query parameter
            to get just the changes since previous response.
        leagues:
          type: array
          description: Contains a list of Leagues.
          items:
            $ref: '#/components/schemas/OddsLeague'
    OddsLeague:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: League Id.
        events:
          type: array
          description: Contains a list of events.
          items:
            $ref: '#/components/schemas/OddsEvent'
    OddsEvent:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Event Id.
        awayScore:
          type: number
          format: double
          description: >-
            Away team score. Only for live soccer events.Supported only for full
            match period (number=0).
        homeScore:
          type: number
          format: double
          description: >-
            Home team score. Only for live soccer events.Supported only for full
            match period (number=0).
        awayRedCards:
          type: integer
          format: int32
          description: >-
            Away team red cards. Only for live soccer events. Supported only for
            full match period (number=0).
        homeRedCards:
          type: integer
          format: int32
          description: >-
            Home team red cards. Only for live soccer events.Supported only for
            full match period (number=0).
        periods:
          type: array
          description: Contains a list of periods.
          items:
            $ref: '#/components/schemas/OddsPeriod'
    OddsPeriod:
      type: object
      properties:
        lineId:
          type: integer
          format: int64
          description: Line Id.
        number:
          type: integer
          format: int32
          description: >-
            This represents the period of the match. For example, for soccer we
            have  0 (Game), 1 (1st Half) & 2 (2nd Half)
        cutoff:
          type: string
          format: date-time
          description: Period’s wagering cut-off date in UTC.
        status:
          type: integer
          format: int32
          description: |
            1 - online, period is open for betting 
            2 - offline, period is not open for betting
          example: 1
        maxSpread:
          type: number
          format: double
          description: >-
            Maximum spread bet volume. See [How to calculate max risk from the
            max
            volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)
        maxMoneyline:
          type: number
          format: double
          description: >-
            Maximum moneyline bet volume. See [How to calculate max risk from
            the max
            volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)
        maxTotal:
          type: number
          format: double
          description: >-
            Maximum total points bet volume. See [How to calculate max risk from
            the max
            volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)
        maxTeamTotal:
          type: number
          format: double
          description: >-
            Maximum team total points bet volume. See [How to calculate max risk
            from the max
            volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)
        spreads:
          type: array
          description: Container for spread odds.
          items:
            $ref: '#/components/schemas/OddsSpread'
        moneyline:
          $ref: '#/components/schemas/OddsMoneyline'
        totals:
          type: array
          description: Container for team total points.
          items:
            $ref: '#/components/schemas/OddsTotal'
        teamTotal:
          $ref: '#/components/schemas/OddsTeamTotals'
    OddsSpread:
      type: object
      properties:
        altLineId:
          type: integer
          format: int64
          description: This is present only if it’s alternative line.
        hdp:
          type: number
          format: double
          description: Home team handicap.
        home:
          type: number
          format: double
          description: Home team price.
        away:
          type: number
          format: double
          description: Away team price.
    OddsMoneyline:
      type: object
      properties:
        home:
          type: number
          format: double
          description: Away team price
        away:
          type: number
          format: double
          description: Away team price.
        draw:
          type: number
          format: double
          description: Draw price. This is present only for events we offer price for draw.
    OddsTotal:
      type: object
      properties:
        altLineId:
          type: integer
          format: int64
          description: This is present only if it’s alternative line.
        points:
          type: number
          format: double
          description: Total points.
        over:
          type: number
          format: double
          description: Over price.
        under:
          type: number
          format: double
          description: Under price.
    OddsTeamTotals:
      type: object
      properties:
        home:
          $ref: '#/components/schemas/OddsTeamTotal'
        away:
          $ref: '#/components/schemas/OddsTeamTotal'
    OddsTeamTotal:
      type: object
      properties:
        points:
          type: number
          format: double
          description: Total points.
        over:
          type: number
          format: double
          description: Over price.
        under:
          type: number
          format: double
          description: Under price.
    SportPeriod:
      type: object
      properties:
        number:
          type: integer
          format: int32
          description: Period Number
        description:
          type: string
          description: Description for the period
        shortDescription:
          type: string
          description: Short description for the period
        spreadDescription:
          type: string
          description: Description for the Spread
        moneylineDescription:
          type: string
          description: Description for the Moneyline
        totalDescription:
          type: string
          description: Description for the Totals
        team1TotalDescription:
          type: string
          description: Description for Team1 Totals
        team2TotalDescription:
          type: string
          description: Description for Team2 Totals
        spreadShortDescription:
          type: string
          description: Short description for the Spread
        moneylineShortDescription:
          type: string
          description: Short description for the Moneyline
        totalShortDescription:
          type: string
          description: Short description for the Totals
        team1TotalShortDescription:
          type: string
          description: Short description for Team1 Totals
        team2TotalShortDescription:
          type: string
          description: Short description for Team2 Totals
    SportsResponse:
      type: object
      properties:
        sports:
          type: array
          description: Sports container.
          items:
            $ref: '#/components/schemas/Sport'
    Sport:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Sport Id.
        name:
          type: string
          description: Sport name.
        hasOfferings:
          type: boolean
          description: Whether the sport currently has events or specials.
        leagueSpecialsCount:
          type: integer
          format: int32
          description: Indicates how many specials are in the given sport.
        eventSpecialsCount:
          type: integer
          format: int32
          description: Indicates how many event specials are in the given sport.
        eventCount:
          type: integer
          format: int32
          description: Indicates how many events are in the given sport.
    TeaserGroupsResponse:
      type: object
      properties:
        teaserGroups:
          type: array
          description: A collection of TeaserGroups containing available teasers.
          items:
            $ref: '#/components/schemas/TeaserGroups'
    TeaserGroups:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier.
        name:
          type: string
          description: Friendly name for the Teaser Group
        teasers:
          type: array
          description: A collection of Teaser.
          items:
            $ref: '#/components/schemas/TeaserGroupsTeaser'
    TeaserGroupsTeaser:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier.
        description:
          type: string
          description: Description for the Teaser.
        sportId:
          type: integer
          format: int32
          description: >-
            Unique Sport identifier. Sport details can be retrieved from a call
            to v2/sports endpoint.
        minLegs:
          type: integer
          format: int32
          description: Minimum number of legs that must be selected.
        maxLegs:
          type: integer
          format: int32
          description: Maximum number of legs that can be selected.
        sameEventOnly:
          type: boolean
          description: >-
            If 'true' then all legs must be from the same event, otherwise legs
            can be from different events.
        payouts:
          type: array
          description: A collection of Payout indicating all possible payout combinations.
          items:
            $ref: '#/components/schemas/TeaserGroupsPayout'
        leagues:
          type: array
          description: A collection of Leagues available to the teaser.
          items:
            $ref: '#/components/schemas/TeaserGroupsLeague'
    TeaserGroupsPayout:
      type: object
      properties:
        numberOfLegs:
          type: integer
          format: int32
          description: Number of legs that must be bet and won to get the associated price.
        price:
          type: number
          format: double
          description: Price of the bet given the specified number of legs.
    TeaserGroupsLeague:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: >-
            Unique identifier. League details can be retrieved from a call to
            v2/leagues endpoint.
        spread:
          $ref: '#/components/schemas/TeaserGroupsBetType'
        total:
          $ref: '#/components/schemas/TeaserGroupsBetType'
    TeaserGroupsBetType:
      type: object
      properties:
        points:
          type: number
          format: double
          description: Number of points the line will be teased for the given league.
    SpecialsFixturesResponse:
      type: object
      properties:
        sportId:
          format: int32
          description: Id of a sport for which to retrieve the odds.
          type: integer
        last:
          format: int64
          description: >-
            Used for retrieving changes only on subsequent requests. Provide
            this value as the Since paramter in subsequent calls to only
            retrieve changes.
          type: integer
        leagues:
          description: Contains a list of Leagues.
          type: array
          items:
            $ref: '#/components/schemas/SpecialsFixturesLeague'
    SpecialsFixturesLeague:
      type: object
      properties:
        id:
          format: int32
          description: FixturesLeague Id.
          type: integer
        specials:
          description: A collection of Specials
          type: array
          items:
            $ref: '#/components/schemas/SpecialFixture'
    SpecialFixture:
      type: object
      properties:
        id:
          format: int64
          description: Unique Id
          type: integer
        betType:
          description: 'The type [MULTI_WAY_HEAD_TO_HEAD, SPREAD, OVER_UNDER]'
          enum:
            - MULTI_WAY_HEAD_TO_HEAD
            - SPREAD
            - OVER_UNDER
          type: string
        name:
          description: Name of the special.
          type: string
        date:
          format: date-time
          description: Date of the special in UTC.
          type: string
        cutoff:
          format: date-time
          description: Wagering cutoff date in UTC.
          type: string
        category:
          description: The category that the special falls under.
          type: string
        units:
          description: >-
            Measurment in the context of the special. This is applicable to
            specials bet type spead and over/under. In a hockey special this
            could be goals.
          type: string
        status:
          description: |
            Status of the Special 

             O = This is the starting status. It means that the lines
             are open for betting, 

             H = This status indicates that the lines are temporarily unavailable
             for betting, 

             I = This status indicates that one or more lines have a red circle
             (a lower maximum bet amount)
          enum:
            - O
            - H
            - I
          type: string
        event:
          $ref: '#/components/schemas/SpecialsFixturesEvent'
        contestants:
          description: ContestantLines available for wagering.
          type: array
          items:
            $ref: '#/components/schemas/SpecialsFixturesContestant'
        liveStatus:
          type: integer
          format: int32
          description: >
            When a special is linked to an event, we will return live status of
            the event, otherwise it will be 0. 

            0 = No live betting will be offered on this event, 

            1 = Live betting event, 

            2 = Live betting will be offered on this match, but on a different
            event.  

            Please note that live delay is applied when placing bets on special
            with LiveStatus=1 
          enum:
            - 0
            - 1
            - 2
    SpecialsFixturesEvent:
      type: object
      description: Optional event asscoaited with the special.
      properties:
        id:
          format: int32
          description: Event Id
          type: integer
        periodNumber:
          format: int32
          description: >-
            The period of the match. For example in soccer 0 (Game), 1 (1st
            Half) & 2 (2nd Half)
          type: integer
        home:
          type: string
          description: Home team name.
        away:
          type: string
          description: Away team name.
    SpecialsFixturesContestant:
      type: object
      properties:
        id:
          format: int64
          description: Contestant Id.
          type: integer
        name:
          description: Name of the contestant.
          type: string
        rotNum:
          format: int32
          description: Rotation Number.
          type: integer
    SettledSpecialsResponse:
      description: Response dto for SettledSpecials request
      type: object
      properties:
        sportId:
          format: int32
          description: Id of a sport for which to retrieve the odds.
          type: integer
        last:
          format: int64
          description: Last index for the settled fixture
          type: integer
        leagues:
          description: List of Leagues.
          type: array
          items:
            $ref: '#/components/schemas/SettledSpecialsLeague'
    SettledSpecialsLeague:
      description: League Dto to hold all settled specials for the league
      type: object
      properties:
        id:
          format: int32
          description: League Id.
          type: integer
        specials:
          description: A collection of Settled Specials
          type: array
          items:
            $ref: '#/components/schemas/SettledSpecial'
    SettledSpecial:
      description: Settled Special
      type: object
      properties:
        id:
          format: int64
          description: Id for the Settled Special
          type: integer
        status:
          format: int32
          description: Status of the settled special.
          type: integer
        settlementId:
          format: int64
          description: Id for the Settled Special
          type: integer
        settledAt:
          format: date-time
          description: Settled DateTime
          type: string
        cancellationReason:
          $ref: '#/components/schemas/CancellationReason'
          description: Cancellation Reason for Special Event
    SpecialLineResponse:
      type: object
      properties:
        status:
          description: 'Status [SUCCESS = OK, NOT_EXISTS = Line not offered anymore]'
          enum:
            - SUCCESS
            - NOT_EXISTS
          type: string
        specialId:
          format: int64
          description: Special Id.
          type: integer
        contestantId:
          format: int64
          description: Contestant Id.
          type: integer
        minRiskStake:
          format: double
          description: Minimum bettable risk amount.
          type: number
        maxRiskStake:
          format: double
          description: Maximum bettable risk amount.
          type: number
        minWinStake:
          format: double
          description: Minimum bettable win amount.
          type: number
        maxWinStake:
          format: double
          description: Maximum bettable win amount.
          type: number
        lineId:
          format: int64
          description: Line identification needed to place a bet.
          type: integer
        price:
          format: double
          description: Latest price.
          type: number
        handicap:
          format: double
          description: Handicap.
          type: number
    SpecialOddsResponse:
      type: object
      properties:
        sportId:
          format: int32
          description: Id of a sport for which to retrieve the odds.
          type: integer
        last:
          format: int64
          description: >-
            Used for retrieving changes only on subsequent requests. Provide
            this value as the Since paramter in subsequent calls to only
            retrieve changes.
          type: integer
        leagues:
          description: Contains a list of Leagues.
          type: array
          items:
            $ref: '#/components/schemas/SpecialOddsLeague'
    SpecialOddsLeague:
      type: object
      properties:
        id:
          format: int32
          description: League id.
          type: integer
        specials:
          description: A collection of FixturesSpecial.
          type: array
          items:
            $ref: '#/components/schemas/SpecialOddsSpecial'
    SpecialOddsSpecial:
      type: object
      properties:
        id:
          format: int64
          description: Special Id.
          type: integer
        maxBet:
          format: double
          description: >-
            Maximum bet volume amount. See [How to calculate max risk from the
            max
            volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)
          type: number
        contestantLines:
          description: ContestantLines available for wagering on.
          type: array
          items:
            $ref: '#/components/schemas/SpecialOddsContestantLine'
    SpecialOddsContestantLine:
      type: object
      properties:
        id:
          format: int64
          description: ContestantLine Id.
          type: integer
        lineId:
          format: int64
          description: Line identifier required for placing a bet.
          type: integer
        price:
          format: double
          description: Price of the line.
          type: number
        handicap:
          format: double
          description: 'A number indicating the spread, over/under etc.'
          type: number
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
