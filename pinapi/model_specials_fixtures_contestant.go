/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pinapi

import (
	"bytes"
	"encoding/json"
)

// SpecialsFixturesContestant struct for SpecialsFixturesContestant
type SpecialsFixturesContestant struct {
	// Contestant Id.
	Id *int64 `json:"id,omitempty" xml:"id"`
	// Name of the contestant.
	Name *string `json:"name,omitempty" xml:"name"`
	// Rotation Number.
	RotNum *int32 `json:"rotNum,omitempty" xml:"rotNum"`
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SpecialsFixturesContestant) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialsFixturesContestant) GetIdOk() (int64, bool) {
	if o == nil || o.Id == nil {
		var ret int64
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SpecialsFixturesContestant) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *SpecialsFixturesContestant) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SpecialsFixturesContestant) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialsFixturesContestant) GetNameOk() (string, bool) {
	if o == nil || o.Name == nil {
		var ret string
		return ret, false
	}
	return *o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SpecialsFixturesContestant) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SpecialsFixturesContestant) SetName(v string) {
	o.Name = &v
}

// GetRotNum returns the RotNum field value if set, zero value otherwise.
func (o *SpecialsFixturesContestant) GetRotNum() int32 {
	if o == nil || o.RotNum == nil {
		var ret int32
		return ret
	}
	return *o.RotNum
}

// GetRotNumOk returns a tuple with the RotNum field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialsFixturesContestant) GetRotNumOk() (int32, bool) {
	if o == nil || o.RotNum == nil {
		var ret int32
		return ret, false
	}
	return *o.RotNum, true
}

// HasRotNum returns a boolean if a field has been set.
func (o *SpecialsFixturesContestant) HasRotNum() bool {
	if o != nil && o.RotNum != nil {
		return true
	}

	return false
}

// SetRotNum gets a reference to the given int32 and assigns it to the RotNum field.
func (o *SpecialsFixturesContestant) SetRotNum(v int32) {
	o.RotNum = &v
}

type NullableSpecialsFixturesContestant struct {
	Value        SpecialsFixturesContestant
	ExplicitNull bool
}

func (v NullableSpecialsFixturesContestant) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableSpecialsFixturesContestant) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
