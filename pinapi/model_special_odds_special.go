/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
)

// SpecialOddsSpecial struct for SpecialOddsSpecial
type SpecialOddsSpecial struct {
	// Special Id.
	Id *int64 `json:"id,omitempty"`
	// Maximum bet volume amount. See [How to calculate max risk from the max volume](https://github.com/pinnacleapi/pinnacleapi-documentation/blob/master/FAQ.md#how-to-calculate-max-risk-from-the-max-volume-limits-in-odds)
	MaxBet *float64 `json:"maxBet,omitempty"`
	// ContestantLines available for wagering on.
	ContestantLines *[]SpecialOddsContestantLine `json:"contestantLines,omitempty"`
}

// NewSpecialOddsSpecial instantiates a new SpecialOddsSpecial object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecialOddsSpecial() *SpecialOddsSpecial {
	this := SpecialOddsSpecial{}
	return &this
}

// NewSpecialOddsSpecialWithDefaults instantiates a new SpecialOddsSpecial object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecialOddsSpecialWithDefaults() *SpecialOddsSpecial {
	this := SpecialOddsSpecial{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SpecialOddsSpecial) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialOddsSpecial) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SpecialOddsSpecial) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *SpecialOddsSpecial) SetId(v int64) {
	o.Id = &v
}

// GetMaxBet returns the MaxBet field value if set, zero value otherwise.
func (o *SpecialOddsSpecial) GetMaxBet() float64 {
	if o == nil || o.MaxBet == nil {
		var ret float64
		return ret
	}
	return *o.MaxBet
}

// GetMaxBetOk returns a tuple with the MaxBet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialOddsSpecial) GetMaxBetOk() (*float64, bool) {
	if o == nil || o.MaxBet == nil {
		return nil, false
	}
	return o.MaxBet, true
}

// HasMaxBet returns a boolean if a field has been set.
func (o *SpecialOddsSpecial) HasMaxBet() bool {
	if o != nil && o.MaxBet != nil {
		return true
	}

	return false
}

// SetMaxBet gets a reference to the given float64 and assigns it to the MaxBet field.
func (o *SpecialOddsSpecial) SetMaxBet(v float64) {
	o.MaxBet = &v
}

// GetContestantLines returns the ContestantLines field value if set, zero value otherwise.
func (o *SpecialOddsSpecial) GetContestantLines() []SpecialOddsContestantLine {
	if o == nil || o.ContestantLines == nil {
		var ret []SpecialOddsContestantLine
		return ret
	}
	return *o.ContestantLines
}

// GetContestantLinesOk returns a tuple with the ContestantLines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialOddsSpecial) GetContestantLinesOk() (*[]SpecialOddsContestantLine, bool) {
	if o == nil || o.ContestantLines == nil {
		return nil, false
	}
	return o.ContestantLines, true
}

// HasContestantLines returns a boolean if a field has been set.
func (o *SpecialOddsSpecial) HasContestantLines() bool {
	if o != nil && o.ContestantLines != nil {
		return true
	}

	return false
}

// SetContestantLines gets a reference to the given []SpecialOddsContestantLine and assigns it to the ContestantLines field.
func (o *SpecialOddsSpecial) SetContestantLines(v []SpecialOddsContestantLine) {
	o.ContestantLines = &v
}

func (o SpecialOddsSpecial) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.MaxBet != nil {
		toSerialize["maxBet"] = o.MaxBet
	}
	if o.ContestantLines != nil {
		toSerialize["contestantLines"] = o.ContestantLines
	}
	return json.Marshal(toSerialize)
}

type NullableSpecialOddsSpecial struct {
	value *SpecialOddsSpecial
	isSet bool
}

func (v NullableSpecialOddsSpecial) Get() *SpecialOddsSpecial {
	return v.value
}

func (v *NullableSpecialOddsSpecial) Set(val *SpecialOddsSpecial) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecialOddsSpecial) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecialOddsSpecial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecialOddsSpecial(val *SpecialOddsSpecial) *NullableSpecialOddsSpecial {
	return &NullableSpecialOddsSpecial{value: val, isSet: true}
}

func (v NullableSpecialOddsSpecial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecialOddsSpecial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
