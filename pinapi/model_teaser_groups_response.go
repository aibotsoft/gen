/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pinapi

import (
	"bytes"
	"encoding/json"
)

// TeaserGroupsResponse struct for TeaserGroupsResponse
type TeaserGroupsResponse struct {
	// A collection of TeaserGroups containing available teasers.
	TeaserGroups *[]TeaserGroups `json:"teaserGroups,omitempty" xml:"teaserGroups"`
}

// GetTeaserGroups returns the TeaserGroups field value if set, zero value otherwise.
func (o *TeaserGroupsResponse) GetTeaserGroups() []TeaserGroups {
	if o == nil || o.TeaserGroups == nil {
		var ret []TeaserGroups
		return ret
	}
	return *o.TeaserGroups
}

// GetTeaserGroupsOk returns a tuple with the TeaserGroups field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *TeaserGroupsResponse) GetTeaserGroupsOk() ([]TeaserGroups, bool) {
	if o == nil || o.TeaserGroups == nil {
		var ret []TeaserGroups
		return ret, false
	}
	return *o.TeaserGroups, true
}

// HasTeaserGroups returns a boolean if a field has been set.
func (o *TeaserGroupsResponse) HasTeaserGroups() bool {
	if o != nil && o.TeaserGroups != nil {
		return true
	}

	return false
}

// SetTeaserGroups gets a reference to the given []TeaserGroups and assigns it to the TeaserGroups field.
func (o *TeaserGroupsResponse) SetTeaserGroups(v []TeaserGroups) {
	o.TeaserGroups = &v
}

type NullableTeaserGroupsResponse struct {
	Value        TeaserGroupsResponse
	ExplicitNull bool
}

func (v NullableTeaserGroupsResponse) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableTeaserGroupsResponse) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
