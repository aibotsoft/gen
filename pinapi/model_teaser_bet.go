/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"time"
)

// TeaserBet struct for TeaserBet
type TeaserBet struct {
	// Bet identification
	BetId int64 `json:"betId"`
	// Unique Request Id
	UniqueRequestId *string `json:"uniqueRequestId,omitempty"`
	// Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.
	WagerNumber int `json:"wagerNumber"`
	// Date time when the bet was placed.
	PlacedAt time.Time `json:"placedAt"`
	// Bet Status.   ACCEPTED = Bet was accepted,   CANCELLED = Bet is cancelled as per Pinnacle betting rules,   LOSE = The bet is settled as lose,   REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status,   WON = The bet is settled as won  
	BetStatus string `json:"betStatus"`
	BetType string `json:"betType"`
	// Win amount.
	Win float64 `json:"win"`
	// Risk amount.
	Risk float64 `json:"risk"`
	// Win-Loss for settled bets.
	WinLoss *float64 `json:"winLoss,omitempty"`
	OddsFormat OddsFormat `json:"oddsFormat"`
	// Clientâ€™s commission on the bet.
	CustomerCommission *float64 `json:"customerCommission,omitempty"`
	CancellationReason *CancellationReason `json:"cancellationReason,omitempty"`
	// Update Sequence
	UpdateSequence int64 `json:"updateSequence"`
	TeaserName string `json:"teaserName"`
	IsSameEventOnly bool `json:"isSameEventOnly"`
	MinPicks float64 `json:"minPicks"`
	MaxPicks float64 `json:"maxPicks"`
	// Populated for all teaser bets and will be the original price at the time of the placement.
	Price *float64 `json:"price,omitempty"`
	// Only for settled parlay. Final price may differ in case leg was cancelled or half won.
	FinalPrice *float64 `json:"finalPrice,omitempty"`
	// Reference to the teaser id
	TeaserId *float32 `json:"teaserId,omitempty"`
	// Reference to the teaser group id
	TeaserGroupId *float32 `json:"teaserGroupId,omitempty"`
	Legs []TeaserLeg `json:"legs"`
}

// NewTeaserBet instantiates a new TeaserBet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeaserBet(betId int64, wagerNumber int, placedAt time.Time, betStatus string, betType string, win float64, risk float64, oddsFormat OddsFormat, updateSequence int64, teaserName string, isSameEventOnly bool, minPicks float64, maxPicks float64, legs []TeaserLeg, ) *TeaserBet {
	this := TeaserBet{}
	this.BetId = betId
	this.WagerNumber = wagerNumber
	this.PlacedAt = placedAt
	this.BetStatus = betStatus
	this.BetType = betType
	this.Win = win
	this.Risk = risk
	this.OddsFormat = oddsFormat
	this.UpdateSequence = updateSequence
	this.TeaserName = teaserName
	this.IsSameEventOnly = isSameEventOnly
	this.MinPicks = minPicks
	this.MaxPicks = maxPicks
	this.Legs = legs
	return &this
}

// NewTeaserBetWithDefaults instantiates a new TeaserBet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeaserBetWithDefaults() *TeaserBet {
	this := TeaserBet{}
	var betType string = "TEASER"
	this.BetType = betType
	return &this
}

// GetBetId returns the BetId field value
func (o *TeaserBet) GetBetId() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.BetId
}

// GetBetIdOk returns a tuple with the BetId field value
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetBetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BetId, true
}

// SetBetId sets field value
func (o *TeaserBet) SetBetId(v int64) {
	o.BetId = v
}

// GetUniqueRequestId returns the UniqueRequestId field value if set, zero value otherwise.
func (o *TeaserBet) GetUniqueRequestId() string {
	if o == nil || o.UniqueRequestId == nil {
		var ret string
		return ret
	}
	return *o.UniqueRequestId
}

// GetUniqueRequestIdOk returns a tuple with the UniqueRequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetUniqueRequestIdOk() (*string, bool) {
	if o == nil || o.UniqueRequestId == nil {
		return nil, false
	}
	return o.UniqueRequestId, true
}

// HasUniqueRequestId returns a boolean if a field has been set.
func (o *TeaserBet) HasUniqueRequestId() bool {
	if o != nil && o.UniqueRequestId != nil {
		return true
	}

	return false
}

// SetUniqueRequestId gets a reference to the given string and assigns it to the UniqueRequestId field.
func (o *TeaserBet) SetUniqueRequestId(v string) {
	o.UniqueRequestId = &v
}

// GetWagerNumber returns the WagerNumber field value
func (o *TeaserBet) GetWagerNumber() int {
	if o == nil  {
		var ret int
		return ret
	}

	return o.WagerNumber
}

// GetWagerNumberOk returns a tuple with the WagerNumber field value
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetWagerNumberOk() (*int, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.WagerNumber, true
}

// SetWagerNumber sets field value
func (o *TeaserBet) SetWagerNumber(v int) {
	o.WagerNumber = v
}

// GetPlacedAt returns the PlacedAt field value
func (o *TeaserBet) GetPlacedAt() time.Time {
	if o == nil  {
		var ret time.Time
		return ret
	}

	return o.PlacedAt
}

// GetPlacedAtOk returns a tuple with the PlacedAt field value
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetPlacedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PlacedAt, true
}

// SetPlacedAt sets field value
func (o *TeaserBet) SetPlacedAt(v time.Time) {
	o.PlacedAt = v
}

// GetBetStatus returns the BetStatus field value
func (o *TeaserBet) GetBetStatus() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.BetStatus
}

// GetBetStatusOk returns a tuple with the BetStatus field value
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetBetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BetStatus, true
}

// SetBetStatus sets field value
func (o *TeaserBet) SetBetStatus(v string) {
	o.BetStatus = v
}

// GetBetType returns the BetType field value
func (o *TeaserBet) GetBetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.BetType
}

// GetBetTypeOk returns a tuple with the BetType field value
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetBetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BetType, true
}

// SetBetType sets field value
func (o *TeaserBet) SetBetType(v string) {
	o.BetType = v
}

// GetWin returns the Win field value
func (o *TeaserBet) GetWin() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.Win
}

// GetWinOk returns a tuple with the Win field value
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetWinOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Win, true
}

// SetWin sets field value
func (o *TeaserBet) SetWin(v float64) {
	o.Win = v
}

// GetRisk returns the Risk field value
func (o *TeaserBet) GetRisk() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.Risk
}

// GetRiskOk returns a tuple with the Risk field value
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetRiskOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Risk, true
}

// SetRisk sets field value
func (o *TeaserBet) SetRisk(v float64) {
	o.Risk = v
}

// GetWinLoss returns the WinLoss field value if set, zero value otherwise.
func (o *TeaserBet) GetWinLoss() float64 {
	if o == nil || o.WinLoss == nil {
		var ret float64
		return ret
	}
	return *o.WinLoss
}

// GetWinLossOk returns a tuple with the WinLoss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetWinLossOk() (*float64, bool) {
	if o == nil || o.WinLoss == nil {
		return nil, false
	}
	return o.WinLoss, true
}

// HasWinLoss returns a boolean if a field has been set.
func (o *TeaserBet) HasWinLoss() bool {
	if o != nil && o.WinLoss != nil {
		return true
	}

	return false
}

// SetWinLoss gets a reference to the given float64 and assigns it to the WinLoss field.
func (o *TeaserBet) SetWinLoss(v float64) {
	o.WinLoss = &v
}

// GetOddsFormat returns the OddsFormat field value
func (o *TeaserBet) GetOddsFormat() OddsFormat {
	if o == nil  {
		var ret OddsFormat
		return ret
	}

	return o.OddsFormat
}

// GetOddsFormatOk returns a tuple with the OddsFormat field value
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetOddsFormatOk() (*OddsFormat, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.OddsFormat, true
}

// SetOddsFormat sets field value
func (o *TeaserBet) SetOddsFormat(v OddsFormat) {
	o.OddsFormat = v
}

// GetCustomerCommission returns the CustomerCommission field value if set, zero value otherwise.
func (o *TeaserBet) GetCustomerCommission() float64 {
	if o == nil || o.CustomerCommission == nil {
		var ret float64
		return ret
	}
	return *o.CustomerCommission
}

// GetCustomerCommissionOk returns a tuple with the CustomerCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetCustomerCommissionOk() (*float64, bool) {
	if o == nil || o.CustomerCommission == nil {
		return nil, false
	}
	return o.CustomerCommission, true
}

// HasCustomerCommission returns a boolean if a field has been set.
func (o *TeaserBet) HasCustomerCommission() bool {
	if o != nil && o.CustomerCommission != nil {
		return true
	}

	return false
}

// SetCustomerCommission gets a reference to the given float64 and assigns it to the CustomerCommission field.
func (o *TeaserBet) SetCustomerCommission(v float64) {
	o.CustomerCommission = &v
}

// GetCancellationReason returns the CancellationReason field value if set, zero value otherwise.
func (o *TeaserBet) GetCancellationReason() CancellationReason {
	if o == nil || o.CancellationReason == nil {
		var ret CancellationReason
		return ret
	}
	return *o.CancellationReason
}

// GetCancellationReasonOk returns a tuple with the CancellationReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetCancellationReasonOk() (*CancellationReason, bool) {
	if o == nil || o.CancellationReason == nil {
		return nil, false
	}
	return o.CancellationReason, true
}

// HasCancellationReason returns a boolean if a field has been set.
func (o *TeaserBet) HasCancellationReason() bool {
	if o != nil && o.CancellationReason != nil {
		return true
	}

	return false
}

// SetCancellationReason gets a reference to the given CancellationReason and assigns it to the CancellationReason field.
func (o *TeaserBet) SetCancellationReason(v CancellationReason) {
	o.CancellationReason = &v
}

// GetUpdateSequence returns the UpdateSequence field value
func (o *TeaserBet) GetUpdateSequence() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.UpdateSequence
}

// GetUpdateSequenceOk returns a tuple with the UpdateSequence field value
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetUpdateSequenceOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UpdateSequence, true
}

// SetUpdateSequence sets field value
func (o *TeaserBet) SetUpdateSequence(v int64) {
	o.UpdateSequence = v
}

// GetTeaserName returns the TeaserName field value
func (o *TeaserBet) GetTeaserName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.TeaserName
}

// GetTeaserNameOk returns a tuple with the TeaserName field value
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetTeaserNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TeaserName, true
}

// SetTeaserName sets field value
func (o *TeaserBet) SetTeaserName(v string) {
	o.TeaserName = v
}

// GetIsSameEventOnly returns the IsSameEventOnly field value
func (o *TeaserBet) GetIsSameEventOnly() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.IsSameEventOnly
}

// GetIsSameEventOnlyOk returns a tuple with the IsSameEventOnly field value
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetIsSameEventOnlyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsSameEventOnly, true
}

// SetIsSameEventOnly sets field value
func (o *TeaserBet) SetIsSameEventOnly(v bool) {
	o.IsSameEventOnly = v
}

// GetMinPicks returns the MinPicks field value
func (o *TeaserBet) GetMinPicks() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.MinPicks
}

// GetMinPicksOk returns a tuple with the MinPicks field value
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetMinPicksOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MinPicks, true
}

// SetMinPicks sets field value
func (o *TeaserBet) SetMinPicks(v float64) {
	o.MinPicks = v
}

// GetMaxPicks returns the MaxPicks field value
func (o *TeaserBet) GetMaxPicks() float64 {
	if o == nil  {
		var ret float64
		return ret
	}

	return o.MaxPicks
}

// GetMaxPicksOk returns a tuple with the MaxPicks field value
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetMaxPicksOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MaxPicks, true
}

// SetMaxPicks sets field value
func (o *TeaserBet) SetMaxPicks(v float64) {
	o.MaxPicks = v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *TeaserBet) GetPrice() float64 {
	if o == nil || o.Price == nil {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetPriceOk() (*float64, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *TeaserBet) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *TeaserBet) SetPrice(v float64) {
	o.Price = &v
}

// GetFinalPrice returns the FinalPrice field value if set, zero value otherwise.
func (o *TeaserBet) GetFinalPrice() float64 {
	if o == nil || o.FinalPrice == nil {
		var ret float64
		return ret
	}
	return *o.FinalPrice
}

// GetFinalPriceOk returns a tuple with the FinalPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetFinalPriceOk() (*float64, bool) {
	if o == nil || o.FinalPrice == nil {
		return nil, false
	}
	return o.FinalPrice, true
}

// HasFinalPrice returns a boolean if a field has been set.
func (o *TeaserBet) HasFinalPrice() bool {
	if o != nil && o.FinalPrice != nil {
		return true
	}

	return false
}

// SetFinalPrice gets a reference to the given float64 and assigns it to the FinalPrice field.
func (o *TeaserBet) SetFinalPrice(v float64) {
	o.FinalPrice = &v
}

// GetTeaserId returns the TeaserId field value if set, zero value otherwise.
func (o *TeaserBet) GetTeaserId() float32 {
	if o == nil || o.TeaserId == nil {
		var ret float32
		return ret
	}
	return *o.TeaserId
}

// GetTeaserIdOk returns a tuple with the TeaserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetTeaserIdOk() (*float32, bool) {
	if o == nil || o.TeaserId == nil {
		return nil, false
	}
	return o.TeaserId, true
}

// HasTeaserId returns a boolean if a field has been set.
func (o *TeaserBet) HasTeaserId() bool {
	if o != nil && o.TeaserId != nil {
		return true
	}

	return false
}

// SetTeaserId gets a reference to the given float32 and assigns it to the TeaserId field.
func (o *TeaserBet) SetTeaserId(v float32) {
	o.TeaserId = &v
}

// GetTeaserGroupId returns the TeaserGroupId field value if set, zero value otherwise.
func (o *TeaserBet) GetTeaserGroupId() float32 {
	if o == nil || o.TeaserGroupId == nil {
		var ret float32
		return ret
	}
	return *o.TeaserGroupId
}

// GetTeaserGroupIdOk returns a tuple with the TeaserGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetTeaserGroupIdOk() (*float32, bool) {
	if o == nil || o.TeaserGroupId == nil {
		return nil, false
	}
	return o.TeaserGroupId, true
}

// HasTeaserGroupId returns a boolean if a field has been set.
func (o *TeaserBet) HasTeaserGroupId() bool {
	if o != nil && o.TeaserGroupId != nil {
		return true
	}

	return false
}

// SetTeaserGroupId gets a reference to the given float32 and assigns it to the TeaserGroupId field.
func (o *TeaserBet) SetTeaserGroupId(v float32) {
	o.TeaserGroupId = &v
}

// GetLegs returns the Legs field value
func (o *TeaserBet) GetLegs() []TeaserLeg {
	if o == nil  {
		var ret []TeaserLeg
		return ret
	}

	return o.Legs
}

// GetLegsOk returns a tuple with the Legs field value
// and a boolean to check if the value has been set.
func (o *TeaserBet) GetLegsOk() (*[]TeaserLeg, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Legs, true
}

// SetLegs sets field value
func (o *TeaserBet) SetLegs(v []TeaserLeg) {
	o.Legs = v
}

func (o TeaserBet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["betId"] = o.BetId
	}
	if o.UniqueRequestId != nil {
		toSerialize["uniqueRequestId"] = o.UniqueRequestId
	}
	if true {
		toSerialize["wagerNumber"] = o.WagerNumber
	}
	if true {
		toSerialize["placedAt"] = o.PlacedAt
	}
	if true {
		toSerialize["betStatus"] = o.BetStatus
	}
	if true {
		toSerialize["betType"] = o.BetType
	}
	if true {
		toSerialize["win"] = o.Win
	}
	if true {
		toSerialize["risk"] = o.Risk
	}
	if o.WinLoss != nil {
		toSerialize["winLoss"] = o.WinLoss
	}
	if true {
		toSerialize["oddsFormat"] = o.OddsFormat
	}
	if o.CustomerCommission != nil {
		toSerialize["customerCommission"] = o.CustomerCommission
	}
	if o.CancellationReason != nil {
		toSerialize["cancellationReason"] = o.CancellationReason
	}
	if true {
		toSerialize["updateSequence"] = o.UpdateSequence
	}
	if true {
		toSerialize["teaserName"] = o.TeaserName
	}
	if true {
		toSerialize["isSameEventOnly"] = o.IsSameEventOnly
	}
	if true {
		toSerialize["minPicks"] = o.MinPicks
	}
	if true {
		toSerialize["maxPicks"] = o.MaxPicks
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.FinalPrice != nil {
		toSerialize["finalPrice"] = o.FinalPrice
	}
	if o.TeaserId != nil {
		toSerialize["teaserId"] = o.TeaserId
	}
	if o.TeaserGroupId != nil {
		toSerialize["teaserGroupId"] = o.TeaserGroupId
	}
	if true {
		toSerialize["legs"] = o.Legs
	}
	return json.Marshal(toSerialize)
}

type NullableTeaserBet struct {
	value *TeaserBet
	isSet bool
}

func (v NullableTeaserBet) Get() *TeaserBet {
	return v.value
}

func (v *NullableTeaserBet) Set(val *TeaserBet) {
	v.value = val
	v.isSet = true
}

func (v NullableTeaserBet) IsSet() bool {
	return v.isSet
}

func (v *NullableTeaserBet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeaserBet(val *TeaserBet) *NullableTeaserBet {
	return &NullableTeaserBet{value: val, isSet: true}
}

func (v NullableTeaserBet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeaserBet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
