/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package pinapi

import (
	"encoding/json"
)

// InRunningLeague struct for InRunningLeague
type InRunningLeague struct {
	// League Id
	Id *int `json:"id,omitempty"`
	// Events container
	Events *[]InRunningEvent `json:"events,omitempty"`
}

// NewInRunningLeague instantiates a new InRunningLeague object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInRunningLeague() *InRunningLeague {
	this := InRunningLeague{}
	return &this
}

// NewInRunningLeagueWithDefaults instantiates a new InRunningLeague object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInRunningLeagueWithDefaults() *InRunningLeague {
	this := InRunningLeague{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InRunningLeague) GetId() int {
	if o == nil || o.Id == nil {
		var ret int
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InRunningLeague) GetIdOk() (*int, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InRunningLeague) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int and assigns it to the Id field.
func (o *InRunningLeague) SetId(v int) {
	o.Id = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *InRunningLeague) GetEvents() []InRunningEvent {
	if o == nil || o.Events == nil {
		var ret []InRunningEvent
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InRunningLeague) GetEventsOk() (*[]InRunningEvent, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *InRunningLeague) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []InRunningEvent and assigns it to the Events field.
func (o *InRunningLeague) SetEvents(v []InRunningEvent) {
	o.Events = &v
}

func (o InRunningLeague) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	return json.Marshal(toSerialize)
}

type NullableInRunningLeague struct {
	value *InRunningLeague
	isSet bool
}

func (v NullableInRunningLeague) Get() *InRunningLeague {
	return v.value
}

func (v *NullableInRunningLeague) Set(val *InRunningLeague) {
	v.value = val
	v.isSet = true
}

func (v NullableInRunningLeague) IsSet() bool {
	return v.isSet
}

func (v *NullableInRunningLeague) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInRunningLeague(val *InRunningLeague) *NullableInRunningLeague {
	return &NullableInRunningLeague{value: val, isSet: true}
}

func (v NullableInRunningLeague) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInRunningLeague) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
