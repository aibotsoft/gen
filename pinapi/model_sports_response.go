/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package pinapi

import (
	"encoding/json"
)

// SportsResponse struct for SportsResponse
type SportsResponse struct {
	// Sports container.
	Sports *[]Sport `json:"sports,omitempty"`
}

// NewSportsResponse instantiates a new SportsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSportsResponse() *SportsResponse {
	this := SportsResponse{}
	return &this
}

// NewSportsResponseWithDefaults instantiates a new SportsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSportsResponseWithDefaults() *SportsResponse {
	this := SportsResponse{}
	return &this
}

// GetSports returns the Sports field value if set, zero value otherwise.
func (o *SportsResponse) GetSports() []Sport {
	if o == nil || o.Sports == nil {
		var ret []Sport
		return ret
	}
	return *o.Sports
}

// GetSportsOk returns a tuple with the Sports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SportsResponse) GetSportsOk() (*[]Sport, bool) {
	if o == nil || o.Sports == nil {
		return nil, false
	}
	return o.Sports, true
}

// HasSports returns a boolean if a field has been set.
func (o *SportsResponse) HasSports() bool {
	if o != nil && o.Sports != nil {
		return true
	}

	return false
}

// SetSports gets a reference to the given []Sport and assigns it to the Sports field.
func (o *SportsResponse) SetSports(v []Sport) {
	o.Sports = &v
}

func (o SportsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Sports != nil {
		toSerialize["sports"] = o.Sports
	}
	return json.Marshal(toSerialize)
}

type NullableSportsResponse struct {
	value *SportsResponse
	isSet bool
}

func (v NullableSportsResponse) Get() *SportsResponse {
	return v.value
}

func (v *NullableSportsResponse) Set(val *SportsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSportsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSportsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSportsResponse(val *SportsResponse) *NullableSportsResponse {
	return &NullableSportsResponse{value: val, isSet: true}
}

func (v NullableSportsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSportsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
