/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pinapi

import (
	"bytes"
	"encoding/json"
)

// SettledFixturesSport struct for SettledFixturesSport
type SettledFixturesSport struct {
	// Same as requested sport Id.
	SportId *int32 `json:"sportId,omitempty" xml:"sportId"`
	// Use this value for the subsequent requests for since query parameter to get just the changes since previous response.
	Last *int64 `json:"last,omitempty" xml:"last"`
	// Contains a list of Leagues.
	Leagues *[]SettledFixturesLeague `json:"leagues,omitempty" xml:"leagues"`
}

// GetSportId returns the SportId field value if set, zero value otherwise.
func (o *SettledFixturesSport) GetSportId() int32 {
	if o == nil || o.SportId == nil {
		var ret int32
		return ret
	}
	return *o.SportId
}

// GetSportIdOk returns a tuple with the SportId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SettledFixturesSport) GetSportIdOk() (int32, bool) {
	if o == nil || o.SportId == nil {
		var ret int32
		return ret, false
	}
	return *o.SportId, true
}

// HasSportId returns a boolean if a field has been set.
func (o *SettledFixturesSport) HasSportId() bool {
	if o != nil && o.SportId != nil {
		return true
	}

	return false
}

// SetSportId gets a reference to the given int32 and assigns it to the SportId field.
func (o *SettledFixturesSport) SetSportId(v int32) {
	o.SportId = &v
}

// GetLast returns the Last field value if set, zero value otherwise.
func (o *SettledFixturesSport) GetLast() int64 {
	if o == nil || o.Last == nil {
		var ret int64
		return ret
	}
	return *o.Last
}

// GetLastOk returns a tuple with the Last field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SettledFixturesSport) GetLastOk() (int64, bool) {
	if o == nil || o.Last == nil {
		var ret int64
		return ret, false
	}
	return *o.Last, true
}

// HasLast returns a boolean if a field has been set.
func (o *SettledFixturesSport) HasLast() bool {
	if o != nil && o.Last != nil {
		return true
	}

	return false
}

// SetLast gets a reference to the given int64 and assigns it to the Last field.
func (o *SettledFixturesSport) SetLast(v int64) {
	o.Last = &v
}

// GetLeagues returns the Leagues field value if set, zero value otherwise.
func (o *SettledFixturesSport) GetLeagues() []SettledFixturesLeague {
	if o == nil || o.Leagues == nil {
		var ret []SettledFixturesLeague
		return ret
	}
	return *o.Leagues
}

// GetLeaguesOk returns a tuple with the Leagues field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SettledFixturesSport) GetLeaguesOk() ([]SettledFixturesLeague, bool) {
	if o == nil || o.Leagues == nil {
		var ret []SettledFixturesLeague
		return ret, false
	}
	return *o.Leagues, true
}

// HasLeagues returns a boolean if a field has been set.
func (o *SettledFixturesSport) HasLeagues() bool {
	if o != nil && o.Leagues != nil {
		return true
	}

	return false
}

// SetLeagues gets a reference to the given []SettledFixturesLeague and assigns it to the Leagues field.
func (o *SettledFixturesSport) SetLeagues(v []SettledFixturesLeague) {
	o.Leagues = &v
}

type NullableSettledFixturesSport struct {
	Value        SettledFixturesSport
	ExplicitNull bool
}

func (v NullableSettledFixturesSport) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableSettledFixturesSport) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
