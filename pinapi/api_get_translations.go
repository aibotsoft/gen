/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package pinapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// GetTranslationsApiService GetTranslationsApi service
type GetTranslationsApiService service

type apiTranslationsV1GetRequest struct {
	ctx _context.Context
	apiService *GetTranslationsApiService
	cultureCodes *[]string
	baseTexts *[]string
}


func (r apiTranslationsV1GetRequest) CultureCodes(cultureCodes []string) apiTranslationsV1GetRequest {
	r.cultureCodes = &cultureCodes
	return r
}

func (r apiTranslationsV1GetRequest) BaseTexts(baseTexts []string) apiTranslationsV1GetRequest {
	r.baseTexts = &baseTexts
	return r
}

/*
TranslationsV1Get Get Translations - v1
Returns language translations.   Example to translate `football` and `soccer` to German and French language: 

  ```
  https://api.pinnacle.com/v1/translations?cultureCodes=de-DE|fr-FR&baseTexts=Football|Soccer
  
  ```
  ## Supported languages 
  
  | Language   | Culture |
  |------------|---------|
  | English    | en-US   |
  | British    | en-GB   |
  | ChineseSI  | zh-CN   |
  | ChineseTR  | zh-TW   |
  | Finnish    | fi-FI   |
  | German     | de-DE   |
  | Hebrew     | he-IL   |
  | Italian    | it-IT   |
  | Norwegian  | nb-NO   |
  | Portuguese | pt-BR   |
  | Russian    | ru-RU   |
  | Spanish    | es-ES   |
  | Swedish    | sv-SE   |
  | Thai       | th-TH   |
  | Polish     | pl-PL   |
  | French     | fr-FR   |
  | Japanese   | ja-JP   |
  | Korean     | ko-KR   |
  | Vietnamese | vi-VN   |
  | Indonesian | id-ID   |
  | Czech      | cs-CZ   |

 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return apiTranslationsV1GetRequest
*/
func (a *GetTranslationsApiService) TranslationsV1Get(ctx _context.Context) apiTranslationsV1GetRequest {
	return apiTranslationsV1GetRequest{
		apiService: a,
		ctx: ctx,
	}
}

/*
Execute executes the request
 @return TranslationResponse
*/
func (r apiTranslationsV1GetRequest) Execute() (TranslationResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TranslationResponse
	)

	localBasePath, err := r.apiService.client.cfg.ServerURLWithContext(r.ctx, "GetTranslationsApiService.TranslationsV1Get")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/translations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	
	if r.cultureCodes == nil {
		return localVarReturnValue, nil, reportError("cultureCodes is required and must be specified")
	}
	
	if r.baseTexts == nil {
		return localVarReturnValue, nil, reportError("baseTexts is required and must be specified")
	}

	localVarQueryParams.Add("cultureCodes", parameterToString(*r.cultureCodes, "pipe"))
	localVarQueryParams.Add("baseTexts", parameterToString(*r.baseTexts, "pipe"))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := r.apiService.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := r.apiService.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ExtendedErrorResponse
			err = r.apiService.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = r.apiService.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
