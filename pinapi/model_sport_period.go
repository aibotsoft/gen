/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
)

// SportPeriod struct for SportPeriod
type SportPeriod struct {
	// Periods container
	Periods *[]Period `json:"periods,omitempty"`
}

// NewSportPeriod instantiates a new SportPeriod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSportPeriod() *SportPeriod {
	this := SportPeriod{}
	return &this
}

// NewSportPeriodWithDefaults instantiates a new SportPeriod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSportPeriodWithDefaults() *SportPeriod {
	this := SportPeriod{}
	return &this
}

// GetPeriods returns the Periods field value if set, zero value otherwise.
func (o *SportPeriod) GetPeriods() []Period {
	if o == nil || o.Periods == nil {
		var ret []Period
		return ret
	}
	return *o.Periods
}

// GetPeriodsOk returns a tuple with the Periods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SportPeriod) GetPeriodsOk() (*[]Period, bool) {
	if o == nil || o.Periods == nil {
		return nil, false
	}
	return o.Periods, true
}

// HasPeriods returns a boolean if a field has been set.
func (o *SportPeriod) HasPeriods() bool {
	if o != nil && o.Periods != nil {
		return true
	}

	return false
}

// SetPeriods gets a reference to the given []Period and assigns it to the Periods field.
func (o *SportPeriod) SetPeriods(v []Period) {
	o.Periods = &v
}

func (o SportPeriod) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Periods != nil {
		toSerialize["periods"] = o.Periods
	}
	return json.Marshal(toSerialize)
}

type NullableSportPeriod struct {
	value *SportPeriod
	isSet bool
}

func (v NullableSportPeriod) Get() *SportPeriod {
	return v.value
}

func (v *NullableSportPeriod) Set(val *SportPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableSportPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableSportPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSportPeriod(val *SportPeriod) *NullableSportPeriod {
	return &NullableSportPeriod{value: val, isSet: true}
}

func (v NullableSportPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSportPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
