/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
)

// OddsEvent struct for OddsEvent
type OddsEvent struct {
	// Event Id.
	Id *int64 `json:"id,omitempty"`
	// Away team score. Only for live soccer events.Supported only for full match period (number=0).
	AwayScore *float64 `json:"awayScore,omitempty"`
	// Home team score. Only for live soccer events.Supported only for full match period (number=0).
	HomeScore *float64 `json:"homeScore,omitempty"`
	// Away team red cards. Only for live soccer events. Supported only for full match period (number=0).
	AwayRedCards *int `json:"awayRedCards,omitempty"`
	// Home team red cards. Only for live soccer events.Supported only for full match period (number=0).
	HomeRedCards *int `json:"homeRedCards,omitempty"`
	// Contains a list of periods.
	Periods *[]OddsPeriod `json:"periods,omitempty"`
}

// NewOddsEvent instantiates a new OddsEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOddsEvent() *OddsEvent {
	this := OddsEvent{}
	return &this
}

// NewOddsEventWithDefaults instantiates a new OddsEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOddsEventWithDefaults() *OddsEvent {
	this := OddsEvent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OddsEvent) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OddsEvent) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OddsEvent) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *OddsEvent) SetId(v int64) {
	o.Id = &v
}

// GetAwayScore returns the AwayScore field value if set, zero value otherwise.
func (o *OddsEvent) GetAwayScore() float64 {
	if o == nil || o.AwayScore == nil {
		var ret float64
		return ret
	}
	return *o.AwayScore
}

// GetAwayScoreOk returns a tuple with the AwayScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OddsEvent) GetAwayScoreOk() (*float64, bool) {
	if o == nil || o.AwayScore == nil {
		return nil, false
	}
	return o.AwayScore, true
}

// HasAwayScore returns a boolean if a field has been set.
func (o *OddsEvent) HasAwayScore() bool {
	if o != nil && o.AwayScore != nil {
		return true
	}

	return false
}

// SetAwayScore gets a reference to the given float64 and assigns it to the AwayScore field.
func (o *OddsEvent) SetAwayScore(v float64) {
	o.AwayScore = &v
}

// GetHomeScore returns the HomeScore field value if set, zero value otherwise.
func (o *OddsEvent) GetHomeScore() float64 {
	if o == nil || o.HomeScore == nil {
		var ret float64
		return ret
	}
	return *o.HomeScore
}

// GetHomeScoreOk returns a tuple with the HomeScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OddsEvent) GetHomeScoreOk() (*float64, bool) {
	if o == nil || o.HomeScore == nil {
		return nil, false
	}
	return o.HomeScore, true
}

// HasHomeScore returns a boolean if a field has been set.
func (o *OddsEvent) HasHomeScore() bool {
	if o != nil && o.HomeScore != nil {
		return true
	}

	return false
}

// SetHomeScore gets a reference to the given float64 and assigns it to the HomeScore field.
func (o *OddsEvent) SetHomeScore(v float64) {
	o.HomeScore = &v
}

// GetAwayRedCards returns the AwayRedCards field value if set, zero value otherwise.
func (o *OddsEvent) GetAwayRedCards() int {
	if o == nil || o.AwayRedCards == nil {
		var ret int
		return ret
	}
	return *o.AwayRedCards
}

// GetAwayRedCardsOk returns a tuple with the AwayRedCards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OddsEvent) GetAwayRedCardsOk() (*int, bool) {
	if o == nil || o.AwayRedCards == nil {
		return nil, false
	}
	return o.AwayRedCards, true
}

// HasAwayRedCards returns a boolean if a field has been set.
func (o *OddsEvent) HasAwayRedCards() bool {
	if o != nil && o.AwayRedCards != nil {
		return true
	}

	return false
}

// SetAwayRedCards gets a reference to the given int and assigns it to the AwayRedCards field.
func (o *OddsEvent) SetAwayRedCards(v int) {
	o.AwayRedCards = &v
}

// GetHomeRedCards returns the HomeRedCards field value if set, zero value otherwise.
func (o *OddsEvent) GetHomeRedCards() int {
	if o == nil || o.HomeRedCards == nil {
		var ret int
		return ret
	}
	return *o.HomeRedCards
}

// GetHomeRedCardsOk returns a tuple with the HomeRedCards field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OddsEvent) GetHomeRedCardsOk() (*int, bool) {
	if o == nil || o.HomeRedCards == nil {
		return nil, false
	}
	return o.HomeRedCards, true
}

// HasHomeRedCards returns a boolean if a field has been set.
func (o *OddsEvent) HasHomeRedCards() bool {
	if o != nil && o.HomeRedCards != nil {
		return true
	}

	return false
}

// SetHomeRedCards gets a reference to the given int and assigns it to the HomeRedCards field.
func (o *OddsEvent) SetHomeRedCards(v int) {
	o.HomeRedCards = &v
}

// GetPeriods returns the Periods field value if set, zero value otherwise.
func (o *OddsEvent) GetPeriods() []OddsPeriod {
	if o == nil || o.Periods == nil {
		var ret []OddsPeriod
		return ret
	}
	return *o.Periods
}

// GetPeriodsOk returns a tuple with the Periods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OddsEvent) GetPeriodsOk() (*[]OddsPeriod, bool) {
	if o == nil || o.Periods == nil {
		return nil, false
	}
	return o.Periods, true
}

// HasPeriods returns a boolean if a field has been set.
func (o *OddsEvent) HasPeriods() bool {
	if o != nil && o.Periods != nil {
		return true
	}

	return false
}

// SetPeriods gets a reference to the given []OddsPeriod and assigns it to the Periods field.
func (o *OddsEvent) SetPeriods(v []OddsPeriod) {
	o.Periods = &v
}

func (o OddsEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.AwayScore != nil {
		toSerialize["awayScore"] = o.AwayScore
	}
	if o.HomeScore != nil {
		toSerialize["homeScore"] = o.HomeScore
	}
	if o.AwayRedCards != nil {
		toSerialize["awayRedCards"] = o.AwayRedCards
	}
	if o.HomeRedCards != nil {
		toSerialize["homeRedCards"] = o.HomeRedCards
	}
	if o.Periods != nil {
		toSerialize["periods"] = o.Periods
	}
	return json.Marshal(toSerialize)
}

type NullableOddsEvent struct {
	value *OddsEvent
	isSet bool
}

func (v NullableOddsEvent) Get() *OddsEvent {
	return v.value
}

func (v *NullableOddsEvent) Set(val *OddsEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableOddsEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableOddsEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOddsEvent(val *OddsEvent) *NullableOddsEvent {
	return &NullableOddsEvent{value: val, isSet: true}
}

func (v NullableOddsEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOddsEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
