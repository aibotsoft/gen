/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package pinapi

import (
	"encoding/json"
	"time"
)

// ParlayLeg struct for ParlayLeg
type ParlayLeg struct {
	SportId *int `json:"sportId,omitempty"`
	// Parlay leg type.
	LegBetType *string `json:"legBetType,omitempty"`
	// Parlay Leg status. CANCELLED = The leg is canceled- the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,   LOSE = The leg is a loss or a push-lose. When Push-lose happens, the half of the stake on the leg will be pushed to the next leg, and the other half will be a lose. This can happen only when the leg is placed on a quarter points handicap,   PUSH = The leg is a push - the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,   REFUNDED = The leg is refunded - the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,   WON = The leg is a won or a push-won. When Push-won happens, the half of the stake on the leg will be pushed to the next leg, and the other half is won. This can happen only when the leg is placed on a quarter points handicap  
	LegBetStatus *string `json:"legBetStatus,omitempty"`
	LeagueId *int `json:"leagueId,omitempty"`
	EventId *int64 `json:"eventId,omitempty"`
	// Date time when the event starts.
	EventStartTime *time.Time `json:"eventStartTime,omitempty"`
	Handicap NullableFloat64 `json:"handicap,omitempty"`
	Price *float64 `json:"price,omitempty"`
	TeamName *string `json:"teamName,omitempty"`
	// Side type.
	Side NullableString `json:"side,omitempty"`
	Pitcher1 NullableString `json:"pitcher1,omitempty"`
	Pitcher2 NullableString `json:"pitcher2,omitempty"`
	Pitcher1MustStart *bool `json:"pitcher1MustStart,omitempty"`
	Pitcher2MustStart *bool `json:"pitcher2MustStart,omitempty"`
	// Wellington Phoenix
	Team1 *string `json:"team1,omitempty"`
	// Adelaide United
	Team2 *string `json:"team2,omitempty"`
	PeriodNumber *int `json:"periodNumber,omitempty"`
	// Full time team 1 score
	FtTeam1Score NullableFloat64 `json:"ftTeam1Score,omitempty"`
	// Full time team 2 score
	FtTeam2Score NullableFloat64 `json:"ftTeam2Score,omitempty"`
	// End of period team 1 score. If the bet was placed on Game period (periodNumber =0) , this will be null
	PTeam1Score NullableFloat64 `json:"pTeam1Score,omitempty"`
	// End of period team 2 score. If the bet was placed on Game period (periodNumber =0) , this will be null
	PTeam2Score NullableFloat64 `json:"pTeam2Score,omitempty"`
	CancellationReason *CancellationReason `json:"cancellationReason,omitempty"`
}

// NewParlayLeg instantiates a new ParlayLeg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParlayLeg() *ParlayLeg {
	this := ParlayLeg{}
	return &this
}

// NewParlayLegWithDefaults instantiates a new ParlayLeg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParlayLegWithDefaults() *ParlayLeg {
	this := ParlayLeg{}
	return &this
}

// GetSportId returns the SportId field value if set, zero value otherwise.
func (o *ParlayLeg) GetSportId() int {
	if o == nil || o.SportId == nil {
		var ret int
		return ret
	}
	return *o.SportId
}

// GetSportIdOk returns a tuple with the SportId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayLeg) GetSportIdOk() (*int, bool) {
	if o == nil || o.SportId == nil {
		return nil, false
	}
	return o.SportId, true
}

// HasSportId returns a boolean if a field has been set.
func (o *ParlayLeg) HasSportId() bool {
	if o != nil && o.SportId != nil {
		return true
	}

	return false
}

// SetSportId gets a reference to the given int and assigns it to the SportId field.
func (o *ParlayLeg) SetSportId(v int) {
	o.SportId = &v
}

// GetLegBetType returns the LegBetType field value if set, zero value otherwise.
func (o *ParlayLeg) GetLegBetType() string {
	if o == nil || o.LegBetType == nil {
		var ret string
		return ret
	}
	return *o.LegBetType
}

// GetLegBetTypeOk returns a tuple with the LegBetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayLeg) GetLegBetTypeOk() (*string, bool) {
	if o == nil || o.LegBetType == nil {
		return nil, false
	}
	return o.LegBetType, true
}

// HasLegBetType returns a boolean if a field has been set.
func (o *ParlayLeg) HasLegBetType() bool {
	if o != nil && o.LegBetType != nil {
		return true
	}

	return false
}

// SetLegBetType gets a reference to the given string and assigns it to the LegBetType field.
func (o *ParlayLeg) SetLegBetType(v string) {
	o.LegBetType = &v
}

// GetLegBetStatus returns the LegBetStatus field value if set, zero value otherwise.
func (o *ParlayLeg) GetLegBetStatus() string {
	if o == nil || o.LegBetStatus == nil {
		var ret string
		return ret
	}
	return *o.LegBetStatus
}

// GetLegBetStatusOk returns a tuple with the LegBetStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayLeg) GetLegBetStatusOk() (*string, bool) {
	if o == nil || o.LegBetStatus == nil {
		return nil, false
	}
	return o.LegBetStatus, true
}

// HasLegBetStatus returns a boolean if a field has been set.
func (o *ParlayLeg) HasLegBetStatus() bool {
	if o != nil && o.LegBetStatus != nil {
		return true
	}

	return false
}

// SetLegBetStatus gets a reference to the given string and assigns it to the LegBetStatus field.
func (o *ParlayLeg) SetLegBetStatus(v string) {
	o.LegBetStatus = &v
}

// GetLeagueId returns the LeagueId field value if set, zero value otherwise.
func (o *ParlayLeg) GetLeagueId() int {
	if o == nil || o.LeagueId == nil {
		var ret int
		return ret
	}
	return *o.LeagueId
}

// GetLeagueIdOk returns a tuple with the LeagueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayLeg) GetLeagueIdOk() (*int, bool) {
	if o == nil || o.LeagueId == nil {
		return nil, false
	}
	return o.LeagueId, true
}

// HasLeagueId returns a boolean if a field has been set.
func (o *ParlayLeg) HasLeagueId() bool {
	if o != nil && o.LeagueId != nil {
		return true
	}

	return false
}

// SetLeagueId gets a reference to the given int and assigns it to the LeagueId field.
func (o *ParlayLeg) SetLeagueId(v int) {
	o.LeagueId = &v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *ParlayLeg) GetEventId() int64 {
	if o == nil || o.EventId == nil {
		var ret int64
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayLeg) GetEventIdOk() (*int64, bool) {
	if o == nil || o.EventId == nil {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *ParlayLeg) HasEventId() bool {
	if o != nil && o.EventId != nil {
		return true
	}

	return false
}

// SetEventId gets a reference to the given int64 and assigns it to the EventId field.
func (o *ParlayLeg) SetEventId(v int64) {
	o.EventId = &v
}

// GetEventStartTime returns the EventStartTime field value if set, zero value otherwise.
func (o *ParlayLeg) GetEventStartTime() time.Time {
	if o == nil || o.EventStartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EventStartTime
}

// GetEventStartTimeOk returns a tuple with the EventStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayLeg) GetEventStartTimeOk() (*time.Time, bool) {
	if o == nil || o.EventStartTime == nil {
		return nil, false
	}
	return o.EventStartTime, true
}

// HasEventStartTime returns a boolean if a field has been set.
func (o *ParlayLeg) HasEventStartTime() bool {
	if o != nil && o.EventStartTime != nil {
		return true
	}

	return false
}

// SetEventStartTime gets a reference to the given time.Time and assigns it to the EventStartTime field.
func (o *ParlayLeg) SetEventStartTime(v time.Time) {
	o.EventStartTime = &v
}

// GetHandicap returns the Handicap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParlayLeg) GetHandicap() float64 {
	if o == nil || o.Handicap.Get() == nil {
		var ret float64
		return ret
	}
	return *o.Handicap.Get()
}

// GetHandicapOk returns a tuple with the Handicap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParlayLeg) GetHandicapOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Handicap.Get(), o.Handicap.IsSet()
}

// HasHandicap returns a boolean if a field has been set.
func (o *ParlayLeg) HasHandicap() bool {
	if o != nil && o.Handicap.IsSet() {
		return true
	}

	return false
}

// SetHandicap gets a reference to the given NullableFloat64 and assigns it to the Handicap field.
func (o *ParlayLeg) SetHandicap(v float64) {
	o.Handicap.Set(&v)
}
// SetHandicapNil sets the value for Handicap to be an explicit nil
func (o *ParlayLeg) SetHandicapNil() {
	o.Handicap.Set(nil)
}

// UnsetHandicap ensures that no value is present for Handicap, not even an explicit nil
func (o *ParlayLeg) UnsetHandicap() {
	o.Handicap.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *ParlayLeg) GetPrice() float64 {
	if o == nil || o.Price == nil {
		var ret float64
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayLeg) GetPriceOk() (*float64, bool) {
	if o == nil || o.Price == nil {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *ParlayLeg) HasPrice() bool {
	if o != nil && o.Price != nil {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float64 and assigns it to the Price field.
func (o *ParlayLeg) SetPrice(v float64) {
	o.Price = &v
}

// GetTeamName returns the TeamName field value if set, zero value otherwise.
func (o *ParlayLeg) GetTeamName() string {
	if o == nil || o.TeamName == nil {
		var ret string
		return ret
	}
	return *o.TeamName
}

// GetTeamNameOk returns a tuple with the TeamName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayLeg) GetTeamNameOk() (*string, bool) {
	if o == nil || o.TeamName == nil {
		return nil, false
	}
	return o.TeamName, true
}

// HasTeamName returns a boolean if a field has been set.
func (o *ParlayLeg) HasTeamName() bool {
	if o != nil && o.TeamName != nil {
		return true
	}

	return false
}

// SetTeamName gets a reference to the given string and assigns it to the TeamName field.
func (o *ParlayLeg) SetTeamName(v string) {
	o.TeamName = &v
}

// GetSide returns the Side field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParlayLeg) GetSide() string {
	if o == nil || o.Side.Get() == nil {
		var ret string
		return ret
	}
	return *o.Side.Get()
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParlayLeg) GetSideOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Side.Get(), o.Side.IsSet()
}

// HasSide returns a boolean if a field has been set.
func (o *ParlayLeg) HasSide() bool {
	if o != nil && o.Side.IsSet() {
		return true
	}

	return false
}

// SetSide gets a reference to the given NullableString and assigns it to the Side field.
func (o *ParlayLeg) SetSide(v string) {
	o.Side.Set(&v)
}
// SetSideNil sets the value for Side to be an explicit nil
func (o *ParlayLeg) SetSideNil() {
	o.Side.Set(nil)
}

// UnsetSide ensures that no value is present for Side, not even an explicit nil
func (o *ParlayLeg) UnsetSide() {
	o.Side.Unset()
}

// GetPitcher1 returns the Pitcher1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParlayLeg) GetPitcher1() string {
	if o == nil || o.Pitcher1.Get() == nil {
		var ret string
		return ret
	}
	return *o.Pitcher1.Get()
}

// GetPitcher1Ok returns a tuple with the Pitcher1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParlayLeg) GetPitcher1Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Pitcher1.Get(), o.Pitcher1.IsSet()
}

// HasPitcher1 returns a boolean if a field has been set.
func (o *ParlayLeg) HasPitcher1() bool {
	if o != nil && o.Pitcher1.IsSet() {
		return true
	}

	return false
}

// SetPitcher1 gets a reference to the given NullableString and assigns it to the Pitcher1 field.
func (o *ParlayLeg) SetPitcher1(v string) {
	o.Pitcher1.Set(&v)
}
// SetPitcher1Nil sets the value for Pitcher1 to be an explicit nil
func (o *ParlayLeg) SetPitcher1Nil() {
	o.Pitcher1.Set(nil)
}

// UnsetPitcher1 ensures that no value is present for Pitcher1, not even an explicit nil
func (o *ParlayLeg) UnsetPitcher1() {
	o.Pitcher1.Unset()
}

// GetPitcher2 returns the Pitcher2 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParlayLeg) GetPitcher2() string {
	if o == nil || o.Pitcher2.Get() == nil {
		var ret string
		return ret
	}
	return *o.Pitcher2.Get()
}

// GetPitcher2Ok returns a tuple with the Pitcher2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParlayLeg) GetPitcher2Ok() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Pitcher2.Get(), o.Pitcher2.IsSet()
}

// HasPitcher2 returns a boolean if a field has been set.
func (o *ParlayLeg) HasPitcher2() bool {
	if o != nil && o.Pitcher2.IsSet() {
		return true
	}

	return false
}

// SetPitcher2 gets a reference to the given NullableString and assigns it to the Pitcher2 field.
func (o *ParlayLeg) SetPitcher2(v string) {
	o.Pitcher2.Set(&v)
}
// SetPitcher2Nil sets the value for Pitcher2 to be an explicit nil
func (o *ParlayLeg) SetPitcher2Nil() {
	o.Pitcher2.Set(nil)
}

// UnsetPitcher2 ensures that no value is present for Pitcher2, not even an explicit nil
func (o *ParlayLeg) UnsetPitcher2() {
	o.Pitcher2.Unset()
}

// GetPitcher1MustStart returns the Pitcher1MustStart field value if set, zero value otherwise.
func (o *ParlayLeg) GetPitcher1MustStart() bool {
	if o == nil || o.Pitcher1MustStart == nil {
		var ret bool
		return ret
	}
	return *o.Pitcher1MustStart
}

// GetPitcher1MustStartOk returns a tuple with the Pitcher1MustStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayLeg) GetPitcher1MustStartOk() (*bool, bool) {
	if o == nil || o.Pitcher1MustStart == nil {
		return nil, false
	}
	return o.Pitcher1MustStart, true
}

// HasPitcher1MustStart returns a boolean if a field has been set.
func (o *ParlayLeg) HasPitcher1MustStart() bool {
	if o != nil && o.Pitcher1MustStart != nil {
		return true
	}

	return false
}

// SetPitcher1MustStart gets a reference to the given bool and assigns it to the Pitcher1MustStart field.
func (o *ParlayLeg) SetPitcher1MustStart(v bool) {
	o.Pitcher1MustStart = &v
}

// GetPitcher2MustStart returns the Pitcher2MustStart field value if set, zero value otherwise.
func (o *ParlayLeg) GetPitcher2MustStart() bool {
	if o == nil || o.Pitcher2MustStart == nil {
		var ret bool
		return ret
	}
	return *o.Pitcher2MustStart
}

// GetPitcher2MustStartOk returns a tuple with the Pitcher2MustStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayLeg) GetPitcher2MustStartOk() (*bool, bool) {
	if o == nil || o.Pitcher2MustStart == nil {
		return nil, false
	}
	return o.Pitcher2MustStart, true
}

// HasPitcher2MustStart returns a boolean if a field has been set.
func (o *ParlayLeg) HasPitcher2MustStart() bool {
	if o != nil && o.Pitcher2MustStart != nil {
		return true
	}

	return false
}

// SetPitcher2MustStart gets a reference to the given bool and assigns it to the Pitcher2MustStart field.
func (o *ParlayLeg) SetPitcher2MustStart(v bool) {
	o.Pitcher2MustStart = &v
}

// GetTeam1 returns the Team1 field value if set, zero value otherwise.
func (o *ParlayLeg) GetTeam1() string {
	if o == nil || o.Team1 == nil {
		var ret string
		return ret
	}
	return *o.Team1
}

// GetTeam1Ok returns a tuple with the Team1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayLeg) GetTeam1Ok() (*string, bool) {
	if o == nil || o.Team1 == nil {
		return nil, false
	}
	return o.Team1, true
}

// HasTeam1 returns a boolean if a field has been set.
func (o *ParlayLeg) HasTeam1() bool {
	if o != nil && o.Team1 != nil {
		return true
	}

	return false
}

// SetTeam1 gets a reference to the given string and assigns it to the Team1 field.
func (o *ParlayLeg) SetTeam1(v string) {
	o.Team1 = &v
}

// GetTeam2 returns the Team2 field value if set, zero value otherwise.
func (o *ParlayLeg) GetTeam2() string {
	if o == nil || o.Team2 == nil {
		var ret string
		return ret
	}
	return *o.Team2
}

// GetTeam2Ok returns a tuple with the Team2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayLeg) GetTeam2Ok() (*string, bool) {
	if o == nil || o.Team2 == nil {
		return nil, false
	}
	return o.Team2, true
}

// HasTeam2 returns a boolean if a field has been set.
func (o *ParlayLeg) HasTeam2() bool {
	if o != nil && o.Team2 != nil {
		return true
	}

	return false
}

// SetTeam2 gets a reference to the given string and assigns it to the Team2 field.
func (o *ParlayLeg) SetTeam2(v string) {
	o.Team2 = &v
}

// GetPeriodNumber returns the PeriodNumber field value if set, zero value otherwise.
func (o *ParlayLeg) GetPeriodNumber() int {
	if o == nil || o.PeriodNumber == nil {
		var ret int
		return ret
	}
	return *o.PeriodNumber
}

// GetPeriodNumberOk returns a tuple with the PeriodNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayLeg) GetPeriodNumberOk() (*int, bool) {
	if o == nil || o.PeriodNumber == nil {
		return nil, false
	}
	return o.PeriodNumber, true
}

// HasPeriodNumber returns a boolean if a field has been set.
func (o *ParlayLeg) HasPeriodNumber() bool {
	if o != nil && o.PeriodNumber != nil {
		return true
	}

	return false
}

// SetPeriodNumber gets a reference to the given int and assigns it to the PeriodNumber field.
func (o *ParlayLeg) SetPeriodNumber(v int) {
	o.PeriodNumber = &v
}

// GetFtTeam1Score returns the FtTeam1Score field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParlayLeg) GetFtTeam1Score() float64 {
	if o == nil || o.FtTeam1Score.Get() == nil {
		var ret float64
		return ret
	}
	return *o.FtTeam1Score.Get()
}

// GetFtTeam1ScoreOk returns a tuple with the FtTeam1Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParlayLeg) GetFtTeam1ScoreOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FtTeam1Score.Get(), o.FtTeam1Score.IsSet()
}

// HasFtTeam1Score returns a boolean if a field has been set.
func (o *ParlayLeg) HasFtTeam1Score() bool {
	if o != nil && o.FtTeam1Score.IsSet() {
		return true
	}

	return false
}

// SetFtTeam1Score gets a reference to the given NullableFloat64 and assigns it to the FtTeam1Score field.
func (o *ParlayLeg) SetFtTeam1Score(v float64) {
	o.FtTeam1Score.Set(&v)
}
// SetFtTeam1ScoreNil sets the value for FtTeam1Score to be an explicit nil
func (o *ParlayLeg) SetFtTeam1ScoreNil() {
	o.FtTeam1Score.Set(nil)
}

// UnsetFtTeam1Score ensures that no value is present for FtTeam1Score, not even an explicit nil
func (o *ParlayLeg) UnsetFtTeam1Score() {
	o.FtTeam1Score.Unset()
}

// GetFtTeam2Score returns the FtTeam2Score field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParlayLeg) GetFtTeam2Score() float64 {
	if o == nil || o.FtTeam2Score.Get() == nil {
		var ret float64
		return ret
	}
	return *o.FtTeam2Score.Get()
}

// GetFtTeam2ScoreOk returns a tuple with the FtTeam2Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParlayLeg) GetFtTeam2ScoreOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FtTeam2Score.Get(), o.FtTeam2Score.IsSet()
}

// HasFtTeam2Score returns a boolean if a field has been set.
func (o *ParlayLeg) HasFtTeam2Score() bool {
	if o != nil && o.FtTeam2Score.IsSet() {
		return true
	}

	return false
}

// SetFtTeam2Score gets a reference to the given NullableFloat64 and assigns it to the FtTeam2Score field.
func (o *ParlayLeg) SetFtTeam2Score(v float64) {
	o.FtTeam2Score.Set(&v)
}
// SetFtTeam2ScoreNil sets the value for FtTeam2Score to be an explicit nil
func (o *ParlayLeg) SetFtTeam2ScoreNil() {
	o.FtTeam2Score.Set(nil)
}

// UnsetFtTeam2Score ensures that no value is present for FtTeam2Score, not even an explicit nil
func (o *ParlayLeg) UnsetFtTeam2Score() {
	o.FtTeam2Score.Unset()
}

// GetPTeam1Score returns the PTeam1Score field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParlayLeg) GetPTeam1Score() float64 {
	if o == nil || o.PTeam1Score.Get() == nil {
		var ret float64
		return ret
	}
	return *o.PTeam1Score.Get()
}

// GetPTeam1ScoreOk returns a tuple with the PTeam1Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParlayLeg) GetPTeam1ScoreOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PTeam1Score.Get(), o.PTeam1Score.IsSet()
}

// HasPTeam1Score returns a boolean if a field has been set.
func (o *ParlayLeg) HasPTeam1Score() bool {
	if o != nil && o.PTeam1Score.IsSet() {
		return true
	}

	return false
}

// SetPTeam1Score gets a reference to the given NullableFloat64 and assigns it to the PTeam1Score field.
func (o *ParlayLeg) SetPTeam1Score(v float64) {
	o.PTeam1Score.Set(&v)
}
// SetPTeam1ScoreNil sets the value for PTeam1Score to be an explicit nil
func (o *ParlayLeg) SetPTeam1ScoreNil() {
	o.PTeam1Score.Set(nil)
}

// UnsetPTeam1Score ensures that no value is present for PTeam1Score, not even an explicit nil
func (o *ParlayLeg) UnsetPTeam1Score() {
	o.PTeam1Score.Unset()
}

// GetPTeam2Score returns the PTeam2Score field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ParlayLeg) GetPTeam2Score() float64 {
	if o == nil || o.PTeam2Score.Get() == nil {
		var ret float64
		return ret
	}
	return *o.PTeam2Score.Get()
}

// GetPTeam2ScoreOk returns a tuple with the PTeam2Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ParlayLeg) GetPTeam2ScoreOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PTeam2Score.Get(), o.PTeam2Score.IsSet()
}

// HasPTeam2Score returns a boolean if a field has been set.
func (o *ParlayLeg) HasPTeam2Score() bool {
	if o != nil && o.PTeam2Score.IsSet() {
		return true
	}

	return false
}

// SetPTeam2Score gets a reference to the given NullableFloat64 and assigns it to the PTeam2Score field.
func (o *ParlayLeg) SetPTeam2Score(v float64) {
	o.PTeam2Score.Set(&v)
}
// SetPTeam2ScoreNil sets the value for PTeam2Score to be an explicit nil
func (o *ParlayLeg) SetPTeam2ScoreNil() {
	o.PTeam2Score.Set(nil)
}

// UnsetPTeam2Score ensures that no value is present for PTeam2Score, not even an explicit nil
func (o *ParlayLeg) UnsetPTeam2Score() {
	o.PTeam2Score.Unset()
}

// GetCancellationReason returns the CancellationReason field value if set, zero value otherwise.
func (o *ParlayLeg) GetCancellationReason() CancellationReason {
	if o == nil || o.CancellationReason == nil {
		var ret CancellationReason
		return ret
	}
	return *o.CancellationReason
}

// GetCancellationReasonOk returns a tuple with the CancellationReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParlayLeg) GetCancellationReasonOk() (*CancellationReason, bool) {
	if o == nil || o.CancellationReason == nil {
		return nil, false
	}
	return o.CancellationReason, true
}

// HasCancellationReason returns a boolean if a field has been set.
func (o *ParlayLeg) HasCancellationReason() bool {
	if o != nil && o.CancellationReason != nil {
		return true
	}

	return false
}

// SetCancellationReason gets a reference to the given CancellationReason and assigns it to the CancellationReason field.
func (o *ParlayLeg) SetCancellationReason(v CancellationReason) {
	o.CancellationReason = &v
}

func (o ParlayLeg) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SportId != nil {
		toSerialize["sportId"] = o.SportId
	}
	if o.LegBetType != nil {
		toSerialize["legBetType"] = o.LegBetType
	}
	if o.LegBetStatus != nil {
		toSerialize["legBetStatus"] = o.LegBetStatus
	}
	if o.LeagueId != nil {
		toSerialize["leagueId"] = o.LeagueId
	}
	if o.EventId != nil {
		toSerialize["eventId"] = o.EventId
	}
	if o.EventStartTime != nil {
		toSerialize["eventStartTime"] = o.EventStartTime
	}
	if o.Handicap.IsSet() {
		toSerialize["handicap"] = o.Handicap.Get()
	}
	if o.Price != nil {
		toSerialize["price"] = o.Price
	}
	if o.TeamName != nil {
		toSerialize["teamName"] = o.TeamName
	}
	if o.Side.IsSet() {
		toSerialize["side"] = o.Side.Get()
	}
	if o.Pitcher1.IsSet() {
		toSerialize["pitcher1"] = o.Pitcher1.Get()
	}
	if o.Pitcher2.IsSet() {
		toSerialize["pitcher2"] = o.Pitcher2.Get()
	}
	if o.Pitcher1MustStart != nil {
		toSerialize["pitcher1MustStart"] = o.Pitcher1MustStart
	}
	if o.Pitcher2MustStart != nil {
		toSerialize["pitcher2MustStart"] = o.Pitcher2MustStart
	}
	if o.Team1 != nil {
		toSerialize["team1"] = o.Team1
	}
	if o.Team2 != nil {
		toSerialize["team2"] = o.Team2
	}
	if o.PeriodNumber != nil {
		toSerialize["periodNumber"] = o.PeriodNumber
	}
	if o.FtTeam1Score.IsSet() {
		toSerialize["ftTeam1Score"] = o.FtTeam1Score.Get()
	}
	if o.FtTeam2Score.IsSet() {
		toSerialize["ftTeam2Score"] = o.FtTeam2Score.Get()
	}
	if o.PTeam1Score.IsSet() {
		toSerialize["pTeam1Score"] = o.PTeam1Score.Get()
	}
	if o.PTeam2Score.IsSet() {
		toSerialize["pTeam2Score"] = o.PTeam2Score.Get()
	}
	if o.CancellationReason != nil {
		toSerialize["cancellationReason"] = o.CancellationReason
	}
	return json.Marshal(toSerialize)
}

type NullableParlayLeg struct {
	value *ParlayLeg
	isSet bool
}

func (v NullableParlayLeg) Get() *ParlayLeg {
	return v.value
}

func (v *NullableParlayLeg) Set(val *ParlayLeg) {
	v.value = val
	v.isSet = true
}

func (v NullableParlayLeg) IsSet() bool {
	return v.isSet
}

func (v *NullableParlayLeg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParlayLeg(val *ParlayLeg) *NullableParlayLeg {
	return &NullableParlayLeg{value: val, isSet: true}
}

func (v NullableParlayLeg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParlayLeg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
