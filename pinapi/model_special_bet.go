/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pinapi

import (
	"bytes"
	"encoding/json"
	"time"
)

// SpecialBet struct for SpecialBet
type SpecialBet struct {
	// Bet identification
	BetId int64 `json:"betId" xml:"betId"`
	// Unique Request Id
	UniqueRequestId *string `json:"uniqueRequestId,omitempty" xml:"uniqueRequestId"`
	// Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.
	WagerNumber int32 `json:"wagerNumber" xml:"wagerNumber"`
	// Date time when the bet was placed.
	PlacedAt time.Time `json:"placedAt" xml:"placedAt"`
	// Bet Status.  ACCEPTED = Bet was accepted,  CANCELLED = Bet is cancelled as per Pinnacle betting rules,  LOSE = The bet is settled as lose, REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status,  WON = The bet is settled as won
	BetStatus string `json:"betStatus" xml:"betStatus"`
	BetType   string `json:"betType" xml:"betType"`
	// Win amount.
	Win float64 `json:"win" xml:"win"`
	// Risk amount.
	Risk float64 `json:"risk" xml:"risk"`
	// Win-Loss for settled bets.
	WinLoss    *NullableFloat64 `json:"winLoss,omitempty" xml:"winLoss"`
	OddsFormat OddsFormat       `json:"oddsFormat" xml:"oddsFormat"`
	// Clientâ€™s commission on the bet.
	CustomerCommission *NullableFloat64    `json:"customerCommission,omitempty" xml:"customerCommission"`
	CancellationReason *CancellationReason `json:"cancellationReason,omitempty" xml:"cancellationReason"`
	// Update Sequence. It gets updated when the bet status change.
	UpdateSequence int64    `json:"updateSequence" xml:"updateSequence"`
	SpecialId      int64    `json:"specialId" xml:"specialId"`
	SpecialName    string   `json:"specialName" xml:"specialName"`
	ContestantId   int64    `json:"contestantId" xml:"contestantId"`
	ContestantName string   `json:"contestantName" xml:"contestantName"`
	Price          float64  `json:"price" xml:"price"`
	Handicap       *float64 `json:"handicap,omitempty" xml:"handicap"`
	Units          *string  `json:"units,omitempty" xml:"units"`
	SportId        int32    `json:"sportId" xml:"sportId"`
	LeagueId       int32    `json:"leagueId" xml:"leagueId"`
	// Populated if bet was placed on a special linked to the event.
	EventId *NullableInt64 `json:"eventId,omitempty" xml:"eventId"`
	// Populated if bet was placed on a special linked to the event.
	PeriodNumber *NullableInt32 `json:"periodNumber,omitempty" xml:"periodNumber"`
	// Populated if bet was placed on a special linked to the event.
	Team1 *NullableString `json:"team1,omitempty" xml:"team1"`
	// Populated if bet was placed on a special linked to the event.
	Team2 *NullableString `json:"team2,omitempty" xml:"team2"`
	// Date time when the event starts
	EventStartTime *time.Time `json:"eventStartTime,omitempty" xml:"eventStartTime"`
}

// GetBetId returns the BetId field value
func (o *SpecialBet) GetBetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BetId
}

// SetBetId sets field value
func (o *SpecialBet) SetBetId(v int64) {
	o.BetId = v
}

// GetUniqueRequestId returns the UniqueRequestId field value if set, zero value otherwise.
func (o *SpecialBet) GetUniqueRequestId() string {
	if o == nil || o.UniqueRequestId == nil {
		var ret string
		return ret
	}
	return *o.UniqueRequestId
}

// GetUniqueRequestIdOk returns a tuple with the UniqueRequestId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBet) GetUniqueRequestIdOk() (string, bool) {
	if o == nil || o.UniqueRequestId == nil {
		var ret string
		return ret, false
	}
	return *o.UniqueRequestId, true
}

// HasUniqueRequestId returns a boolean if a field has been set.
func (o *SpecialBet) HasUniqueRequestId() bool {
	if o != nil && o.UniqueRequestId != nil {
		return true
	}

	return false
}

// SetUniqueRequestId gets a reference to the given string and assigns it to the UniqueRequestId field.
func (o *SpecialBet) SetUniqueRequestId(v string) {
	o.UniqueRequestId = &v
}

// GetWagerNumber returns the WagerNumber field value
func (o *SpecialBet) GetWagerNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WagerNumber
}

// SetWagerNumber sets field value
func (o *SpecialBet) SetWagerNumber(v int32) {
	o.WagerNumber = v
}

// GetPlacedAt returns the PlacedAt field value
func (o *SpecialBet) GetPlacedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.PlacedAt
}

// SetPlacedAt sets field value
func (o *SpecialBet) SetPlacedAt(v time.Time) {
	o.PlacedAt = v
}

// GetBetStatus returns the BetStatus field value
func (o *SpecialBet) GetBetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BetStatus
}

// SetBetStatus sets field value
func (o *SpecialBet) SetBetStatus(v string) {
	o.BetStatus = v
}

// GetBetType returns the BetType field value
func (o *SpecialBet) GetBetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BetType
}

// SetBetType sets field value
func (o *SpecialBet) SetBetType(v string) {
	o.BetType = v
}

// GetWin returns the Win field value
func (o *SpecialBet) GetWin() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Win
}

// SetWin sets field value
func (o *SpecialBet) SetWin(v float64) {
	o.Win = v
}

// GetRisk returns the Risk field value
func (o *SpecialBet) GetRisk() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Risk
}

// SetRisk sets field value
func (o *SpecialBet) SetRisk(v float64) {
	o.Risk = v
}

// GetWinLoss returns the WinLoss field value if set, zero value otherwise.
func (o *SpecialBet) GetWinLoss() NullableFloat64 {
	if o == nil || o.WinLoss == nil {
		var ret NullableFloat64
		return ret
	}
	return *o.WinLoss
}

// GetWinLossOk returns a tuple with the WinLoss field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBet) GetWinLossOk() (NullableFloat64, bool) {
	if o == nil || o.WinLoss == nil {
		var ret NullableFloat64
		return ret, false
	}
	return *o.WinLoss, true
}

// HasWinLoss returns a boolean if a field has been set.
func (o *SpecialBet) HasWinLoss() bool {
	if o != nil && o.WinLoss != nil {
		return true
	}

	return false
}

// SetWinLoss gets a reference to the given NullableFloat64 and assigns it to the WinLoss field.
func (o *SpecialBet) SetWinLoss(v NullableFloat64) {
	o.WinLoss = &v
}

// GetOddsFormat returns the OddsFormat field value
func (o *SpecialBet) GetOddsFormat() OddsFormat {
	if o == nil {
		var ret OddsFormat
		return ret
	}

	return o.OddsFormat
}

// SetOddsFormat sets field value
func (o *SpecialBet) SetOddsFormat(v OddsFormat) {
	o.OddsFormat = v
}

// GetCustomerCommission returns the CustomerCommission field value if set, zero value otherwise.
func (o *SpecialBet) GetCustomerCommission() NullableFloat64 {
	if o == nil || o.CustomerCommission == nil {
		var ret NullableFloat64
		return ret
	}
	return *o.CustomerCommission
}

// GetCustomerCommissionOk returns a tuple with the CustomerCommission field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBet) GetCustomerCommissionOk() (NullableFloat64, bool) {
	if o == nil || o.CustomerCommission == nil {
		var ret NullableFloat64
		return ret, false
	}
	return *o.CustomerCommission, true
}

// HasCustomerCommission returns a boolean if a field has been set.
func (o *SpecialBet) HasCustomerCommission() bool {
	if o != nil && o.CustomerCommission != nil {
		return true
	}

	return false
}

// SetCustomerCommission gets a reference to the given NullableFloat64 and assigns it to the CustomerCommission field.
func (o *SpecialBet) SetCustomerCommission(v NullableFloat64) {
	o.CustomerCommission = &v
}

// GetCancellationReason returns the CancellationReason field value if set, zero value otherwise.
func (o *SpecialBet) GetCancellationReason() CancellationReason {
	if o == nil || o.CancellationReason == nil {
		var ret CancellationReason
		return ret
	}
	return *o.CancellationReason
}

// GetCancellationReasonOk returns a tuple with the CancellationReason field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBet) GetCancellationReasonOk() (CancellationReason, bool) {
	if o == nil || o.CancellationReason == nil {
		var ret CancellationReason
		return ret, false
	}
	return *o.CancellationReason, true
}

// HasCancellationReason returns a boolean if a field has been set.
func (o *SpecialBet) HasCancellationReason() bool {
	if o != nil && o.CancellationReason != nil {
		return true
	}

	return false
}

// SetCancellationReason gets a reference to the given CancellationReason and assigns it to the CancellationReason field.
func (o *SpecialBet) SetCancellationReason(v CancellationReason) {
	o.CancellationReason = &v
}

// GetUpdateSequence returns the UpdateSequence field value
func (o *SpecialBet) GetUpdateSequence() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.UpdateSequence
}

// SetUpdateSequence sets field value
func (o *SpecialBet) SetUpdateSequence(v int64) {
	o.UpdateSequence = v
}

// GetSpecialId returns the SpecialId field value
func (o *SpecialBet) GetSpecialId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SpecialId
}

// SetSpecialId sets field value
func (o *SpecialBet) SetSpecialId(v int64) {
	o.SpecialId = v
}

// GetSpecialName returns the SpecialName field value
func (o *SpecialBet) GetSpecialName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpecialName
}

// SetSpecialName sets field value
func (o *SpecialBet) SetSpecialName(v string) {
	o.SpecialName = v
}

// GetContestantId returns the ContestantId field value
func (o *SpecialBet) GetContestantId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ContestantId
}

// SetContestantId sets field value
func (o *SpecialBet) SetContestantId(v int64) {
	o.ContestantId = v
}

// GetContestantName returns the ContestantName field value
func (o *SpecialBet) GetContestantName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContestantName
}

// SetContestantName sets field value
func (o *SpecialBet) SetContestantName(v string) {
	o.ContestantName = v
}

// GetPrice returns the Price field value
func (o *SpecialBet) GetPrice() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Price
}

// SetPrice sets field value
func (o *SpecialBet) SetPrice(v float64) {
	o.Price = v
}

// GetHandicap returns the Handicap field value if set, zero value otherwise.
func (o *SpecialBet) GetHandicap() float64 {
	if o == nil || o.Handicap == nil {
		var ret float64
		return ret
	}
	return *o.Handicap
}

// GetHandicapOk returns a tuple with the Handicap field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBet) GetHandicapOk() (float64, bool) {
	if o == nil || o.Handicap == nil {
		var ret float64
		return ret, false
	}
	return *o.Handicap, true
}

// HasHandicap returns a boolean if a field has been set.
func (o *SpecialBet) HasHandicap() bool {
	if o != nil && o.Handicap != nil {
		return true
	}

	return false
}

// SetHandicap gets a reference to the given float64 and assigns it to the Handicap field.
func (o *SpecialBet) SetHandicap(v float64) {
	o.Handicap = &v
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *SpecialBet) GetUnits() string {
	if o == nil || o.Units == nil {
		var ret string
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBet) GetUnitsOk() (string, bool) {
	if o == nil || o.Units == nil {
		var ret string
		return ret, false
	}
	return *o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *SpecialBet) HasUnits() bool {
	if o != nil && o.Units != nil {
		return true
	}

	return false
}

// SetUnits gets a reference to the given string and assigns it to the Units field.
func (o *SpecialBet) SetUnits(v string) {
	o.Units = &v
}

// GetSportId returns the SportId field value
func (o *SpecialBet) GetSportId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SportId
}

// SetSportId sets field value
func (o *SpecialBet) SetSportId(v int32) {
	o.SportId = v
}

// GetLeagueId returns the LeagueId field value
func (o *SpecialBet) GetLeagueId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.LeagueId
}

// SetLeagueId sets field value
func (o *SpecialBet) SetLeagueId(v int32) {
	o.LeagueId = v
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *SpecialBet) GetEventId() NullableInt64 {
	if o == nil || o.EventId == nil {
		var ret NullableInt64
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBet) GetEventIdOk() (NullableInt64, bool) {
	if o == nil || o.EventId == nil {
		var ret NullableInt64
		return ret, false
	}
	return *o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *SpecialBet) HasEventId() bool {
	if o != nil && o.EventId != nil {
		return true
	}

	return false
}

// SetEventId gets a reference to the given NullableInt64 and assigns it to the EventId field.
func (o *SpecialBet) SetEventId(v NullableInt64) {
	o.EventId = &v
}

// GetPeriodNumber returns the PeriodNumber field value if set, zero value otherwise.
func (o *SpecialBet) GetPeriodNumber() NullableInt32 {
	if o == nil || o.PeriodNumber == nil {
		var ret NullableInt32
		return ret
	}
	return *o.PeriodNumber
}

// GetPeriodNumberOk returns a tuple with the PeriodNumber field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBet) GetPeriodNumberOk() (NullableInt32, bool) {
	if o == nil || o.PeriodNumber == nil {
		var ret NullableInt32
		return ret, false
	}
	return *o.PeriodNumber, true
}

// HasPeriodNumber returns a boolean if a field has been set.
func (o *SpecialBet) HasPeriodNumber() bool {
	if o != nil && o.PeriodNumber != nil {
		return true
	}

	return false
}

// SetPeriodNumber gets a reference to the given NullableInt32 and assigns it to the PeriodNumber field.
func (o *SpecialBet) SetPeriodNumber(v NullableInt32) {
	o.PeriodNumber = &v
}

// GetTeam1 returns the Team1 field value if set, zero value otherwise.
func (o *SpecialBet) GetTeam1() NullableString {
	if o == nil || o.Team1 == nil {
		var ret NullableString
		return ret
	}
	return *o.Team1
}

// GetTeam1Ok returns a tuple with the Team1 field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBet) GetTeam1Ok() (NullableString, bool) {
	if o == nil || o.Team1 == nil {
		var ret NullableString
		return ret, false
	}
	return *o.Team1, true
}

// HasTeam1 returns a boolean if a field has been set.
func (o *SpecialBet) HasTeam1() bool {
	if o != nil && o.Team1 != nil {
		return true
	}

	return false
}

// SetTeam1 gets a reference to the given NullableString and assigns it to the Team1 field.
func (o *SpecialBet) SetTeam1(v NullableString) {
	o.Team1 = &v
}

// GetTeam2 returns the Team2 field value if set, zero value otherwise.
func (o *SpecialBet) GetTeam2() NullableString {
	if o == nil || o.Team2 == nil {
		var ret NullableString
		return ret
	}
	return *o.Team2
}

// GetTeam2Ok returns a tuple with the Team2 field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBet) GetTeam2Ok() (NullableString, bool) {
	if o == nil || o.Team2 == nil {
		var ret NullableString
		return ret, false
	}
	return *o.Team2, true
}

// HasTeam2 returns a boolean if a field has been set.
func (o *SpecialBet) HasTeam2() bool {
	if o != nil && o.Team2 != nil {
		return true
	}

	return false
}

// SetTeam2 gets a reference to the given NullableString and assigns it to the Team2 field.
func (o *SpecialBet) SetTeam2(v NullableString) {
	o.Team2 = &v
}

// GetEventStartTime returns the EventStartTime field value if set, zero value otherwise.
func (o *SpecialBet) GetEventStartTime() time.Time {
	if o == nil || o.EventStartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EventStartTime
}

// GetEventStartTimeOk returns a tuple with the EventStartTime field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBet) GetEventStartTimeOk() (time.Time, bool) {
	if o == nil || o.EventStartTime == nil {
		var ret time.Time
		return ret, false
	}
	return *o.EventStartTime, true
}

// HasEventStartTime returns a boolean if a field has been set.
func (o *SpecialBet) HasEventStartTime() bool {
	if o != nil && o.EventStartTime != nil {
		return true
	}

	return false
}

// SetEventStartTime gets a reference to the given time.Time and assigns it to the EventStartTime field.
func (o *SpecialBet) SetEventStartTime(v time.Time) {
	o.EventStartTime = &v
}

type NullableSpecialBet struct {
	Value        SpecialBet
	ExplicitNull bool
}

func (v NullableSpecialBet) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableSpecialBet) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
