/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1`
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package pinapi

import (
	"bytes"
	"encoding/json"
)

// InRunningSport struct for InRunningSport
type InRunningSport struct {
	// Sport Id
	Id *int32 `json:"id,omitempty" xml:"id"`
	// Leagues container
	Leagues *[]InRunningLeague `json:"leagues,omitempty" xml:"leagues"`
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InRunningSport) GetId() int32 {
	if o == nil || o.Id == nil {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InRunningSport) GetIdOk() (int32, bool) {
	if o == nil || o.Id == nil {
		var ret int32
		return ret, false
	}
	return *o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InRunningSport) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *InRunningSport) SetId(v int32) {
	o.Id = &v
}

// GetLeagues returns the Leagues field value if set, zero value otherwise.
func (o *InRunningSport) GetLeagues() []InRunningLeague {
	if o == nil || o.Leagues == nil {
		var ret []InRunningLeague
		return ret
	}
	return *o.Leagues
}

// GetLeaguesOk returns a tuple with the Leagues field value if set, zero value otherwise
// and a boolean to check if the value has been set.
func (o *InRunningSport) GetLeaguesOk() ([]InRunningLeague, bool) {
	if o == nil || o.Leagues == nil {
		var ret []InRunningLeague
		return ret, false
	}
	return *o.Leagues, true
}

// HasLeagues returns a boolean if a field has been set.
func (o *InRunningSport) HasLeagues() bool {
	if o != nil && o.Leagues != nil {
		return true
	}

	return false
}

// SetLeagues gets a reference to the given []InRunningLeague and assigns it to the Leagues field.
func (o *InRunningSport) SetLeagues(v []InRunningLeague) {
	o.Leagues = &v
}

type NullableInRunningSport struct {
	Value        InRunningSport
	ExplicitNull bool
}

func (v NullableInRunningSport) MarshalJSON() ([]byte, error) {
	switch {
	case v.ExplicitNull:
		return []byte("null"), nil
	default:
		return json.Marshal(v.Value)
	}
}

func (v *NullableInRunningSport) UnmarshalJSON(src []byte) error {
	if bytes.Equal(src, []byte("null")) {
		v.ExplicitNull = true
		return nil
	}

	return json.Unmarshal(src, &v.Value)
}
