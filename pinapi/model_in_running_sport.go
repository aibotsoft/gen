/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
)

// InRunningSport struct for InRunningSport
type InRunningSport struct {
	// Sport Id
	Id *int `json:"id,omitempty"`
	// Leagues container
	Leagues *[]InRunningLeague `json:"leagues,omitempty"`
}

// NewInRunningSport instantiates a new InRunningSport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInRunningSport() *InRunningSport {
	this := InRunningSport{}
	return &this
}

// NewInRunningSportWithDefaults instantiates a new InRunningSport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInRunningSportWithDefaults() *InRunningSport {
	this := InRunningSport{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InRunningSport) GetId() int {
	if o == nil || o.Id == nil {
		var ret int
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InRunningSport) GetIdOk() (*int, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InRunningSport) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int and assigns it to the Id field.
func (o *InRunningSport) SetId(v int) {
	o.Id = &v
}

// GetLeagues returns the Leagues field value if set, zero value otherwise.
func (o *InRunningSport) GetLeagues() []InRunningLeague {
	if o == nil || o.Leagues == nil {
		var ret []InRunningLeague
		return ret
	}
	return *o.Leagues
}

// GetLeaguesOk returns a tuple with the Leagues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InRunningSport) GetLeaguesOk() (*[]InRunningLeague, bool) {
	if o == nil || o.Leagues == nil {
		return nil, false
	}
	return o.Leagues, true
}

// HasLeagues returns a boolean if a field has been set.
func (o *InRunningSport) HasLeagues() bool {
	if o != nil && o.Leagues != nil {
		return true
	}

	return false
}

// SetLeagues gets a reference to the given []InRunningLeague and assigns it to the Leagues field.
func (o *InRunningSport) SetLeagues(v []InRunningLeague) {
	o.Leagues = &v
}

func (o InRunningSport) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Leagues != nil {
		toSerialize["leagues"] = o.Leagues
	}
	return json.Marshal(toSerialize)
}

type NullableInRunningSport struct {
	value *InRunningSport
	isSet bool
}

func (v NullableInRunningSport) Get() *InRunningSport {
	return v.value
}

func (v *NullableInRunningSport) Set(val *InRunningSport) {
	v.value = val
	v.isSet = true
}

func (v NullableInRunningSport) IsSet() bool {
	return v.isSet
}

func (v *NullableInRunningSport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInRunningSport(val *InRunningSport) *NullableInRunningSport {
	return &NullableInRunningSport{value: val, isSet: true}
}

func (v NullableInRunningSport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInRunningSport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
