/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package pinapi

import (
	"encoding/json"
)

// SettledSpecialsResponse Response dto for SettledSpecials request
type SettledSpecialsResponse struct {
	// Id of a sport for which to retrieve the odds.
	SportId *int `json:"sportId,omitempty"`
	// Last index for the settled fixture
	Last *int64 `json:"last,omitempty"`
	// List of Leagues.
	Leagues *[]SettledSpecialsLeague `json:"leagues,omitempty"`
}

// NewSettledSpecialsResponse instantiates a new SettledSpecialsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettledSpecialsResponse() *SettledSpecialsResponse {
	this := SettledSpecialsResponse{}
	return &this
}

// NewSettledSpecialsResponseWithDefaults instantiates a new SettledSpecialsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettledSpecialsResponseWithDefaults() *SettledSpecialsResponse {
	this := SettledSpecialsResponse{}
	return &this
}

// GetSportId returns the SportId field value if set, zero value otherwise.
func (o *SettledSpecialsResponse) GetSportId() int {
	if o == nil || o.SportId == nil {
		var ret int
		return ret
	}
	return *o.SportId
}

// GetSportIdOk returns a tuple with the SportId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettledSpecialsResponse) GetSportIdOk() (*int, bool) {
	if o == nil || o.SportId == nil {
		return nil, false
	}
	return o.SportId, true
}

// HasSportId returns a boolean if a field has been set.
func (o *SettledSpecialsResponse) HasSportId() bool {
	if o != nil && o.SportId != nil {
		return true
	}

	return false
}

// SetSportId gets a reference to the given int and assigns it to the SportId field.
func (o *SettledSpecialsResponse) SetSportId(v int) {
	o.SportId = &v
}

// GetLast returns the Last field value if set, zero value otherwise.
func (o *SettledSpecialsResponse) GetLast() int64 {
	if o == nil || o.Last == nil {
		var ret int64
		return ret
	}
	return *o.Last
}

// GetLastOk returns a tuple with the Last field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettledSpecialsResponse) GetLastOk() (*int64, bool) {
	if o == nil || o.Last == nil {
		return nil, false
	}
	return o.Last, true
}

// HasLast returns a boolean if a field has been set.
func (o *SettledSpecialsResponse) HasLast() bool {
	if o != nil && o.Last != nil {
		return true
	}

	return false
}

// SetLast gets a reference to the given int64 and assigns it to the Last field.
func (o *SettledSpecialsResponse) SetLast(v int64) {
	o.Last = &v
}

// GetLeagues returns the Leagues field value if set, zero value otherwise.
func (o *SettledSpecialsResponse) GetLeagues() []SettledSpecialsLeague {
	if o == nil || o.Leagues == nil {
		var ret []SettledSpecialsLeague
		return ret
	}
	return *o.Leagues
}

// GetLeaguesOk returns a tuple with the Leagues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettledSpecialsResponse) GetLeaguesOk() (*[]SettledSpecialsLeague, bool) {
	if o == nil || o.Leagues == nil {
		return nil, false
	}
	return o.Leagues, true
}

// HasLeagues returns a boolean if a field has been set.
func (o *SettledSpecialsResponse) HasLeagues() bool {
	if o != nil && o.Leagues != nil {
		return true
	}

	return false
}

// SetLeagues gets a reference to the given []SettledSpecialsLeague and assigns it to the Leagues field.
func (o *SettledSpecialsResponse) SetLeagues(v []SettledSpecialsLeague) {
	o.Leagues = &v
}

func (o SettledSpecialsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SportId != nil {
		toSerialize["sportId"] = o.SportId
	}
	if o.Last != nil {
		toSerialize["last"] = o.Last
	}
	if o.Leagues != nil {
		toSerialize["leagues"] = o.Leagues
	}
	return json.Marshal(toSerialize)
}

type NullableSettledSpecialsResponse struct {
	value *SettledSpecialsResponse
	isSet bool
}

func (v NullableSettledSpecialsResponse) Get() *SettledSpecialsResponse {
	return v.value
}

func (v *NullableSettledSpecialsResponse) Set(val *SettledSpecialsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSettledSpecialsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSettledSpecialsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettledSpecialsResponse(val *SettledSpecialsResponse) *NullableSettledSpecialsResponse {
	return &NullableSettledSpecialsResponse{value: val, isSet: true}
}

func (v NullableSettledSpecialsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettledSpecialsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
