/*
 * Pinnacle - Customer API Reference
 *
 *  # Authentication   API uses HTTP Basic access authentication. You need to send Authorization HTTP Request header:    `Authorization: Basic <Base64 value of UTF-8 encoded \"username:password\">`  Example:  `Authorization: Basic U03MyOT23YbzMDc6d3c3O1DQ1` 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package pinapi

import (
	"encoding/json"
)

// SpecialBetResponse struct for SpecialBetResponse
type SpecialBetResponse struct {
	// Status of the request.
	Status *string `json:"status,omitempty"`
	// When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.  ALL_BETTING_CLOSED = Betting is not allowed at this moment. This may happen during system maintenance.    ABOVE_MAX_BET_AMOUNT = Stake is above allowed maximum amount,    BELOW_MIN_BET_AMOUNT = Stake is below allowed minimum amount,    BLOCKED_BETTING = Betting is suspended for the client,    BLOCKED_CLIENT = Client is no longer active,    CONTEST_NOT_FOUND = Incorrect contest id provided or contest is no longer available,    DUPLICATE_UNIQUE_REQUEST_ID = UniqueRequestId must be unique for each bet,    INCOMPLETE_CUSTOMER_BETTING_PROFILE = Customer profile could not be loaded,     INSUFFICIENT_FUNDS = Bet is submitted by a client with insufficient funds,    INVALID_COUNTRY = Client country is not allowed for betting,    INVALID_REQUEST = Special bet request is not valid,    LINE_CHANGED = Bet is submitted on a line that has changed,    PAST_CUTOFFTIME = Bet is submitted on a game after the betting cutoff time,    RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Self-imposed loss limit exceeded,    RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Self-imposed risk limit exceeded,   SYSTEM_ERROR_1 = Unexpected error,    SYSTEM_ERROR_2 = Unexpected error,    UNIQUE_REQUEST_ID_REQUIRED = UniqueRequestId is missing,    INVALID_CUSTOMER_PROFILE 
	ErrorCode NullableString `json:"errorCode,omitempty"`
	// Id of a newly created bet.
	BetId *int64 `json:"betId,omitempty"`
	// Unique identifier provided in the request.
	UniqueRequestId *string `json:"uniqueRequestId,omitempty"`
	// Whether or not the bet was accepted on the line that changed in favour of client. This can be true only if acceptBetterLine in the Place Bet request is set to TRUE.
	BetterLineWasAccepted *bool `json:"betterLineWasAccepted,omitempty"`
	SpecialBet *SpecialBet `json:"specialBet,omitempty"`
}

// NewSpecialBetResponse instantiates a new SpecialBetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpecialBetResponse() *SpecialBetResponse {
	this := SpecialBetResponse{}
	return &this
}

// NewSpecialBetResponseWithDefaults instantiates a new SpecialBetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecialBetResponseWithDefaults() *SpecialBetResponse {
	this := SpecialBetResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SpecialBetResponse) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBetResponse) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SpecialBetResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SpecialBetResponse) SetStatus(v string) {
	o.Status = &v
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SpecialBetResponse) GetErrorCode() string {
	if o == nil || o.ErrorCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorCode.Get()
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SpecialBetResponse) GetErrorCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ErrorCode.Get(), o.ErrorCode.IsSet()
}

// HasErrorCode returns a boolean if a field has been set.
func (o *SpecialBetResponse) HasErrorCode() bool {
	if o != nil && o.ErrorCode.IsSet() {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given NullableString and assigns it to the ErrorCode field.
func (o *SpecialBetResponse) SetErrorCode(v string) {
	o.ErrorCode.Set(&v)
}
// SetErrorCodeNil sets the value for ErrorCode to be an explicit nil
func (o *SpecialBetResponse) SetErrorCodeNil() {
	o.ErrorCode.Set(nil)
}

// UnsetErrorCode ensures that no value is present for ErrorCode, not even an explicit nil
func (o *SpecialBetResponse) UnsetErrorCode() {
	o.ErrorCode.Unset()
}

// GetBetId returns the BetId field value if set, zero value otherwise.
func (o *SpecialBetResponse) GetBetId() int64 {
	if o == nil || o.BetId == nil {
		var ret int64
		return ret
	}
	return *o.BetId
}

// GetBetIdOk returns a tuple with the BetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBetResponse) GetBetIdOk() (*int64, bool) {
	if o == nil || o.BetId == nil {
		return nil, false
	}
	return o.BetId, true
}

// HasBetId returns a boolean if a field has been set.
func (o *SpecialBetResponse) HasBetId() bool {
	if o != nil && o.BetId != nil {
		return true
	}

	return false
}

// SetBetId gets a reference to the given int64 and assigns it to the BetId field.
func (o *SpecialBetResponse) SetBetId(v int64) {
	o.BetId = &v
}

// GetUniqueRequestId returns the UniqueRequestId field value if set, zero value otherwise.
func (o *SpecialBetResponse) GetUniqueRequestId() string {
	if o == nil || o.UniqueRequestId == nil {
		var ret string
		return ret
	}
	return *o.UniqueRequestId
}

// GetUniqueRequestIdOk returns a tuple with the UniqueRequestId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBetResponse) GetUniqueRequestIdOk() (*string, bool) {
	if o == nil || o.UniqueRequestId == nil {
		return nil, false
	}
	return o.UniqueRequestId, true
}

// HasUniqueRequestId returns a boolean if a field has been set.
func (o *SpecialBetResponse) HasUniqueRequestId() bool {
	if o != nil && o.UniqueRequestId != nil {
		return true
	}

	return false
}

// SetUniqueRequestId gets a reference to the given string and assigns it to the UniqueRequestId field.
func (o *SpecialBetResponse) SetUniqueRequestId(v string) {
	o.UniqueRequestId = &v
}

// GetBetterLineWasAccepted returns the BetterLineWasAccepted field value if set, zero value otherwise.
func (o *SpecialBetResponse) GetBetterLineWasAccepted() bool {
	if o == nil || o.BetterLineWasAccepted == nil {
		var ret bool
		return ret
	}
	return *o.BetterLineWasAccepted
}

// GetBetterLineWasAcceptedOk returns a tuple with the BetterLineWasAccepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBetResponse) GetBetterLineWasAcceptedOk() (*bool, bool) {
	if o == nil || o.BetterLineWasAccepted == nil {
		return nil, false
	}
	return o.BetterLineWasAccepted, true
}

// HasBetterLineWasAccepted returns a boolean if a field has been set.
func (o *SpecialBetResponse) HasBetterLineWasAccepted() bool {
	if o != nil && o.BetterLineWasAccepted != nil {
		return true
	}

	return false
}

// SetBetterLineWasAccepted gets a reference to the given bool and assigns it to the BetterLineWasAccepted field.
func (o *SpecialBetResponse) SetBetterLineWasAccepted(v bool) {
	o.BetterLineWasAccepted = &v
}

// GetSpecialBet returns the SpecialBet field value if set, zero value otherwise.
func (o *SpecialBetResponse) GetSpecialBet() SpecialBet {
	if o == nil || o.SpecialBet == nil {
		var ret SpecialBet
		return ret
	}
	return *o.SpecialBet
}

// GetSpecialBetOk returns a tuple with the SpecialBet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpecialBetResponse) GetSpecialBetOk() (*SpecialBet, bool) {
	if o == nil || o.SpecialBet == nil {
		return nil, false
	}
	return o.SpecialBet, true
}

// HasSpecialBet returns a boolean if a field has been set.
func (o *SpecialBetResponse) HasSpecialBet() bool {
	if o != nil && o.SpecialBet != nil {
		return true
	}

	return false
}

// SetSpecialBet gets a reference to the given SpecialBet and assigns it to the SpecialBet field.
func (o *SpecialBetResponse) SetSpecialBet(v SpecialBet) {
	o.SpecialBet = &v
}

func (o SpecialBetResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.ErrorCode.IsSet() {
		toSerialize["errorCode"] = o.ErrorCode.Get()
	}
	if o.BetId != nil {
		toSerialize["betId"] = o.BetId
	}
	if o.UniqueRequestId != nil {
		toSerialize["uniqueRequestId"] = o.UniqueRequestId
	}
	if o.BetterLineWasAccepted != nil {
		toSerialize["betterLineWasAccepted"] = o.BetterLineWasAccepted
	}
	if o.SpecialBet != nil {
		toSerialize["specialBet"] = o.SpecialBet
	}
	return json.Marshal(toSerialize)
}

type NullableSpecialBetResponse struct {
	value *SpecialBetResponse
	isSet bool
}

func (v NullableSpecialBetResponse) Get() *SpecialBetResponse {
	return v.value
}

func (v *NullableSpecialBetResponse) Set(val *SpecialBetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSpecialBetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSpecialBetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpecialBetResponse(val *SpecialBetResponse) *NullableSpecialBetResponse {
	return &NullableSpecialBetResponse{value: val, isSet: true}
}

func (v NullableSpecialBetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpecialBetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
