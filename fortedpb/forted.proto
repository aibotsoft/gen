syntax = "proto3";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

package fortedpb;
option go_package = "fortedpb";

option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.gostring_all) = true;
option (gogoproto.goproto_unrecognized_all) = false;
option (gogoproto.goproto_unkeyed_all) = false;
option (gogoproto.goproto_sizecache_all) = false;
option (gogoproto.equal_all) = true;

//option (gogoproto.populate_all) = true;
//option (gogoproto.testgen_all) = true;


service Forted {
    rpc CreateSurebet (CreateSurebetRequest) returns (CreateSurebetResponse) {
    }
    rpc PlaceSurebet (PlaceSurebetRequest) returns (PlaceSurebetResponse) {
    }
    rpc CreateSurebetMany (CreateSurebetManyRequest) returns (CreateSurebetManyResponse) {
    }
    rpc Ping (PingRequest) returns (PingResponse) {
    }
    rpc CheckLine (CheckLineRequest) returns (CheckLineResponse) {
    }
    rpc PlaceBet (PlaceBetRequest) returns (PlaceBetResponse) {
    }
    rpc GetResults (GetResultsRequest) returns (GetResultsResponse) {
    }
    rpc ReleaseCheck (ReleaseCheckRequest) returns (ReleaseCheckResponse) {
    }
}

message ReleaseCheckRequest {
    Surebet surebet = 1;
}
message ReleaseCheckResponse {
}
//message ServiceConfig {
//    int64 grpc_port = 1;
//}
message GetResultsRequest {
}
message GetResultsResponse {
    repeated BetResult results = 1 [(gogoproto.nullable) = false];
}
message BetResult {
    int64 surebet_id = 1;
    int64 side_index = 2;
    int64 bet_id = 3;
    double price = 4;
    double stake = 5;
    double win_loss = 6;
    string api_bet_id = 7;
    string api_bet_status = 8;
}

message CreateSurebetManyRequest {
    repeated Surebet surebet = 1;
}
message CreateSurebetManyResponse {
    int64 surebet_count = 1;
}


message PlaceBetRequest {
    Surebet surebet = 2;
}
message PlaceBetResponse {
    SurebetSide side = 1;
}

message CheckLineRequest {
    Surebet surebet = 2;
}
message CheckLineResponse {
    SurebetSide side = 1;
}

message CreateSurebetRequest {
    Surebet surebet = 1;
}
message CreateSurebetResponse {
    int64 surebet_id = 1;
    int64 surebet_hash = 2;
}

message PlaceSurebetRequest {
    Surebet surebet = 1;
}
message PlaceSurebetResponse {
}

message Surebet {
    string created_at = 1;
    string starts = 3;
    string forted_home = 4;
    string forted_away = 5;
    double forted_profit = 6;
    string forted_sport = 7;
    string forted_league = 8;
    string filter_name = 9;
    int64 skynet_id = 10;

    int64 forted_surebet_id = 2;
    int64 surebet_id = 11;
    int64 log_id = 12;
    Calc calc = 13 [(gogoproto.nullable) = false];
    repeated Currency currency = 14 [(gogoproto.nullable) = false];
    repeated SurebetSide members = 15 ;
}
message Calc {
    double profit = 1;
    string first_name = 2;
    string second_name = 3;
    int64 lower_win_index = 4;
    int64 higher_win_index = 5;
    int64 first_index = 8;
    int64 second_index = 9;
    double win_diff = 6;
    double win_diff_rel = 7;

    double middle_diff = 10;
    string surebet_type = 11;
    double gross = 12;
    double hours_before_event = 13;
    double effective_profit = 14;
    double middle_margin = 15;
    int64 roi = 16;
}
message Currency {
    string code = 1;
    double value = 2;
}
message SurebetSide {
    int64 num = 1;
    string service_name = 2;
    string origin = 26;

    int64 service_id = 11;

    string sport_name = 3;
    int64 sport_id = 12;

    string league_name = 4;
    int64 league_id = 13;

    string home = 5;
    int64 home_id = 14;

    string away = 6;
    int64 away_id = 15;

    string market_name = 7;
    int64 market_id = 16;
    string starts = 25;

    double price = 8;
    int64 price_id = 17;
    string url = 9;
    bool initiator = 10;
    string event_id = 18;
    FortedIds forted = 24 [(gogoproto.nullable) = false];
    Check check = 19;
    BetConfig bet_config = 20;
    CheckCalc check_calc = 21;
    ToBet to_bet = 22;
    Bet bet = 23;
    Market market = 27;
}

message Market {
    string bet_type = 1;
    string special = 2;
    int64 period = 3;
    double handicap = 4;
    string side = 5;
    string team = 6;
    bool is_lay = 7;
}
message FortedIds {
    int64 service_id = 1;
    int64 sport_id = 2;
    int64 league_id = 3;
    int64 home_id = 4;
    int64 away_id = 5;
    int64 event_id = 18;
    int64 market_id = 16;
    int64 price_id = 17;
}
message BetConfig {
    string service_name = 8;
    string regime = 11;

    int64 priority = 3;
    int64 max_count_line = 4;
    int64 max_count_event = 5;
    int64 min_stake = 9;
    int64 max_stake = 10;
    int64 max_win = 12;

    double min_percent = 1;
    int64 max_percent = 2;
    int64 max_amount_event = 6;
    int64 max_amount_line = 13;
    double round_value = 7;
    int64 min_roi = 14;
    string sub_name = 15;
}


message CheckCalc {
    string status = 1;
    double max_stake = 2;
    double min_stake = 3;
    double max_win = 4;
    double stake = 5;
    double win = 6;
    bool is_first = 7;
}

message ToBet {
    int64 id = 3;
    int64 try_count = 6;
}
message Bet {
    string status = 1;
    string status_info = 2;

    int64 start = 3;
    int64 done = 6;
    double price = 4;
    double stake = 5;
    string api_bet_id = 7;
}

message Check {
    string status = 1;
    string status_info = 9;
    int64 id = 11;
    int64 account_id = 13;
    string account_login = 14;
    int64 count_line = 2;
    int64 count_event = 3;
    int64 amount_event = 4;
    int64 amount_line = 15;
    double min_bet = 5;
    double max_bet = 6;
    int64 balance = 7;
    double price = 8;
    double currency = 12;
    int64 done = 10;
    double middle_margin = 16;
    string sub_service = 17;
    double fill_factor = 18;
}

message PingRequest {
}
message PingResponse {
}