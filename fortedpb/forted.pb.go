// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: forted.proto

package fortedpb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateSurebetManyRequest struct {
	Surebet []*Surebet `protobuf:"bytes,1,rep,name=surebet,proto3" json:"surebet,omitempty"`
}

func (m *CreateSurebetManyRequest) Reset()      { *m = CreateSurebetManyRequest{} }
func (*CreateSurebetManyRequest) ProtoMessage() {}
func (*CreateSurebetManyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{0}
}
func (m *CreateSurebetManyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSurebetManyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSurebetManyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSurebetManyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSurebetManyRequest.Merge(m, src)
}
func (m *CreateSurebetManyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateSurebetManyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSurebetManyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSurebetManyRequest proto.InternalMessageInfo

func (m *CreateSurebetManyRequest) GetSurebet() []*Surebet {
	if m != nil {
		return m.Surebet
	}
	return nil
}

type CreateSurebetManyResponse struct {
	SurebetCount int64 `protobuf:"varint,1,opt,name=surebet_count,json=surebetCount,proto3" json:"surebet_count,omitempty"`
}

func (m *CreateSurebetManyResponse) Reset()      { *m = CreateSurebetManyResponse{} }
func (*CreateSurebetManyResponse) ProtoMessage() {}
func (*CreateSurebetManyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{1}
}
func (m *CreateSurebetManyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSurebetManyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSurebetManyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSurebetManyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSurebetManyResponse.Merge(m, src)
}
func (m *CreateSurebetManyResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateSurebetManyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSurebetManyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSurebetManyResponse proto.InternalMessageInfo

func (m *CreateSurebetManyResponse) GetSurebetCount() int64 {
	if m != nil {
		return m.SurebetCount
	}
	return 0
}

type PlaceBetRequest struct {
	Num     int64    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	Surebet *Surebet `protobuf:"bytes,2,opt,name=surebet,proto3" json:"surebet,omitempty"`
}

func (m *PlaceBetRequest) Reset()      { *m = PlaceBetRequest{} }
func (*PlaceBetRequest) ProtoMessage() {}
func (*PlaceBetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{2}
}
func (m *PlaceBetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaceBetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaceBetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaceBetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceBetRequest.Merge(m, src)
}
func (m *PlaceBetRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlaceBetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceBetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceBetRequest proto.InternalMessageInfo

func (m *PlaceBetRequest) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *PlaceBetRequest) GetSurebet() *Surebet {
	if m != nil {
		return m.Surebet
	}
	return nil
}

type PlaceBetResponse struct {
	Side *SurebetSide `protobuf:"bytes,1,opt,name=side,proto3" json:"side,omitempty"`
}

func (m *PlaceBetResponse) Reset()      { *m = PlaceBetResponse{} }
func (*PlaceBetResponse) ProtoMessage() {}
func (*PlaceBetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{3}
}
func (m *PlaceBetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaceBetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaceBetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaceBetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceBetResponse.Merge(m, src)
}
func (m *PlaceBetResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlaceBetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceBetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceBetResponse proto.InternalMessageInfo

func (m *PlaceBetResponse) GetSide() *SurebetSide {
	if m != nil {
		return m.Side
	}
	return nil
}

type CheckLineRequest struct {
	Num     int64    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	Surebet *Surebet `protobuf:"bytes,2,opt,name=surebet,proto3" json:"surebet,omitempty"`
}

func (m *CheckLineRequest) Reset()      { *m = CheckLineRequest{} }
func (*CheckLineRequest) ProtoMessage() {}
func (*CheckLineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{4}
}
func (m *CheckLineRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckLineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckLineRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckLineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckLineRequest.Merge(m, src)
}
func (m *CheckLineRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckLineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckLineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckLineRequest proto.InternalMessageInfo

func (m *CheckLineRequest) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *CheckLineRequest) GetSurebet() *Surebet {
	if m != nil {
		return m.Surebet
	}
	return nil
}

type CheckLineResponse struct {
	Side *SurebetSide `protobuf:"bytes,1,opt,name=side,proto3" json:"side,omitempty"`
}

func (m *CheckLineResponse) Reset()      { *m = CheckLineResponse{} }
func (*CheckLineResponse) ProtoMessage() {}
func (*CheckLineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{5}
}
func (m *CheckLineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckLineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckLineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckLineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckLineResponse.Merge(m, src)
}
func (m *CheckLineResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckLineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckLineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckLineResponse proto.InternalMessageInfo

func (m *CheckLineResponse) GetSide() *SurebetSide {
	if m != nil {
		return m.Side
	}
	return nil
}

type CreateSurebetRequest struct {
	Surebet *Surebet `protobuf:"bytes,1,opt,name=surebet,proto3" json:"surebet,omitempty"`
}

func (m *CreateSurebetRequest) Reset()      { *m = CreateSurebetRequest{} }
func (*CreateSurebetRequest) ProtoMessage() {}
func (*CreateSurebetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{6}
}
func (m *CreateSurebetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSurebetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSurebetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSurebetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSurebetRequest.Merge(m, src)
}
func (m *CreateSurebetRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateSurebetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSurebetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSurebetRequest proto.InternalMessageInfo

func (m *CreateSurebetRequest) GetSurebet() *Surebet {
	if m != nil {
		return m.Surebet
	}
	return nil
}

type CreateSurebetResponse struct {
	SurebetId   int64 `protobuf:"varint,1,opt,name=surebet_id,json=surebetId,proto3" json:"surebet_id,omitempty"`
	SurebetHash int64 `protobuf:"varint,2,opt,name=surebet_hash,json=surebetHash,proto3" json:"surebet_hash,omitempty"`
}

func (m *CreateSurebetResponse) Reset()      { *m = CreateSurebetResponse{} }
func (*CreateSurebetResponse) ProtoMessage() {}
func (*CreateSurebetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{7}
}
func (m *CreateSurebetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSurebetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSurebetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSurebetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSurebetResponse.Merge(m, src)
}
func (m *CreateSurebetResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateSurebetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSurebetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSurebetResponse proto.InternalMessageInfo

func (m *CreateSurebetResponse) GetSurebetId() int64 {
	if m != nil {
		return m.SurebetId
	}
	return 0
}

func (m *CreateSurebetResponse) GetSurebetHash() int64 {
	if m != nil {
		return m.SurebetHash
	}
	return 0
}

type PlaceSurebetRequest struct {
	Surebet *Surebet `protobuf:"bytes,1,opt,name=surebet,proto3" json:"surebet,omitempty"`
}

func (m *PlaceSurebetRequest) Reset()      { *m = PlaceSurebetRequest{} }
func (*PlaceSurebetRequest) ProtoMessage() {}
func (*PlaceSurebetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{8}
}
func (m *PlaceSurebetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaceSurebetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaceSurebetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaceSurebetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceSurebetRequest.Merge(m, src)
}
func (m *PlaceSurebetRequest) XXX_Size() int {
	return m.Size()
}
func (m *PlaceSurebetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceSurebetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceSurebetRequest proto.InternalMessageInfo

func (m *PlaceSurebetRequest) GetSurebet() *Surebet {
	if m != nil {
		return m.Surebet
	}
	return nil
}

type PlaceSurebetResponse struct {
	SurebetId int64 `protobuf:"varint,1,opt,name=surebet_id,json=surebetId,proto3" json:"surebet_id,omitempty"`
}

func (m *PlaceSurebetResponse) Reset()      { *m = PlaceSurebetResponse{} }
func (*PlaceSurebetResponse) ProtoMessage() {}
func (*PlaceSurebetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{9}
}
func (m *PlaceSurebetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlaceSurebetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlaceSurebetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlaceSurebetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceSurebetResponse.Merge(m, src)
}
func (m *PlaceSurebetResponse) XXX_Size() int {
	return m.Size()
}
func (m *PlaceSurebetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceSurebetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceSurebetResponse proto.InternalMessageInfo

func (m *PlaceSurebetResponse) GetSurebetId() int64 {
	if m != nil {
		return m.SurebetId
	}
	return 0
}

type Surebet struct {
	CreatedAt    string         `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	SurebetHash  string         `protobuf:"bytes,2,opt,name=surebet_hash,json=surebetHash,proto3" json:"surebet_hash,omitempty"`
	Starts       string         `protobuf:"bytes,3,opt,name=starts,proto3" json:"starts,omitempty"`
	FortedHome   string         `protobuf:"bytes,4,opt,name=forted_home,json=fortedHome,proto3" json:"forted_home,omitempty"`
	FortedAway   string         `protobuf:"bytes,5,opt,name=forted_away,json=fortedAway,proto3" json:"forted_away,omitempty"`
	FortedProfit string         `protobuf:"bytes,6,opt,name=forted_profit,json=fortedProfit,proto3" json:"forted_profit,omitempty"`
	FortedSport  string         `protobuf:"bytes,7,opt,name=forted_sport,json=fortedSport,proto3" json:"forted_sport,omitempty"`
	FortedLeague string         `protobuf:"bytes,8,opt,name=forted_league,json=fortedLeague,proto3" json:"forted_league,omitempty"`
	FilterName   string         `protobuf:"bytes,9,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"`
	SkynetId     int64          `protobuf:"varint,10,opt,name=skynet_id,json=skynetId,proto3" json:"skynet_id,omitempty"`
	SurebetId    int64          `protobuf:"varint,11,opt,name=surebet_id,json=surebetId,proto3" json:"surebet_id,omitempty"`
	LogId        int64          `protobuf:"varint,12,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	Calc         *Calc          `protobuf:"bytes,13,opt,name=calc,proto3" json:"calc,omitempty"`
	Members      []*SurebetSide `protobuf:"bytes,15,rep,name=members,proto3" json:"members,omitempty"`
}

func (m *Surebet) Reset()      { *m = Surebet{} }
func (*Surebet) ProtoMessage() {}
func (*Surebet) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{10}
}
func (m *Surebet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Surebet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Surebet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Surebet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Surebet.Merge(m, src)
}
func (m *Surebet) XXX_Size() int {
	return m.Size()
}
func (m *Surebet) XXX_DiscardUnknown() {
	xxx_messageInfo_Surebet.DiscardUnknown(m)
}

var xxx_messageInfo_Surebet proto.InternalMessageInfo

func (m *Surebet) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Surebet) GetSurebetHash() string {
	if m != nil {
		return m.SurebetHash
	}
	return ""
}

func (m *Surebet) GetStarts() string {
	if m != nil {
		return m.Starts
	}
	return ""
}

func (m *Surebet) GetFortedHome() string {
	if m != nil {
		return m.FortedHome
	}
	return ""
}

func (m *Surebet) GetFortedAway() string {
	if m != nil {
		return m.FortedAway
	}
	return ""
}

func (m *Surebet) GetFortedProfit() string {
	if m != nil {
		return m.FortedProfit
	}
	return ""
}

func (m *Surebet) GetFortedSport() string {
	if m != nil {
		return m.FortedSport
	}
	return ""
}

func (m *Surebet) GetFortedLeague() string {
	if m != nil {
		return m.FortedLeague
	}
	return ""
}

func (m *Surebet) GetFilterName() string {
	if m != nil {
		return m.FilterName
	}
	return ""
}

func (m *Surebet) GetSkynetId() int64 {
	if m != nil {
		return m.SkynetId
	}
	return 0
}

func (m *Surebet) GetSurebetId() int64 {
	if m != nil {
		return m.SurebetId
	}
	return 0
}

func (m *Surebet) GetLogId() int64 {
	if m != nil {
		return m.LogId
	}
	return 0
}

func (m *Surebet) GetCalc() *Calc {
	if m != nil {
		return m.Calc
	}
	return nil
}

func (m *Surebet) GetMembers() []*SurebetSide {
	if m != nil {
		return m.Members
	}
	return nil
}

type SurebetSide struct {
	Num         int64      `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	ServiceName string     `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceId   int64      `protobuf:"varint,11,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	SportName   string     `protobuf:"bytes,3,opt,name=sport_name,json=sportName,proto3" json:"sport_name,omitempty"`
	SportId     int64      `protobuf:"varint,12,opt,name=sport_id,json=sportId,proto3" json:"sport_id,omitempty"`
	LeagueName  string     `protobuf:"bytes,4,opt,name=league_name,json=leagueName,proto3" json:"league_name,omitempty"`
	LeagueId    int64      `protobuf:"varint,13,opt,name=league_id,json=leagueId,proto3" json:"league_id,omitempty"`
	Home        string     `protobuf:"bytes,5,opt,name=home,proto3" json:"home,omitempty"`
	HomeId      int64      `protobuf:"varint,14,opt,name=home_id,json=homeId,proto3" json:"home_id,omitempty"`
	Away        string     `protobuf:"bytes,6,opt,name=away,proto3" json:"away,omitempty"`
	AwayId      int64      `protobuf:"varint,15,opt,name=away_id,json=awayId,proto3" json:"away_id,omitempty"`
	MarketName  string     `protobuf:"bytes,7,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`
	MarketId    int64      `protobuf:"varint,16,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	Price       float64    `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	PriceId     int64      `protobuf:"varint,17,opt,name=price_id,json=priceId,proto3" json:"price_id,omitempty"`
	Url         string     `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	Initiator   bool       `protobuf:"varint,10,opt,name=initiator,proto3" json:"initiator,omitempty"`
	EventId     int64      `protobuf:"varint,18,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Check       *Check     `protobuf:"bytes,19,opt,name=check,proto3" json:"check,omitempty"`
	BetConfig   *BetConfig `protobuf:"bytes,20,opt,name=bet_config,json=betConfig,proto3" json:"bet_config,omitempty"`
	CheckCalc   *CheckCalc `protobuf:"bytes,21,opt,name=check_calc,json=checkCalc,proto3" json:"check_calc,omitempty"`
	ToBet       *ToBet     `protobuf:"bytes,22,opt,name=to_bet,json=toBet,proto3" json:"to_bet,omitempty"`
	Bet         *Bet       `protobuf:"bytes,23,opt,name=bet,proto3" json:"bet,omitempty"`
}

func (m *SurebetSide) Reset()      { *m = SurebetSide{} }
func (*SurebetSide) ProtoMessage() {}
func (*SurebetSide) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{11}
}
func (m *SurebetSide) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SurebetSide) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SurebetSide.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SurebetSide) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SurebetSide.Merge(m, src)
}
func (m *SurebetSide) XXX_Size() int {
	return m.Size()
}
func (m *SurebetSide) XXX_DiscardUnknown() {
	xxx_messageInfo_SurebetSide.DiscardUnknown(m)
}

var xxx_messageInfo_SurebetSide proto.InternalMessageInfo

func (m *SurebetSide) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *SurebetSide) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *SurebetSide) GetServiceId() int64 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

func (m *SurebetSide) GetSportName() string {
	if m != nil {
		return m.SportName
	}
	return ""
}

func (m *SurebetSide) GetSportId() int64 {
	if m != nil {
		return m.SportId
	}
	return 0
}

func (m *SurebetSide) GetLeagueName() string {
	if m != nil {
		return m.LeagueName
	}
	return ""
}

func (m *SurebetSide) GetLeagueId() int64 {
	if m != nil {
		return m.LeagueId
	}
	return 0
}

func (m *SurebetSide) GetHome() string {
	if m != nil {
		return m.Home
	}
	return ""
}

func (m *SurebetSide) GetHomeId() int64 {
	if m != nil {
		return m.HomeId
	}
	return 0
}

func (m *SurebetSide) GetAway() string {
	if m != nil {
		return m.Away
	}
	return ""
}

func (m *SurebetSide) GetAwayId() int64 {
	if m != nil {
		return m.AwayId
	}
	return 0
}

func (m *SurebetSide) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *SurebetSide) GetMarketId() int64 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *SurebetSide) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SurebetSide) GetPriceId() int64 {
	if m != nil {
		return m.PriceId
	}
	return 0
}

func (m *SurebetSide) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *SurebetSide) GetInitiator() bool {
	if m != nil {
		return m.Initiator
	}
	return false
}

func (m *SurebetSide) GetEventId() int64 {
	if m != nil {
		return m.EventId
	}
	return 0
}

func (m *SurebetSide) GetCheck() *Check {
	if m != nil {
		return m.Check
	}
	return nil
}

func (m *SurebetSide) GetBetConfig() *BetConfig {
	if m != nil {
		return m.BetConfig
	}
	return nil
}

func (m *SurebetSide) GetCheckCalc() *CheckCalc {
	if m != nil {
		return m.CheckCalc
	}
	return nil
}

func (m *SurebetSide) GetToBet() *ToBet {
	if m != nil {
		return m.ToBet
	}
	return nil
}

func (m *SurebetSide) GetBet() *Bet {
	if m != nil {
		return m.Bet
	}
	return nil
}

type BetConfig struct {
	ServiceName    string  `protobuf:"bytes,8,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Regime         string  `protobuf:"bytes,11,opt,name=regime,proto3" json:"regime,omitempty"`
	Priority       int64   `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	MaxCountLine   int64   `protobuf:"varint,4,opt,name=max_count_line,json=maxCountLine,proto3" json:"max_count_line,omitempty"`
	MaxCountEvent  int64   `protobuf:"varint,5,opt,name=max_count_event,json=maxCountEvent,proto3" json:"max_count_event,omitempty"`
	MinStake       float64 `protobuf:"fixed64,9,opt,name=min_stake,json=minStake,proto3" json:"min_stake,omitempty"`
	MaxStake       float64 `protobuf:"fixed64,10,opt,name=max_stake,json=maxStake,proto3" json:"max_stake,omitempty"`
	MaxWin         float64 `protobuf:"fixed64,12,opt,name=max_win,json=maxWin,proto3" json:"max_win,omitempty"`
	MinPercent     float64 `protobuf:"fixed64,1,opt,name=min_percent,json=minPercent,proto3" json:"min_percent,omitempty"`
	MaxPercent     float64 `protobuf:"fixed64,2,opt,name=max_percent,json=maxPercent,proto3" json:"max_percent,omitempty"`
	MaxAmountEvent float64 `protobuf:"fixed64,6,opt,name=max_amount_event,json=maxAmountEvent,proto3" json:"max_amount_event,omitempty"`
	RoundValue     float64 `protobuf:"fixed64,7,opt,name=round_value,json=roundValue,proto3" json:"round_value,omitempty"`
}

func (m *BetConfig) Reset()      { *m = BetConfig{} }
func (*BetConfig) ProtoMessage() {}
func (*BetConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{12}
}
func (m *BetConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BetConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BetConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BetConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BetConfig.Merge(m, src)
}
func (m *BetConfig) XXX_Size() int {
	return m.Size()
}
func (m *BetConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_BetConfig.DiscardUnknown(m)
}

var xxx_messageInfo_BetConfig proto.InternalMessageInfo

func (m *BetConfig) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *BetConfig) GetRegime() string {
	if m != nil {
		return m.Regime
	}
	return ""
}

func (m *BetConfig) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *BetConfig) GetMaxCountLine() int64 {
	if m != nil {
		return m.MaxCountLine
	}
	return 0
}

func (m *BetConfig) GetMaxCountEvent() int64 {
	if m != nil {
		return m.MaxCountEvent
	}
	return 0
}

func (m *BetConfig) GetMinStake() float64 {
	if m != nil {
		return m.MinStake
	}
	return 0
}

func (m *BetConfig) GetMaxStake() float64 {
	if m != nil {
		return m.MaxStake
	}
	return 0
}

func (m *BetConfig) GetMaxWin() float64 {
	if m != nil {
		return m.MaxWin
	}
	return 0
}

func (m *BetConfig) GetMinPercent() float64 {
	if m != nil {
		return m.MinPercent
	}
	return 0
}

func (m *BetConfig) GetMaxPercent() float64 {
	if m != nil {
		return m.MaxPercent
	}
	return 0
}

func (m *BetConfig) GetMaxAmountEvent() float64 {
	if m != nil {
		return m.MaxAmountEvent
	}
	return 0
}

func (m *BetConfig) GetRoundValue() float64 {
	if m != nil {
		return m.RoundValue
	}
	return 0
}

type Calc struct {
	Profit         float64 `protobuf:"fixed64,1,opt,name=profit,proto3" json:"profit,omitempty"`
	FirstName      string  `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	SecondName     string  `protobuf:"bytes,3,opt,name=second_name,json=secondName,proto3" json:"second_name,omitempty"`
	LowerWinIndex  int64   `protobuf:"varint,4,opt,name=lower_win_index,json=lowerWinIndex,proto3" json:"lower_win_index,omitempty"`
	HigherWinIndex int64   `protobuf:"varint,5,opt,name=higher_win_index,json=higherWinIndex,proto3" json:"higher_win_index,omitempty"`
	FirstIndex     int64   `protobuf:"varint,8,opt,name=first_index,json=firstIndex,proto3" json:"first_index,omitempty"`
	SecondIndex    int64   `protobuf:"varint,9,opt,name=second_index,json=secondIndex,proto3" json:"second_index,omitempty"`
	WinDiff        float64 `protobuf:"fixed64,6,opt,name=win_diff,json=winDiff,proto3" json:"win_diff,omitempty"`
	WinDiffRel     float64 `protobuf:"fixed64,7,opt,name=win_diff_rel,json=winDiffRel,proto3" json:"win_diff_rel,omitempty"`
}

func (m *Calc) Reset()      { *m = Calc{} }
func (*Calc) ProtoMessage() {}
func (*Calc) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{13}
}
func (m *Calc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Calc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Calc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Calc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Calc.Merge(m, src)
}
func (m *Calc) XXX_Size() int {
	return m.Size()
}
func (m *Calc) XXX_DiscardUnknown() {
	xxx_messageInfo_Calc.DiscardUnknown(m)
}

var xxx_messageInfo_Calc proto.InternalMessageInfo

func (m *Calc) GetProfit() float64 {
	if m != nil {
		return m.Profit
	}
	return 0
}

func (m *Calc) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Calc) GetSecondName() string {
	if m != nil {
		return m.SecondName
	}
	return ""
}

func (m *Calc) GetLowerWinIndex() int64 {
	if m != nil {
		return m.LowerWinIndex
	}
	return 0
}

func (m *Calc) GetHigherWinIndex() int64 {
	if m != nil {
		return m.HigherWinIndex
	}
	return 0
}

func (m *Calc) GetFirstIndex() int64 {
	if m != nil {
		return m.FirstIndex
	}
	return 0
}

func (m *Calc) GetSecondIndex() int64 {
	if m != nil {
		return m.SecondIndex
	}
	return 0
}

func (m *Calc) GetWinDiff() float64 {
	if m != nil {
		return m.WinDiff
	}
	return 0
}

func (m *Calc) GetWinDiffRel() float64 {
	if m != nil {
		return m.WinDiffRel
	}
	return 0
}

type CheckCalc struct {
	Status   string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	MaxStake float64 `protobuf:"fixed64,2,opt,name=max_stake,json=maxStake,proto3" json:"max_stake,omitempty"`
	MinStake float64 `protobuf:"fixed64,3,opt,name=min_stake,json=minStake,proto3" json:"min_stake,omitempty"`
	MaxWin   float64 `protobuf:"fixed64,4,opt,name=max_win,json=maxWin,proto3" json:"max_win,omitempty"`
	Stake    float64 `protobuf:"fixed64,5,opt,name=stake,proto3" json:"stake,omitempty"`
	Win      float64 `protobuf:"fixed64,6,opt,name=win,proto3" json:"win,omitempty"`
	IsFirst  bool    `protobuf:"varint,7,opt,name=is_first,json=isFirst,proto3" json:"is_first,omitempty"`
}

func (m *CheckCalc) Reset()      { *m = CheckCalc{} }
func (*CheckCalc) ProtoMessage() {}
func (*CheckCalc) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{14}
}
func (m *CheckCalc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckCalc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckCalc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckCalc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckCalc.Merge(m, src)
}
func (m *CheckCalc) XXX_Size() int {
	return m.Size()
}
func (m *CheckCalc) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckCalc.DiscardUnknown(m)
}

var xxx_messageInfo_CheckCalc proto.InternalMessageInfo

func (m *CheckCalc) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CheckCalc) GetMaxStake() float64 {
	if m != nil {
		return m.MaxStake
	}
	return 0
}

func (m *CheckCalc) GetMinStake() float64 {
	if m != nil {
		return m.MinStake
	}
	return 0
}

func (m *CheckCalc) GetMaxWin() float64 {
	if m != nil {
		return m.MaxWin
	}
	return 0
}

func (m *CheckCalc) GetStake() float64 {
	if m != nil {
		return m.Stake
	}
	return 0
}

func (m *CheckCalc) GetWin() float64 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *CheckCalc) GetIsFirst() bool {
	if m != nil {
		return m.IsFirst
	}
	return false
}

type ToBet struct {
	Stake float64 `protobuf:"fixed64,1,opt,name=stake,proto3" json:"stake,omitempty"`
}

func (m *ToBet) Reset()      { *m = ToBet{} }
func (*ToBet) ProtoMessage() {}
func (*ToBet) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{15}
}
func (m *ToBet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ToBet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ToBet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ToBet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ToBet.Merge(m, src)
}
func (m *ToBet) XXX_Size() int {
	return m.Size()
}
func (m *ToBet) XXX_DiscardUnknown() {
	xxx_messageInfo_ToBet.DiscardUnknown(m)
}

var xxx_messageInfo_ToBet proto.InternalMessageInfo

func (m *ToBet) GetStake() float64 {
	if m != nil {
		return m.Stake
	}
	return 0
}

type Bet struct {
	Status     string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	StatusInfo string  `protobuf:"bytes,2,opt,name=status_info,json=statusInfo,proto3" json:"status_info,omitempty"`
	Time       string  `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	Price      float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	Stake      float64 `protobuf:"fixed64,5,opt,name=stake,proto3" json:"stake,omitempty"`
	TryCount   int64   `protobuf:"varint,6,opt,name=try_count,json=tryCount,proto3" json:"try_count,omitempty"`
}

func (m *Bet) Reset()      { *m = Bet{} }
func (*Bet) ProtoMessage() {}
func (*Bet) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{16}
}
func (m *Bet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bet.Merge(m, src)
}
func (m *Bet) XXX_Size() int {
	return m.Size()
}
func (m *Bet) XXX_DiscardUnknown() {
	xxx_messageInfo_Bet.DiscardUnknown(m)
}

var xxx_messageInfo_Bet proto.InternalMessageInfo

func (m *Bet) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Bet) GetStatusInfo() string {
	if m != nil {
		return m.StatusInfo
	}
	return ""
}

func (m *Bet) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *Bet) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Bet) GetStake() float64 {
	if m != nil {
		return m.Stake
	}
	return 0
}

func (m *Bet) GetTryCount() int64 {
	if m != nil {
		return m.TryCount
	}
	return 0
}

type Check struct {
	Status      string  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CountLine   int64   `protobuf:"varint,2,opt,name=count_line,json=countLine,proto3" json:"count_line,omitempty"`
	CountEvent  int64   `protobuf:"varint,3,opt,name=count_event,json=countEvent,proto3" json:"count_event,omitempty"`
	AmountEvent float64 `protobuf:"fixed64,4,opt,name=amount_event,json=amountEvent,proto3" json:"amount_event,omitempty"`
	MinBet      float64 `protobuf:"fixed64,5,opt,name=min_bet,json=minBet,proto3" json:"min_bet,omitempty"`
	MaxBet      float64 `protobuf:"fixed64,6,opt,name=max_bet,json=maxBet,proto3" json:"max_bet,omitempty"`
	Balance     float64 `protobuf:"fixed64,7,opt,name=balance,proto3" json:"balance,omitempty"`
	Price       float64 `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	StatusInfo  string  `protobuf:"bytes,9,opt,name=status_info,json=statusInfo,proto3" json:"status_info,omitempty"`
	Time        string  `protobuf:"bytes,10,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *Check) Reset()      { *m = Check{} }
func (*Check) ProtoMessage() {}
func (*Check) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{17}
}
func (m *Check) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Check) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Check.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Check) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Check.Merge(m, src)
}
func (m *Check) XXX_Size() int {
	return m.Size()
}
func (m *Check) XXX_DiscardUnknown() {
	xxx_messageInfo_Check.DiscardUnknown(m)
}

var xxx_messageInfo_Check proto.InternalMessageInfo

func (m *Check) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Check) GetCountLine() int64 {
	if m != nil {
		return m.CountLine
	}
	return 0
}

func (m *Check) GetCountEvent() int64 {
	if m != nil {
		return m.CountEvent
	}
	return 0
}

func (m *Check) GetAmountEvent() float64 {
	if m != nil {
		return m.AmountEvent
	}
	return 0
}

func (m *Check) GetMinBet() float64 {
	if m != nil {
		return m.MinBet
	}
	return 0
}

func (m *Check) GetMaxBet() float64 {
	if m != nil {
		return m.MaxBet
	}
	return 0
}

func (m *Check) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Check) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Check) GetStatusInfo() string {
	if m != nil {
		return m.StatusInfo
	}
	return ""
}

func (m *Check) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

type PingRequest struct {
}

func (m *PingRequest) Reset()      { *m = PingRequest{} }
func (*PingRequest) ProtoMessage() {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{18}
}
func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return m.Size()
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

type PingResponse struct {
}

func (m *PingResponse) Reset()      { *m = PingResponse{} }
func (*PingResponse) ProtoMessage() {}
func (*PingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{19}
}
func (m *PingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResponse.Merge(m, src)
}
func (m *PingResponse) XXX_Size() int {
	return m.Size()
}
func (m *PingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PingResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CreateSurebetManyRequest)(nil), "fortedpb.CreateSurebetManyRequest")
	proto.RegisterType((*CreateSurebetManyResponse)(nil), "fortedpb.CreateSurebetManyResponse")
	proto.RegisterType((*PlaceBetRequest)(nil), "fortedpb.PlaceBetRequest")
	proto.RegisterType((*PlaceBetResponse)(nil), "fortedpb.PlaceBetResponse")
	proto.RegisterType((*CheckLineRequest)(nil), "fortedpb.CheckLineRequest")
	proto.RegisterType((*CheckLineResponse)(nil), "fortedpb.CheckLineResponse")
	proto.RegisterType((*CreateSurebetRequest)(nil), "fortedpb.CreateSurebetRequest")
	proto.RegisterType((*CreateSurebetResponse)(nil), "fortedpb.CreateSurebetResponse")
	proto.RegisterType((*PlaceSurebetRequest)(nil), "fortedpb.PlaceSurebetRequest")
	proto.RegisterType((*PlaceSurebetResponse)(nil), "fortedpb.PlaceSurebetResponse")
	proto.RegisterType((*Surebet)(nil), "fortedpb.Surebet")
	proto.RegisterType((*SurebetSide)(nil), "fortedpb.SurebetSide")
	proto.RegisterType((*BetConfig)(nil), "fortedpb.BetConfig")
	proto.RegisterType((*Calc)(nil), "fortedpb.Calc")
	proto.RegisterType((*CheckCalc)(nil), "fortedpb.CheckCalc")
	proto.RegisterType((*ToBet)(nil), "fortedpb.ToBet")
	proto.RegisterType((*Bet)(nil), "fortedpb.Bet")
	proto.RegisterType((*Check)(nil), "fortedpb.Check")
	proto.RegisterType((*PingRequest)(nil), "fortedpb.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "fortedpb.PingResponse")
}

func init() { proto.RegisterFile("forted.proto", fileDescriptor_16a4d244bf92f218) }

var fileDescriptor_16a4d244bf92f218 = []byte{
	// 1521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcd, 0x6e, 0x1b, 0x47,
	0x12, 0xd6, 0x88, 0xbf, 0x53, 0xa4, 0xfe, 0xda, 0x92, 0x3c, 0xa2, 0xd7, 0x94, 0x3d, 0xde, 0x35,
	0xbc, 0x58, 0xac, 0x0c, 0x68, 0xb1, 0xd8, 0xd3, 0x2e, 0xd6, 0xd2, 0xae, 0x63, 0x02, 0x4e, 0xa2,
	0x8c, 0x82, 0x18, 0xc9, 0x21, 0x83, 0xe1, 0x4c, 0x93, 0x6c, 0x88, 0x33, 0xa3, 0xcc, 0x0c, 0x2d,
	0xea, 0x96, 0x47, 0xf0, 0x35, 0xc8, 0x0b, 0xe4, 0x9a, 0x63, 0x1e, 0x20, 0x40, 0x8e, 0x06, 0x72,
	0x31, 0x90, 0x4b, 0x2c, 0xbf, 0x40, 0x1e, 0x21, 0xa8, 0xaa, 0x1e, 0x72, 0x48, 0x91, 0x71, 0x82,
	0xe4, 0xc4, 0xae, 0xaa, 0xaf, 0x8b, 0xf5, 0xf3, 0x75, 0x75, 0x0f, 0x34, 0x7b, 0x71, 0x92, 0xc9,
	0xe0, 0xe0, 0x3c, 0x89, 0xb3, 0x58, 0xd4, 0x59, 0x3a, 0xef, 0xb6, 0xfe, 0xde, 0x57, 0xd9, 0x60,
	0xd4, 0x3d, 0xf0, 0xe3, 0xf0, 0x61, 0x3f, 0xee, 0xc7, 0x0f, 0x09, 0xd0, 0x1d, 0xf5, 0x48, 0x22,
	0x81, 0x56, 0xbc, 0xd1, 0x7e, 0x07, 0xac, 0xe3, 0x44, 0x7a, 0x99, 0x3c, 0x1d, 0x25, 0xb2, 0x2b,
	0xb3, 0x77, 0xbd, 0xe8, 0xd2, 0x91, 0x9f, 0x8d, 0x64, 0x9a, 0x89, 0xbf, 0x41, 0x2d, 0x65, 0xad,
	0x65, 0xdc, 0x29, 0x3d, 0x68, 0x1c, 0x6e, 0x1d, 0xe4, 0x7f, 0x73, 0xa0, 0xe1, 0x4e, 0x8e, 0xb0,
	0xff, 0x0b, 0x7b, 0x0b, 0x1c, 0xa5, 0xe7, 0x71, 0x94, 0x4a, 0x71, 0x0f, 0xd6, 0x34, 0xce, 0xf5,
	0xe3, 0x51, 0x84, 0xfe, 0x8c, 0x07, 0x25, 0xa7, 0xa9, 0x95, 0xc7, 0xa8, 0xb3, 0x4f, 0x60, 0xe3,
	0x64, 0xe8, 0xf9, 0xf2, 0x48, 0x66, 0x79, 0x04, 0x9b, 0x50, 0x8a, 0x46, 0xa1, 0x46, 0xe3, 0xb2,
	0x18, 0xd3, 0xea, 0x1d, 0xe3, 0x2d, 0x31, 0xfd, 0x1b, 0x36, 0xa7, 0x1e, 0x75, 0x28, 0x7f, 0x85,
	0x72, 0xaa, 0x02, 0x49, 0x3e, 0x1b, 0x87, 0x3b, 0xd7, 0x76, 0x9f, 0xaa, 0x40, 0x3a, 0x04, 0xb1,
	0x3f, 0x80, 0xcd, 0xe3, 0x81, 0xf4, 0xcf, 0x9e, 0xaa, 0x48, 0xfe, 0x41, 0x11, 0xfd, 0x07, 0xb6,
	0x0a, 0x2e, 0x7f, 0x7b, 0x48, 0xc7, 0xb0, 0x3d, 0x53, 0xe5, 0x85, 0xad, 0x7a, 0x5b, 0x10, 0x1f,
	0xc3, 0xce, 0x9c, 0x13, 0x1d, 0xc8, 0x6d, 0x80, 0xbc, 0x4d, 0x2a, 0xd0, 0x39, 0x9a, 0x5a, 0xd3,
	0x09, 0xc4, 0x5d, 0xc8, 0x1b, 0xe6, 0x0e, 0xbc, 0x74, 0x40, 0xe9, 0x96, 0x9c, 0x86, 0xd6, 0x3d,
	0xf1, 0xd2, 0x81, 0x7d, 0x04, 0x37, 0xa8, 0xe2, 0xbf, 0x27, 0xbc, 0x7f, 0xc2, 0xf6, 0xac, 0x8f,
	0x5f, 0x15, 0x9d, 0xfd, 0x43, 0x09, 0x6a, 0x7a, 0x0b, 0x42, 0x7d, 0xca, 0x30, 0x70, 0x3d, 0xfe,
	0x4b, 0xd3, 0x31, 0xb5, 0xe6, 0x51, 0xb6, 0x30, 0x11, 0x73, 0x26, 0x11, 0xb1, 0x0b, 0xd5, 0x34,
	0xf3, 0x92, 0x2c, 0xb5, 0x4a, 0x64, 0xd4, 0x92, 0xd8, 0x87, 0x06, 0x47, 0xee, 0x0e, 0xe2, 0x50,
	0x5a, 0x65, 0x32, 0x02, 0xab, 0x9e, 0xc4, 0xa1, 0x2c, 0x00, 0xbc, 0x0b, 0xef, 0xd2, 0xaa, 0x14,
	0x01, 0x8f, 0x2e, 0xbc, 0x4b, 0x3c, 0x0b, 0x1a, 0x70, 0x9e, 0xc4, 0x3d, 0x95, 0x59, 0x55, 0x82,
	0xe8, 0xf3, 0x7c, 0x42, 0x3a, 0x8c, 0x50, 0x83, 0xd2, 0xf3, 0x38, 0xc9, 0xac, 0x1a, 0x47, 0xc8,
	0xba, 0x53, 0x54, 0x15, 0xfc, 0x0c, 0xa5, 0xd7, 0x1f, 0x49, 0xab, 0x5e, 0xf4, 0xf3, 0x94, 0x74,
	0x14, 0x8d, 0x1a, 0x66, 0x32, 0x71, 0x23, 0x2f, 0x94, 0x96, 0xa9, 0xa3, 0x21, 0xd5, 0x7b, 0x5e,
	0x28, 0xc5, 0x2d, 0x30, 0xd3, 0xb3, 0xcb, 0x88, 0x6b, 0x0a, 0x54, 0xd3, 0x3a, 0x2b, 0x3a, 0xc1,
	0x5c, 0xc5, 0x1b, 0xf3, 0x7c, 0xd8, 0x81, 0xea, 0x30, 0xee, 0xa3, 0xa9, 0x49, 0xa6, 0xca, 0x30,
	0xee, 0x77, 0x02, 0x61, 0x43, 0xd9, 0xf7, 0x86, 0xbe, 0xb5, 0x46, 0x9d, 0x5e, 0x9f, 0x76, 0xfa,
	0xd8, 0x1b, 0xfa, 0x0e, 0xd9, 0xc4, 0x43, 0xa8, 0x85, 0x32, 0xec, 0xca, 0x24, 0xb5, 0x36, 0x68,
	0xb4, 0x2c, 0x61, 0x7d, 0x8e, 0xb2, 0xbf, 0xad, 0x40, 0xa3, 0x60, 0x58, 0x70, 0x0e, 0xb1, 0xa9,
	0x32, 0x79, 0xae, 0x7c, 0xc9, 0xb9, 0xe6, 0x4d, 0x65, 0x1d, 0x25, 0x8b, 0xf9, 0x68, 0x48, 0x21,
	0x1f, 0xd6, 0xe8, 0x74, 0xb1, 0xb4, 0xbc, 0x9f, 0xfb, 0x6e, 0x92, 0x86, 0x76, 0xef, 0x41, 0x9d,
	0xcd, 0x93, 0x84, 0x6b, 0x24, 0x77, 0x02, 0x2c, 0x33, 0x37, 0x81, 0xb7, 0x6a, 0x56, 0xb0, 0x2a,
	0x2f, 0xb3, 0x06, 0xa8, 0x80, 0x0a, 0x53, 0x72, 0xea, 0xac, 0xe8, 0x04, 0x42, 0x40, 0x99, 0xc8,
	0xc4, 0x5c, 0xa1, 0xb5, 0xb8, 0x09, 0x35, 0xfc, 0x45, 0xf8, 0x3a, 0xc1, 0xab, 0x28, 0x32, 0x98,
	0x88, 0xc5, 0xac, 0xa1, 0x35, 0x82, 0xf1, 0x17, 0xc1, 0x1b, 0x0c, 0x46, 0x91, 0xe3, 0x0a, 0xbd,
	0xe4, 0x4c, 0xea, 0x94, 0x98, 0x45, 0xc0, 0xaa, 0x3c, 0x2e, 0x0d, 0x50, 0x81, 0xb5, 0xc9, 0x71,
	0xb1, 0xa2, 0x13, 0x88, 0x6d, 0xa8, 0x9c, 0x27, 0xca, 0x67, 0x66, 0x19, 0x0e, 0x0b, 0x58, 0x06,
	0x5a, 0xe0, 0x8e, 0x2d, 0x2e, 0x03, 0xc9, 0x9d, 0x00, 0x9b, 0x32, 0x4a, 0x86, 0x9a, 0x65, 0xb8,
	0x14, 0x7f, 0x02, 0x53, 0x45, 0x2a, 0x53, 0x5e, 0x16, 0x27, 0x44, 0xaf, 0xba, 0x33, 0x55, 0xa0,
	0x2b, 0xf9, 0x5c, 0x46, 0xf4, 0xe7, 0x82, 0x5d, 0x91, 0xdc, 0x09, 0xc4, 0x5f, 0xa0, 0xe2, 0xe3,
	0xa0, 0xb4, 0x6e, 0x10, 0x8b, 0x36, 0x0a, 0x2c, 0x42, 0xb5, 0xc3, 0x56, 0x71, 0x08, 0xc0, 0x97,
	0x4a, 0xd4, 0x53, 0x7d, 0x6b, 0x9b, 0xb0, 0x37, 0xa6, 0xd8, 0x23, 0xbc, 0x5b, 0xd0, 0xe4, 0x98,
	0xdd, 0x7c, 0x89, 0x7b, 0x68, 0xb3, 0x4b, 0x2c, 0xdd, 0x99, 0xdf, 0x43, 0xfe, 0x89, 0xaa, 0xa6,
	0x9f, 0x2f, 0xc5, 0x7d, 0xa8, 0x66, 0xb1, 0x8b, 0xf3, 0x6b, 0x77, 0x3e, 0x9e, 0x0f, 0x63, 0xbc,
	0x5e, 0x2a, 0x19, 0xfe, 0x88, 0x7d, 0x28, 0x21, 0xe8, 0x26, 0x81, 0xd6, 0x66, 0x02, 0x71, 0xd0,
	0x62, 0xbf, 0x28, 0x81, 0x39, 0x89, 0xea, 0x1a, 0x67, 0xeb, 0xd7, 0x39, 0xbb, 0x0b, 0xd5, 0x44,
	0xf6, 0x55, 0x28, 0x89, 0xaf, 0xa6, 0xa3, 0x25, 0xd1, 0xa2, 0x36, 0xc4, 0x89, 0xca, 0x2e, 0x89,
	0xaa, 0x25, 0x67, 0x22, 0x8b, 0x3f, 0xc3, 0x7a, 0xe8, 0x8d, 0xf9, 0xaa, 0x75, 0x87, 0x2a, 0x62,
	0x46, 0x96, 0x9c, 0x66, 0xe8, 0x8d, 0xe9, 0xae, 0xc5, 0xeb, 0x47, 0xdc, 0x87, 0x8d, 0x29, 0x8a,
	0xea, 0x4e, 0x0c, 0x2c, 0x39, 0x6b, 0x39, 0xec, 0xff, 0xa8, 0x24, 0x8e, 0xa8, 0xc8, 0x4d, 0x33,
	0xef, 0x8c, 0x27, 0x88, 0xe1, 0xd4, 0x43, 0x15, 0x9d, 0xa2, 0xcc, 0x04, 0x1a, 0x6b, 0x23, 0x68,
	0xa3, 0x37, 0x66, 0xe3, 0x4d, 0xa8, 0xa1, 0xf1, 0x42, 0x45, 0x74, 0x60, 0x0c, 0xa7, 0x1a, 0x7a,
	0xe3, 0x67, 0x2a, 0x22, 0x5e, 0xaa, 0xc8, 0x3d, 0x97, 0x89, 0x2f, 0xf5, 0x6b, 0xc0, 0x70, 0x20,
	0x54, 0xd1, 0x09, 0x6b, 0x98, 0xb8, 0xe3, 0x09, 0x60, 0x55, 0x03, 0xbc, 0x71, 0x0e, 0x78, 0x00,
	0x9b, 0x08, 0xf0, 0xc2, 0x42, 0xf4, 0x55, 0x42, 0x61, 0xea, 0x8f, 0xc2, 0x69, 0xf8, 0xfb, 0xd0,
	0x48, 0xe2, 0x51, 0x14, 0xb8, 0xcf, 0xbd, 0xe1, 0x88, 0xcf, 0x80, 0xe1, 0x00, 0xa9, 0x3e, 0x42,
	0x8d, 0xfd, 0xf5, 0x2a, 0x94, 0xa9, 0xc9, 0xbb, 0x50, 0xd5, 0x23, 0x99, 0x03, 0xd2, 0x12, 0xce,
	0x85, 0x9e, 0x4a, 0xd2, 0xac, 0x38, 0x57, 0x4c, 0xd2, 0x50, 0x87, 0xf6, 0xa1, 0x91, 0x4a, 0x3f,
	0x8e, 0x82, 0xe2, 0xdc, 0x00, 0x56, 0x11, 0xe0, 0x3e, 0x6c, 0x0c, 0xe3, 0x0b, 0x99, 0x60, 0x21,
	0x5c, 0x15, 0x05, 0x72, 0xac, 0xfb, 0xb1, 0x46, 0xea, 0x67, 0x2a, 0xea, 0xa0, 0x12, 0x73, 0x1a,
	0xa8, 0xfe, 0x60, 0x06, 0xc8, 0x1d, 0x59, 0x67, 0xfd, 0x04, 0x49, 0x63, 0x1d, 0x23, 0x62, 0x50,
	0x9d, 0x40, 0x1c, 0x24, 0x03, 0x88, 0x58, 0x14, 0x13, 0x23, 0x4c, 0x7d, 0x55, 0x93, 0x8e, 0x21,
	0x7b, 0x50, 0xc7, 0xbf, 0x09, 0x54, 0xaf, 0xa7, 0x2b, 0x57, 0xbb, 0x50, 0xd1, 0xff, 0x54, 0xaf,
	0x27, 0xee, 0x40, 0x33, 0x37, 0xb9, 0x89, 0x1c, 0xe6, 0x35, 0xd3, 0x66, 0x47, 0x0e, 0xed, 0x6f,
	0x0c, 0x30, 0x27, 0x07, 0x45, 0x5f, 0x96, 0xd9, 0x28, 0xd5, 0x57, 0xad, 0x96, 0x66, 0xc9, 0xb1,
	0x3a, 0x47, 0x8e, 0x19, 0x5a, 0x95, 0xe6, 0x68, 0x55, 0x60, 0x4e, 0x79, 0x86, 0x39, 0xdb, 0x50,
	0xe1, 0x1d, 0x15, 0x9e, 0x49, 0x24, 0xe0, 0xe0, 0x41, 0x28, 0xa7, 0x81, 0x4b, 0xcc, 0x4e, 0xa5,
	0x2e, 0x55, 0x84, 0xc2, 0xaf, 0x3b, 0x35, 0x95, 0x3e, 0x46, 0xd1, 0xbe, 0x0d, 0x15, 0x3a, 0xb3,
	0x53, 0x5f, 0x46, 0xc1, 0x97, 0xfd, 0xa5, 0x01, 0x25, 0xb4, 0x2e, 0x4b, 0x0a, 0xdb, 0x4d, 0x2b,
	0x57, 0x45, 0xbd, 0x58, 0xd3, 0x01, 0x58, 0xd5, 0x89, 0x7a, 0x31, 0x4e, 0xe8, 0x4c, 0x4d, 0x88,
	0x40, 0xeb, 0xe9, 0x28, 0x2d, 0x17, 0x47, 0xe9, 0xe2, 0x64, 0x6e, 0x81, 0x99, 0x25, 0x97, 0xfa,
	0xa1, 0x5c, 0xe5, 0xa3, 0x9d, 0x25, 0x97, 0xfc, 0x48, 0xfe, 0x62, 0x15, 0x2a, 0x54, 0xf8, 0xa5,
	0xf1, 0xe1, 0xdb, 0x67, 0x7a, 0xf0, 0xf9, 0x8d, 0x66, 0xfa, 0x93, 0x53, 0xbf, 0x0f, 0x8d, 0xe2,
	0x89, 0xe7, 0xd1, 0xc1, 0x3b, 0xf8, 0xbc, 0xdc, 0x85, 0xe6, 0xcc, 0xa9, 0xe2, 0x88, 0x1b, 0x5e,
	0xe1, 0x48, 0x61, 0x77, 0x54, 0x44, 0xe3, 0xb0, 0xa2, 0xbb, 0xa3, 0x22, 0xac, 0x99, 0x6e, 0x1b,
	0x1a, 0xaa, 0x93, 0xb6, 0xa1, 0xc1, 0x82, 0x5a, 0xd7, 0x1b, 0x7a, 0x91, 0x9f, 0x1f, 0xc0, 0x5c,
	0x5c, 0x72, 0xc9, 0xcc, 0x15, 0xd9, 0x5c, 0x5a, 0x64, 0x98, 0x16, 0xd9, 0x5e, 0x83, 0xc6, 0x89,
	0x8a, 0xfa, 0xfa, 0xd1, 0x69, 0xaf, 0x43, 0x93, 0x45, 0x7e, 0x3f, 0x1e, 0x7e, 0x5f, 0x82, 0xea,
	0x63, 0x1a, 0xc8, 0xc2, 0x81, 0xb5, 0x99, 0x17, 0xb0, 0x68, 0x17, 0xe6, 0xff, 0x82, 0xf7, 0x75,
	0x6b, 0x7f, 0xa9, 0x9d, 0x9d, 0xdb, 0x2b, 0xe2, 0x7d, 0x68, 0x16, 0x9f, 0xad, 0xe2, 0xf6, 0x74,
	0xcb, 0x82, 0x27, 0x71, 0xab, 0xbd, 0xcc, 0x3c, 0x71, 0xf8, 0x29, 0x6c, 0x5d, 0xfb, 0xa2, 0x12,
	0xf6, 0x92, 0x40, 0x0a, 0xdf, 0x6d, 0xad, 0x7b, 0xbf, 0x88, 0x99, 0xf8, 0xff, 0x17, 0x94, 0xb1,
	0x3e, 0xa2, 0xf0, 0xf4, 0x2a, 0x94, 0xaf, 0xb5, 0x3b, 0xaf, 0x9e, 0x6c, 0x7c, 0xac, 0xcf, 0x3e,
	0xf1, 0xa9, 0x35, 0x77, 0x73, 0x16, 0x3e, 0x96, 0x5a, 0xb7, 0x16, 0xda, 0x26, 0x7e, 0x8e, 0xa1,
	0x9e, 0x7f, 0x9e, 0x89, 0xbd, 0xb9, 0x72, 0x4c, 0x3f, 0x02, 0x5b, 0xad, 0x45, 0xa6, 0xdc, 0xc9,
	0xd1, 0xe1, 0xab, 0xd7, 0xed, 0x95, 0x9f, 0x5e, 0xb7, 0x8d, 0xcf, 0xaf, 0xda, 0xc6, 0x57, 0x57,
	0x6d, 0xe3, 0xbb, 0xab, 0xb6, 0xf1, 0xf2, 0xaa, 0x6d, 0xfc, 0x78, 0xd5, 0x36, 0x5e, 0xbc, 0x69,
	0xaf, 0xbc, 0x7c, 0xd3, 0x5e, 0x79, 0xf5, 0xa6, 0xbd, 0xf2, 0xc9, 0xe4, 0x1b, 0xb9, 0x5b, 0xa5,
	0x6f, 0xdf, 0x7f, 0xfc, 0x1c, 0x00, 0x00, 0xff, 0xff, 0x96, 0x70, 0xc7, 0x4f, 0x44, 0x0f, 0x00,
	0x00,
}

func (this *CreateSurebetManyRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSurebetManyRequest)
	if !ok {
		that2, ok := that.(CreateSurebetManyRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Surebet) != len(that1.Surebet) {
		return false
	}
	for i := range this.Surebet {
		if !this.Surebet[i].Equal(that1.Surebet[i]) {
			return false
		}
	}
	return true
}
func (this *CreateSurebetManyResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSurebetManyResponse)
	if !ok {
		that2, ok := that.(CreateSurebetManyResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SurebetCount != that1.SurebetCount {
		return false
	}
	return true
}
func (this *PlaceBetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlaceBetRequest)
	if !ok {
		that2, ok := that.(PlaceBetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if !this.Surebet.Equal(that1.Surebet) {
		return false
	}
	return true
}
func (this *PlaceBetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlaceBetResponse)
	if !ok {
		that2, ok := that.(PlaceBetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Side.Equal(that1.Side) {
		return false
	}
	return true
}
func (this *CheckLineRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckLineRequest)
	if !ok {
		that2, ok := that.(CheckLineRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if !this.Surebet.Equal(that1.Surebet) {
		return false
	}
	return true
}
func (this *CheckLineResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckLineResponse)
	if !ok {
		that2, ok := that.(CheckLineResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Side.Equal(that1.Side) {
		return false
	}
	return true
}
func (this *CreateSurebetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSurebetRequest)
	if !ok {
		that2, ok := that.(CreateSurebetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Surebet.Equal(that1.Surebet) {
		return false
	}
	return true
}
func (this *CreateSurebetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSurebetResponse)
	if !ok {
		that2, ok := that.(CreateSurebetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SurebetId != that1.SurebetId {
		return false
	}
	if this.SurebetHash != that1.SurebetHash {
		return false
	}
	return true
}
func (this *PlaceSurebetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlaceSurebetRequest)
	if !ok {
		that2, ok := that.(PlaceSurebetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Surebet.Equal(that1.Surebet) {
		return false
	}
	return true
}
func (this *PlaceSurebetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PlaceSurebetResponse)
	if !ok {
		that2, ok := that.(PlaceSurebetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SurebetId != that1.SurebetId {
		return false
	}
	return true
}
func (this *Surebet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Surebet)
	if !ok {
		that2, ok := that.(Surebet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CreatedAt != that1.CreatedAt {
		return false
	}
	if this.SurebetHash != that1.SurebetHash {
		return false
	}
	if this.Starts != that1.Starts {
		return false
	}
	if this.FortedHome != that1.FortedHome {
		return false
	}
	if this.FortedAway != that1.FortedAway {
		return false
	}
	if this.FortedProfit != that1.FortedProfit {
		return false
	}
	if this.FortedSport != that1.FortedSport {
		return false
	}
	if this.FortedLeague != that1.FortedLeague {
		return false
	}
	if this.FilterName != that1.FilterName {
		return false
	}
	if this.SkynetId != that1.SkynetId {
		return false
	}
	if this.SurebetId != that1.SurebetId {
		return false
	}
	if this.LogId != that1.LogId {
		return false
	}
	if !this.Calc.Equal(that1.Calc) {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	return true
}
func (this *SurebetSide) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SurebetSide)
	if !ok {
		that2, ok := that.(SurebetSide)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Num != that1.Num {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if this.ServiceId != that1.ServiceId {
		return false
	}
	if this.SportName != that1.SportName {
		return false
	}
	if this.SportId != that1.SportId {
		return false
	}
	if this.LeagueName != that1.LeagueName {
		return false
	}
	if this.LeagueId != that1.LeagueId {
		return false
	}
	if this.Home != that1.Home {
		return false
	}
	if this.HomeId != that1.HomeId {
		return false
	}
	if this.Away != that1.Away {
		return false
	}
	if this.AwayId != that1.AwayId {
		return false
	}
	if this.MarketName != that1.MarketName {
		return false
	}
	if this.MarketId != that1.MarketId {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.PriceId != that1.PriceId {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	if this.Initiator != that1.Initiator {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if !this.Check.Equal(that1.Check) {
		return false
	}
	if !this.BetConfig.Equal(that1.BetConfig) {
		return false
	}
	if !this.CheckCalc.Equal(that1.CheckCalc) {
		return false
	}
	if !this.ToBet.Equal(that1.ToBet) {
		return false
	}
	if !this.Bet.Equal(that1.Bet) {
		return false
	}
	return true
}
func (this *BetConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BetConfig)
	if !ok {
		that2, ok := that.(BetConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ServiceName != that1.ServiceName {
		return false
	}
	if this.Regime != that1.Regime {
		return false
	}
	if this.Priority != that1.Priority {
		return false
	}
	if this.MaxCountLine != that1.MaxCountLine {
		return false
	}
	if this.MaxCountEvent != that1.MaxCountEvent {
		return false
	}
	if this.MinStake != that1.MinStake {
		return false
	}
	if this.MaxStake != that1.MaxStake {
		return false
	}
	if this.MaxWin != that1.MaxWin {
		return false
	}
	if this.MinPercent != that1.MinPercent {
		return false
	}
	if this.MaxPercent != that1.MaxPercent {
		return false
	}
	if this.MaxAmountEvent != that1.MaxAmountEvent {
		return false
	}
	if this.RoundValue != that1.RoundValue {
		return false
	}
	return true
}
func (this *Calc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Calc)
	if !ok {
		that2, ok := that.(Calc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Profit != that1.Profit {
		return false
	}
	if this.FirstName != that1.FirstName {
		return false
	}
	if this.SecondName != that1.SecondName {
		return false
	}
	if this.LowerWinIndex != that1.LowerWinIndex {
		return false
	}
	if this.HigherWinIndex != that1.HigherWinIndex {
		return false
	}
	if this.FirstIndex != that1.FirstIndex {
		return false
	}
	if this.SecondIndex != that1.SecondIndex {
		return false
	}
	if this.WinDiff != that1.WinDiff {
		return false
	}
	if this.WinDiffRel != that1.WinDiffRel {
		return false
	}
	return true
}
func (this *CheckCalc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckCalc)
	if !ok {
		that2, ok := that.(CheckCalc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.MaxStake != that1.MaxStake {
		return false
	}
	if this.MinStake != that1.MinStake {
		return false
	}
	if this.MaxWin != that1.MaxWin {
		return false
	}
	if this.Stake != that1.Stake {
		return false
	}
	if this.Win != that1.Win {
		return false
	}
	if this.IsFirst != that1.IsFirst {
		return false
	}
	return true
}
func (this *ToBet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ToBet)
	if !ok {
		that2, ok := that.(ToBet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Stake != that1.Stake {
		return false
	}
	return true
}
func (this *Bet) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bet)
	if !ok {
		that2, ok := that.(Bet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.StatusInfo != that1.StatusInfo {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.Stake != that1.Stake {
		return false
	}
	if this.TryCount != that1.TryCount {
		return false
	}
	return true
}
func (this *Check) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Check)
	if !ok {
		that2, ok := that.(Check)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.CountLine != that1.CountLine {
		return false
	}
	if this.CountEvent != that1.CountEvent {
		return false
	}
	if this.AmountEvent != that1.AmountEvent {
		return false
	}
	if this.MinBet != that1.MinBet {
		return false
	}
	if this.MaxBet != that1.MaxBet {
		return false
	}
	if this.Balance != that1.Balance {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	if this.StatusInfo != that1.StatusInfo {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	return true
}
func (this *PingRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingRequest)
	if !ok {
		that2, ok := that.(PingRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PingResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingResponse)
	if !ok {
		that2, ok := that.(PingResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateSurebetManyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fortedpb.CreateSurebetManyRequest{")
	if this.Surebet != nil {
		s = append(s, "Surebet: "+fmt.Sprintf("%#v", this.Surebet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSurebetManyResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fortedpb.CreateSurebetManyResponse{")
	s = append(s, "SurebetCount: "+fmt.Sprintf("%#v", this.SurebetCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlaceBetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fortedpb.PlaceBetRequest{")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	if this.Surebet != nil {
		s = append(s, "Surebet: "+fmt.Sprintf("%#v", this.Surebet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlaceBetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fortedpb.PlaceBetResponse{")
	if this.Side != nil {
		s = append(s, "Side: "+fmt.Sprintf("%#v", this.Side)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckLineRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fortedpb.CheckLineRequest{")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	if this.Surebet != nil {
		s = append(s, "Surebet: "+fmt.Sprintf("%#v", this.Surebet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckLineResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fortedpb.CheckLineResponse{")
	if this.Side != nil {
		s = append(s, "Side: "+fmt.Sprintf("%#v", this.Side)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSurebetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fortedpb.CreateSurebetRequest{")
	if this.Surebet != nil {
		s = append(s, "Surebet: "+fmt.Sprintf("%#v", this.Surebet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSurebetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fortedpb.CreateSurebetResponse{")
	s = append(s, "SurebetId: "+fmt.Sprintf("%#v", this.SurebetId)+",\n")
	s = append(s, "SurebetHash: "+fmt.Sprintf("%#v", this.SurebetHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlaceSurebetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fortedpb.PlaceSurebetRequest{")
	if this.Surebet != nil {
		s = append(s, "Surebet: "+fmt.Sprintf("%#v", this.Surebet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PlaceSurebetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fortedpb.PlaceSurebetResponse{")
	s = append(s, "SurebetId: "+fmt.Sprintf("%#v", this.SurebetId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Surebet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&fortedpb.Surebet{")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "SurebetHash: "+fmt.Sprintf("%#v", this.SurebetHash)+",\n")
	s = append(s, "Starts: "+fmt.Sprintf("%#v", this.Starts)+",\n")
	s = append(s, "FortedHome: "+fmt.Sprintf("%#v", this.FortedHome)+",\n")
	s = append(s, "FortedAway: "+fmt.Sprintf("%#v", this.FortedAway)+",\n")
	s = append(s, "FortedProfit: "+fmt.Sprintf("%#v", this.FortedProfit)+",\n")
	s = append(s, "FortedSport: "+fmt.Sprintf("%#v", this.FortedSport)+",\n")
	s = append(s, "FortedLeague: "+fmt.Sprintf("%#v", this.FortedLeague)+",\n")
	s = append(s, "FilterName: "+fmt.Sprintf("%#v", this.FilterName)+",\n")
	s = append(s, "SkynetId: "+fmt.Sprintf("%#v", this.SkynetId)+",\n")
	s = append(s, "SurebetId: "+fmt.Sprintf("%#v", this.SurebetId)+",\n")
	s = append(s, "LogId: "+fmt.Sprintf("%#v", this.LogId)+",\n")
	if this.Calc != nil {
		s = append(s, "Calc: "+fmt.Sprintf("%#v", this.Calc)+",\n")
	}
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SurebetSide) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 27)
	s = append(s, "&fortedpb.SurebetSide{")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "ServiceName: "+fmt.Sprintf("%#v", this.ServiceName)+",\n")
	s = append(s, "ServiceId: "+fmt.Sprintf("%#v", this.ServiceId)+",\n")
	s = append(s, "SportName: "+fmt.Sprintf("%#v", this.SportName)+",\n")
	s = append(s, "SportId: "+fmt.Sprintf("%#v", this.SportId)+",\n")
	s = append(s, "LeagueName: "+fmt.Sprintf("%#v", this.LeagueName)+",\n")
	s = append(s, "LeagueId: "+fmt.Sprintf("%#v", this.LeagueId)+",\n")
	s = append(s, "Home: "+fmt.Sprintf("%#v", this.Home)+",\n")
	s = append(s, "HomeId: "+fmt.Sprintf("%#v", this.HomeId)+",\n")
	s = append(s, "Away: "+fmt.Sprintf("%#v", this.Away)+",\n")
	s = append(s, "AwayId: "+fmt.Sprintf("%#v", this.AwayId)+",\n")
	s = append(s, "MarketName: "+fmt.Sprintf("%#v", this.MarketName)+",\n")
	s = append(s, "MarketId: "+fmt.Sprintf("%#v", this.MarketId)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "PriceId: "+fmt.Sprintf("%#v", this.PriceId)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Initiator: "+fmt.Sprintf("%#v", this.Initiator)+",\n")
	s = append(s, "EventId: "+fmt.Sprintf("%#v", this.EventId)+",\n")
	if this.Check != nil {
		s = append(s, "Check: "+fmt.Sprintf("%#v", this.Check)+",\n")
	}
	if this.BetConfig != nil {
		s = append(s, "BetConfig: "+fmt.Sprintf("%#v", this.BetConfig)+",\n")
	}
	if this.CheckCalc != nil {
		s = append(s, "CheckCalc: "+fmt.Sprintf("%#v", this.CheckCalc)+",\n")
	}
	if this.ToBet != nil {
		s = append(s, "ToBet: "+fmt.Sprintf("%#v", this.ToBet)+",\n")
	}
	if this.Bet != nil {
		s = append(s, "Bet: "+fmt.Sprintf("%#v", this.Bet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BetConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&fortedpb.BetConfig{")
	s = append(s, "ServiceName: "+fmt.Sprintf("%#v", this.ServiceName)+",\n")
	s = append(s, "Regime: "+fmt.Sprintf("%#v", this.Regime)+",\n")
	s = append(s, "Priority: "+fmt.Sprintf("%#v", this.Priority)+",\n")
	s = append(s, "MaxCountLine: "+fmt.Sprintf("%#v", this.MaxCountLine)+",\n")
	s = append(s, "MaxCountEvent: "+fmt.Sprintf("%#v", this.MaxCountEvent)+",\n")
	s = append(s, "MinStake: "+fmt.Sprintf("%#v", this.MinStake)+",\n")
	s = append(s, "MaxStake: "+fmt.Sprintf("%#v", this.MaxStake)+",\n")
	s = append(s, "MaxWin: "+fmt.Sprintf("%#v", this.MaxWin)+",\n")
	s = append(s, "MinPercent: "+fmt.Sprintf("%#v", this.MinPercent)+",\n")
	s = append(s, "MaxPercent: "+fmt.Sprintf("%#v", this.MaxPercent)+",\n")
	s = append(s, "MaxAmountEvent: "+fmt.Sprintf("%#v", this.MaxAmountEvent)+",\n")
	s = append(s, "RoundValue: "+fmt.Sprintf("%#v", this.RoundValue)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Calc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&fortedpb.Calc{")
	s = append(s, "Profit: "+fmt.Sprintf("%#v", this.Profit)+",\n")
	s = append(s, "FirstName: "+fmt.Sprintf("%#v", this.FirstName)+",\n")
	s = append(s, "SecondName: "+fmt.Sprintf("%#v", this.SecondName)+",\n")
	s = append(s, "LowerWinIndex: "+fmt.Sprintf("%#v", this.LowerWinIndex)+",\n")
	s = append(s, "HigherWinIndex: "+fmt.Sprintf("%#v", this.HigherWinIndex)+",\n")
	s = append(s, "FirstIndex: "+fmt.Sprintf("%#v", this.FirstIndex)+",\n")
	s = append(s, "SecondIndex: "+fmt.Sprintf("%#v", this.SecondIndex)+",\n")
	s = append(s, "WinDiff: "+fmt.Sprintf("%#v", this.WinDiff)+",\n")
	s = append(s, "WinDiffRel: "+fmt.Sprintf("%#v", this.WinDiffRel)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckCalc) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&fortedpb.CheckCalc{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "MaxStake: "+fmt.Sprintf("%#v", this.MaxStake)+",\n")
	s = append(s, "MinStake: "+fmt.Sprintf("%#v", this.MinStake)+",\n")
	s = append(s, "MaxWin: "+fmt.Sprintf("%#v", this.MaxWin)+",\n")
	s = append(s, "Stake: "+fmt.Sprintf("%#v", this.Stake)+",\n")
	s = append(s, "Win: "+fmt.Sprintf("%#v", this.Win)+",\n")
	s = append(s, "IsFirst: "+fmt.Sprintf("%#v", this.IsFirst)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ToBet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fortedpb.ToBet{")
	s = append(s, "Stake: "+fmt.Sprintf("%#v", this.Stake)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Bet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&fortedpb.Bet{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "StatusInfo: "+fmt.Sprintf("%#v", this.StatusInfo)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "Stake: "+fmt.Sprintf("%#v", this.Stake)+",\n")
	s = append(s, "TryCount: "+fmt.Sprintf("%#v", this.TryCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Check) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&fortedpb.Check{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "CountLine: "+fmt.Sprintf("%#v", this.CountLine)+",\n")
	s = append(s, "CountEvent: "+fmt.Sprintf("%#v", this.CountEvent)+",\n")
	s = append(s, "AmountEvent: "+fmt.Sprintf("%#v", this.AmountEvent)+",\n")
	s = append(s, "MinBet: "+fmt.Sprintf("%#v", this.MinBet)+",\n")
	s = append(s, "MaxBet: "+fmt.Sprintf("%#v", this.MaxBet)+",\n")
	s = append(s, "Balance: "+fmt.Sprintf("%#v", this.Balance)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "StatusInfo: "+fmt.Sprintf("%#v", this.StatusInfo)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&fortedpb.PingRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&fortedpb.PingResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringForted(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FortedClient is the client API for Forted service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FortedClient interface {
	CreateSurebet(ctx context.Context, in *CreateSurebetRequest, opts ...grpc.CallOption) (*CreateSurebetResponse, error)
	PlaceSurebet(ctx context.Context, in *PlaceSurebetRequest, opts ...grpc.CallOption) (*PlaceSurebetResponse, error)
	CreateSurebetMany(ctx context.Context, in *CreateSurebetManyRequest, opts ...grpc.CallOption) (*CreateSurebetManyResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	CheckLine(ctx context.Context, in *CheckLineRequest, opts ...grpc.CallOption) (*CheckLineResponse, error)
	PlaceBet(ctx context.Context, in *PlaceBetRequest, opts ...grpc.CallOption) (*PlaceBetResponse, error)
}

type fortedClient struct {
	cc *grpc.ClientConn
}

func NewFortedClient(cc *grpc.ClientConn) FortedClient {
	return &fortedClient{cc}
}

func (c *fortedClient) CreateSurebet(ctx context.Context, in *CreateSurebetRequest, opts ...grpc.CallOption) (*CreateSurebetResponse, error) {
	out := new(CreateSurebetResponse)
	err := c.cc.Invoke(ctx, "/fortedpb.Forted/CreateSurebet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fortedClient) PlaceSurebet(ctx context.Context, in *PlaceSurebetRequest, opts ...grpc.CallOption) (*PlaceSurebetResponse, error) {
	out := new(PlaceSurebetResponse)
	err := c.cc.Invoke(ctx, "/fortedpb.Forted/PlaceSurebet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fortedClient) CreateSurebetMany(ctx context.Context, in *CreateSurebetManyRequest, opts ...grpc.CallOption) (*CreateSurebetManyResponse, error) {
	out := new(CreateSurebetManyResponse)
	err := c.cc.Invoke(ctx, "/fortedpb.Forted/CreateSurebetMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fortedClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/fortedpb.Forted/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fortedClient) CheckLine(ctx context.Context, in *CheckLineRequest, opts ...grpc.CallOption) (*CheckLineResponse, error) {
	out := new(CheckLineResponse)
	err := c.cc.Invoke(ctx, "/fortedpb.Forted/CheckLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fortedClient) PlaceBet(ctx context.Context, in *PlaceBetRequest, opts ...grpc.CallOption) (*PlaceBetResponse, error) {
	out := new(PlaceBetResponse)
	err := c.cc.Invoke(ctx, "/fortedpb.Forted/PlaceBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FortedServer is the server API for Forted service.
type FortedServer interface {
	CreateSurebet(context.Context, *CreateSurebetRequest) (*CreateSurebetResponse, error)
	PlaceSurebet(context.Context, *PlaceSurebetRequest) (*PlaceSurebetResponse, error)
	CreateSurebetMany(context.Context, *CreateSurebetManyRequest) (*CreateSurebetManyResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	CheckLine(context.Context, *CheckLineRequest) (*CheckLineResponse, error)
	PlaceBet(context.Context, *PlaceBetRequest) (*PlaceBetResponse, error)
}

// UnimplementedFortedServer can be embedded to have forward compatible implementations.
type UnimplementedFortedServer struct {
}

func (*UnimplementedFortedServer) CreateSurebet(ctx context.Context, req *CreateSurebetRequest) (*CreateSurebetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurebet not implemented")
}
func (*UnimplementedFortedServer) PlaceSurebet(ctx context.Context, req *PlaceSurebetRequest) (*PlaceSurebetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceSurebet not implemented")
}
func (*UnimplementedFortedServer) CreateSurebetMany(ctx context.Context, req *CreateSurebetManyRequest) (*CreateSurebetManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurebetMany not implemented")
}
func (*UnimplementedFortedServer) Ping(ctx context.Context, req *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedFortedServer) CheckLine(ctx context.Context, req *CheckLineRequest) (*CheckLineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLine not implemented")
}
func (*UnimplementedFortedServer) PlaceBet(ctx context.Context, req *PlaceBetRequest) (*PlaceBetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceBet not implemented")
}

func RegisterFortedServer(s *grpc.Server, srv FortedServer) {
	s.RegisterService(&_Forted_serviceDesc, srv)
}

func _Forted_CreateSurebet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSurebetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FortedServer).CreateSurebet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fortedpb.Forted/CreateSurebet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FortedServer).CreateSurebet(ctx, req.(*CreateSurebetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forted_PlaceSurebet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceSurebetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FortedServer).PlaceSurebet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fortedpb.Forted/PlaceSurebet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FortedServer).PlaceSurebet(ctx, req.(*PlaceSurebetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forted_CreateSurebetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSurebetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FortedServer).CreateSurebetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fortedpb.Forted/CreateSurebetMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FortedServer).CreateSurebetMany(ctx, req.(*CreateSurebetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forted_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FortedServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fortedpb.Forted/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FortedServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forted_CheckLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FortedServer).CheckLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fortedpb.Forted/CheckLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FortedServer).CheckLine(ctx, req.(*CheckLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forted_PlaceBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FortedServer).PlaceBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fortedpb.Forted/PlaceBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FortedServer).PlaceBet(ctx, req.(*PlaceBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Forted_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fortedpb.Forted",
	HandlerType: (*FortedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSurebet",
			Handler:    _Forted_CreateSurebet_Handler,
		},
		{
			MethodName: "PlaceSurebet",
			Handler:    _Forted_PlaceSurebet_Handler,
		},
		{
			MethodName: "CreateSurebetMany",
			Handler:    _Forted_CreateSurebetMany_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Forted_Ping_Handler,
		},
		{
			MethodName: "CheckLine",
			Handler:    _Forted_CheckLine_Handler,
		},
		{
			MethodName: "PlaceBet",
			Handler:    _Forted_PlaceBet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "forted.proto",
}

func (m *CreateSurebetManyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSurebetManyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSurebetManyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Surebet) > 0 {
		for iNdEx := len(m.Surebet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Surebet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForted(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSurebetManyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSurebetManyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSurebetManyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SurebetCount != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.SurebetCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlaceBetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaceBetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaceBetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Surebet != nil {
		{
			size, err := m.Surebet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForted(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Num != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlaceBetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaceBetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaceBetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Side != nil {
		{
			size, err := m.Side.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForted(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckLineRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckLineRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckLineRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Surebet != nil {
		{
			size, err := m.Surebet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForted(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Num != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CheckLineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckLineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckLineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Side != nil {
		{
			size, err := m.Side.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForted(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSurebetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSurebetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSurebetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Surebet != nil {
		{
			size, err := m.Surebet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForted(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSurebetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSurebetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSurebetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SurebetHash != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.SurebetHash))
		i--
		dAtA[i] = 0x10
	}
	if m.SurebetId != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.SurebetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlaceSurebetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaceSurebetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaceSurebetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Surebet != nil {
		{
			size, err := m.Surebet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForted(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PlaceSurebetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlaceSurebetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlaceSurebetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SurebetId != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.SurebetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Surebet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Surebet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Surebet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForted(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.Calc != nil {
		{
			size, err := m.Calc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForted(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.LogId != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.LogId))
		i--
		dAtA[i] = 0x60
	}
	if m.SurebetId != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.SurebetId))
		i--
		dAtA[i] = 0x58
	}
	if m.SkynetId != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.SkynetId))
		i--
		dAtA[i] = 0x50
	}
	if len(m.FilterName) > 0 {
		i -= len(m.FilterName)
		copy(dAtA[i:], m.FilterName)
		i = encodeVarintForted(dAtA, i, uint64(len(m.FilterName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FortedLeague) > 0 {
		i -= len(m.FortedLeague)
		copy(dAtA[i:], m.FortedLeague)
		i = encodeVarintForted(dAtA, i, uint64(len(m.FortedLeague)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.FortedSport) > 0 {
		i -= len(m.FortedSport)
		copy(dAtA[i:], m.FortedSport)
		i = encodeVarintForted(dAtA, i, uint64(len(m.FortedSport)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FortedProfit) > 0 {
		i -= len(m.FortedProfit)
		copy(dAtA[i:], m.FortedProfit)
		i = encodeVarintForted(dAtA, i, uint64(len(m.FortedProfit)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FortedAway) > 0 {
		i -= len(m.FortedAway)
		copy(dAtA[i:], m.FortedAway)
		i = encodeVarintForted(dAtA, i, uint64(len(m.FortedAway)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FortedHome) > 0 {
		i -= len(m.FortedHome)
		copy(dAtA[i:], m.FortedHome)
		i = encodeVarintForted(dAtA, i, uint64(len(m.FortedHome)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Starts) > 0 {
		i -= len(m.Starts)
		copy(dAtA[i:], m.Starts)
		i = encodeVarintForted(dAtA, i, uint64(len(m.Starts)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SurebetHash) > 0 {
		i -= len(m.SurebetHash)
		copy(dAtA[i:], m.SurebetHash)
		i = encodeVarintForted(dAtA, i, uint64(len(m.SurebetHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintForted(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SurebetSide) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SurebetSide) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SurebetSide) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bet != nil {
		{
			size, err := m.Bet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForted(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.ToBet != nil {
		{
			size, err := m.ToBet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForted(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.CheckCalc != nil {
		{
			size, err := m.CheckCalc.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForted(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.BetConfig != nil {
		{
			size, err := m.BetConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForted(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.Check != nil {
		{
			size, err := m.Check.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForted(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.EventId != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.EventId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.PriceId != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.PriceId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.MarketId != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.AwayId != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.AwayId))
		i--
		dAtA[i] = 0x78
	}
	if m.HomeId != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.HomeId))
		i--
		dAtA[i] = 0x70
	}
	if m.LeagueId != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.LeagueId))
		i--
		dAtA[i] = 0x68
	}
	if m.SportId != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.SportId))
		i--
		dAtA[i] = 0x60
	}
	if m.ServiceId != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.ServiceId))
		i--
		dAtA[i] = 0x58
	}
	if m.Initiator {
		i--
		if m.Initiator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintForted(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x41
	}
	if len(m.MarketName) > 0 {
		i -= len(m.MarketName)
		copy(dAtA[i:], m.MarketName)
		i = encodeVarintForted(dAtA, i, uint64(len(m.MarketName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Away) > 0 {
		i -= len(m.Away)
		copy(dAtA[i:], m.Away)
		i = encodeVarintForted(dAtA, i, uint64(len(m.Away)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Home) > 0 {
		i -= len(m.Home)
		copy(dAtA[i:], m.Home)
		i = encodeVarintForted(dAtA, i, uint64(len(m.Home)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LeagueName) > 0 {
		i -= len(m.LeagueName)
		copy(dAtA[i:], m.LeagueName)
		i = encodeVarintForted(dAtA, i, uint64(len(m.LeagueName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SportName) > 0 {
		i -= len(m.SportName)
		copy(dAtA[i:], m.SportName)
		i = encodeVarintForted(dAtA, i, uint64(len(m.SportName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintForted(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Num != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BetConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BetConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BetConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxWin != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxWin))))
		i--
		dAtA[i] = 0x61
	}
	if len(m.Regime) > 0 {
		i -= len(m.Regime)
		copy(dAtA[i:], m.Regime)
		i = encodeVarintForted(dAtA, i, uint64(len(m.Regime)))
		i--
		dAtA[i] = 0x5a
	}
	if m.MaxStake != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxStake))))
		i--
		dAtA[i] = 0x51
	}
	if m.MinStake != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinStake))))
		i--
		dAtA[i] = 0x49
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintForted(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x42
	}
	if m.RoundValue != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RoundValue))))
		i--
		dAtA[i] = 0x39
	}
	if m.MaxAmountEvent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxAmountEvent))))
		i--
		dAtA[i] = 0x31
	}
	if m.MaxCountEvent != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.MaxCountEvent))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxCountLine != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.MaxCountLine))
		i--
		dAtA[i] = 0x20
	}
	if m.Priority != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.Priority))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxPercent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxPercent))))
		i--
		dAtA[i] = 0x11
	}
	if m.MinPercent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinPercent))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Calc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Calc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Calc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SecondIndex != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.SecondIndex))
		i--
		dAtA[i] = 0x48
	}
	if m.FirstIndex != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.FirstIndex))
		i--
		dAtA[i] = 0x40
	}
	if m.WinDiffRel != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.WinDiffRel))))
		i--
		dAtA[i] = 0x39
	}
	if m.WinDiff != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.WinDiff))))
		i--
		dAtA[i] = 0x31
	}
	if m.HigherWinIndex != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.HigherWinIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.LowerWinIndex != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.LowerWinIndex))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SecondName) > 0 {
		i -= len(m.SecondName)
		copy(dAtA[i:], m.SecondName)
		i = encodeVarintForted(dAtA, i, uint64(len(m.SecondName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FirstName) > 0 {
		i -= len(m.FirstName)
		copy(dAtA[i:], m.FirstName)
		i = encodeVarintForted(dAtA, i, uint64(len(m.FirstName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Profit != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Profit))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *CheckCalc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckCalc) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckCalc) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsFirst {
		i--
		if m.IsFirst {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.Win != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Win))))
		i--
		dAtA[i] = 0x31
	}
	if m.Stake != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Stake))))
		i--
		dAtA[i] = 0x29
	}
	if m.MaxWin != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxWin))))
		i--
		dAtA[i] = 0x21
	}
	if m.MinStake != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinStake))))
		i--
		dAtA[i] = 0x19
	}
	if m.MaxStake != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxStake))))
		i--
		dAtA[i] = 0x11
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintForted(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ToBet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ToBet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ToBet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Stake != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Stake))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Bet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TryCount != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.TryCount))
		i--
		dAtA[i] = 0x30
	}
	if m.Stake != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Stake))))
		i--
		dAtA[i] = 0x29
	}
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x21
	}
	if len(m.Time) > 0 {
		i -= len(m.Time)
		copy(dAtA[i:], m.Time)
		i = encodeVarintForted(dAtA, i, uint64(len(m.Time)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StatusInfo) > 0 {
		i -= len(m.StatusInfo)
		copy(dAtA[i:], m.StatusInfo)
		i = encodeVarintForted(dAtA, i, uint64(len(m.StatusInfo)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintForted(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Check) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Check) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Check) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Time) > 0 {
		i -= len(m.Time)
		copy(dAtA[i:], m.Time)
		i = encodeVarintForted(dAtA, i, uint64(len(m.Time)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.StatusInfo) > 0 {
		i -= len(m.StatusInfo)
		copy(dAtA[i:], m.StatusInfo)
		i = encodeVarintForted(dAtA, i, uint64(len(m.StatusInfo)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x41
	}
	if m.Balance != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Balance))))
		i--
		dAtA[i] = 0x39
	}
	if m.MaxBet != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxBet))))
		i--
		dAtA[i] = 0x31
	}
	if m.MinBet != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MinBet))))
		i--
		dAtA[i] = 0x29
	}
	if m.AmountEvent != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AmountEvent))))
		i--
		dAtA[i] = 0x21
	}
	if m.CountEvent != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.CountEvent))
		i--
		dAtA[i] = 0x18
	}
	if m.CountLine != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.CountLine))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintForted(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintForted(dAtA []byte, offset int, v uint64) int {
	offset -= sovForted(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateSurebetManyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Surebet) > 0 {
		for _, e := range m.Surebet {
			l = e.Size()
			n += 1 + l + sovForted(uint64(l))
		}
	}
	return n
}

func (m *CreateSurebetManyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SurebetCount != 0 {
		n += 1 + sovForted(uint64(m.SurebetCount))
	}
	return n
}

func (m *PlaceBetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovForted(uint64(m.Num))
	}
	if m.Surebet != nil {
		l = m.Surebet.Size()
		n += 1 + l + sovForted(uint64(l))
	}
	return n
}

func (m *PlaceBetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Side != nil {
		l = m.Side.Size()
		n += 1 + l + sovForted(uint64(l))
	}
	return n
}

func (m *CheckLineRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovForted(uint64(m.Num))
	}
	if m.Surebet != nil {
		l = m.Surebet.Size()
		n += 1 + l + sovForted(uint64(l))
	}
	return n
}

func (m *CheckLineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Side != nil {
		l = m.Side.Size()
		n += 1 + l + sovForted(uint64(l))
	}
	return n
}

func (m *CreateSurebetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Surebet != nil {
		l = m.Surebet.Size()
		n += 1 + l + sovForted(uint64(l))
	}
	return n
}

func (m *CreateSurebetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SurebetId != 0 {
		n += 1 + sovForted(uint64(m.SurebetId))
	}
	if m.SurebetHash != 0 {
		n += 1 + sovForted(uint64(m.SurebetHash))
	}
	return n
}

func (m *PlaceSurebetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Surebet != nil {
		l = m.Surebet.Size()
		n += 1 + l + sovForted(uint64(l))
	}
	return n
}

func (m *PlaceSurebetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SurebetId != 0 {
		n += 1 + sovForted(uint64(m.SurebetId))
	}
	return n
}

func (m *Surebet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.SurebetHash)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.Starts)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.FortedHome)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.FortedAway)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.FortedProfit)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.FortedSport)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.FortedLeague)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.FilterName)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	if m.SkynetId != 0 {
		n += 1 + sovForted(uint64(m.SkynetId))
	}
	if m.SurebetId != 0 {
		n += 1 + sovForted(uint64(m.SurebetId))
	}
	if m.LogId != 0 {
		n += 1 + sovForted(uint64(m.LogId))
	}
	if m.Calc != nil {
		l = m.Calc.Size()
		n += 1 + l + sovForted(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovForted(uint64(l))
		}
	}
	return n
}

func (m *SurebetSide) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovForted(uint64(m.Num))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.SportName)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.LeagueName)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.Home)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.Away)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.MarketName)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	if m.Price != 0 {
		n += 9
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	if m.Initiator {
		n += 2
	}
	if m.ServiceId != 0 {
		n += 1 + sovForted(uint64(m.ServiceId))
	}
	if m.SportId != 0 {
		n += 1 + sovForted(uint64(m.SportId))
	}
	if m.LeagueId != 0 {
		n += 1 + sovForted(uint64(m.LeagueId))
	}
	if m.HomeId != 0 {
		n += 1 + sovForted(uint64(m.HomeId))
	}
	if m.AwayId != 0 {
		n += 1 + sovForted(uint64(m.AwayId))
	}
	if m.MarketId != 0 {
		n += 2 + sovForted(uint64(m.MarketId))
	}
	if m.PriceId != 0 {
		n += 2 + sovForted(uint64(m.PriceId))
	}
	if m.EventId != 0 {
		n += 2 + sovForted(uint64(m.EventId))
	}
	if m.Check != nil {
		l = m.Check.Size()
		n += 2 + l + sovForted(uint64(l))
	}
	if m.BetConfig != nil {
		l = m.BetConfig.Size()
		n += 2 + l + sovForted(uint64(l))
	}
	if m.CheckCalc != nil {
		l = m.CheckCalc.Size()
		n += 2 + l + sovForted(uint64(l))
	}
	if m.ToBet != nil {
		l = m.ToBet.Size()
		n += 2 + l + sovForted(uint64(l))
	}
	if m.Bet != nil {
		l = m.Bet.Size()
		n += 2 + l + sovForted(uint64(l))
	}
	return n
}

func (m *BetConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinPercent != 0 {
		n += 9
	}
	if m.MaxPercent != 0 {
		n += 9
	}
	if m.Priority != 0 {
		n += 1 + sovForted(uint64(m.Priority))
	}
	if m.MaxCountLine != 0 {
		n += 1 + sovForted(uint64(m.MaxCountLine))
	}
	if m.MaxCountEvent != 0 {
		n += 1 + sovForted(uint64(m.MaxCountEvent))
	}
	if m.MaxAmountEvent != 0 {
		n += 9
	}
	if m.RoundValue != 0 {
		n += 9
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	if m.MinStake != 0 {
		n += 9
	}
	if m.MaxStake != 0 {
		n += 9
	}
	l = len(m.Regime)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	if m.MaxWin != 0 {
		n += 9
	}
	return n
}

func (m *Calc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profit != 0 {
		n += 9
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.SecondName)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	if m.LowerWinIndex != 0 {
		n += 1 + sovForted(uint64(m.LowerWinIndex))
	}
	if m.HigherWinIndex != 0 {
		n += 1 + sovForted(uint64(m.HigherWinIndex))
	}
	if m.WinDiff != 0 {
		n += 9
	}
	if m.WinDiffRel != 0 {
		n += 9
	}
	if m.FirstIndex != 0 {
		n += 1 + sovForted(uint64(m.FirstIndex))
	}
	if m.SecondIndex != 0 {
		n += 1 + sovForted(uint64(m.SecondIndex))
	}
	return n
}

func (m *CheckCalc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	if m.MaxStake != 0 {
		n += 9
	}
	if m.MinStake != 0 {
		n += 9
	}
	if m.MaxWin != 0 {
		n += 9
	}
	if m.Stake != 0 {
		n += 9
	}
	if m.Win != 0 {
		n += 9
	}
	if m.IsFirst {
		n += 2
	}
	return n
}

func (m *ToBet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stake != 0 {
		n += 9
	}
	return n
}

func (m *Bet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.StatusInfo)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	if m.Price != 0 {
		n += 9
	}
	if m.Stake != 0 {
		n += 9
	}
	if m.TryCount != 0 {
		n += 1 + sovForted(uint64(m.TryCount))
	}
	return n
}

func (m *Check) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	if m.CountLine != 0 {
		n += 1 + sovForted(uint64(m.CountLine))
	}
	if m.CountEvent != 0 {
		n += 1 + sovForted(uint64(m.CountEvent))
	}
	if m.AmountEvent != 0 {
		n += 9
	}
	if m.MinBet != 0 {
		n += 9
	}
	if m.MaxBet != 0 {
		n += 9
	}
	if m.Balance != 0 {
		n += 9
	}
	if m.Price != 0 {
		n += 9
	}
	l = len(m.StatusInfo)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.Time)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	return n
}

func (m *PingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovForted(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozForted(x uint64) (n int) {
	return sovForted(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateSurebetManyRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSurebet := "[]*Surebet{"
	for _, f := range this.Surebet {
		repeatedStringForSurebet += strings.Replace(f.String(), "Surebet", "Surebet", 1) + ","
	}
	repeatedStringForSurebet += "}"
	s := strings.Join([]string{`&CreateSurebetManyRequest{`,
		`Surebet:` + repeatedStringForSurebet + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSurebetManyResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSurebetManyResponse{`,
		`SurebetCount:` + fmt.Sprintf("%v", this.SurebetCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlaceBetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlaceBetRequest{`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Surebet:` + strings.Replace(this.Surebet.String(), "Surebet", "Surebet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlaceBetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlaceBetResponse{`,
		`Side:` + strings.Replace(this.Side.String(), "SurebetSide", "SurebetSide", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckLineRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckLineRequest{`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`Surebet:` + strings.Replace(this.Surebet.String(), "Surebet", "Surebet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckLineResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckLineResponse{`,
		`Side:` + strings.Replace(this.Side.String(), "SurebetSide", "SurebetSide", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSurebetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSurebetRequest{`,
		`Surebet:` + strings.Replace(this.Surebet.String(), "Surebet", "Surebet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSurebetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSurebetResponse{`,
		`SurebetId:` + fmt.Sprintf("%v", this.SurebetId) + `,`,
		`SurebetHash:` + fmt.Sprintf("%v", this.SurebetHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlaceSurebetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlaceSurebetRequest{`,
		`Surebet:` + strings.Replace(this.Surebet.String(), "Surebet", "Surebet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PlaceSurebetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PlaceSurebetResponse{`,
		`SurebetId:` + fmt.Sprintf("%v", this.SurebetId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Surebet) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMembers := "[]*SurebetSide{"
	for _, f := range this.Members {
		repeatedStringForMembers += strings.Replace(f.String(), "SurebetSide", "SurebetSide", 1) + ","
	}
	repeatedStringForMembers += "}"
	s := strings.Join([]string{`&Surebet{`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`SurebetHash:` + fmt.Sprintf("%v", this.SurebetHash) + `,`,
		`Starts:` + fmt.Sprintf("%v", this.Starts) + `,`,
		`FortedHome:` + fmt.Sprintf("%v", this.FortedHome) + `,`,
		`FortedAway:` + fmt.Sprintf("%v", this.FortedAway) + `,`,
		`FortedProfit:` + fmt.Sprintf("%v", this.FortedProfit) + `,`,
		`FortedSport:` + fmt.Sprintf("%v", this.FortedSport) + `,`,
		`FortedLeague:` + fmt.Sprintf("%v", this.FortedLeague) + `,`,
		`FilterName:` + fmt.Sprintf("%v", this.FilterName) + `,`,
		`SkynetId:` + fmt.Sprintf("%v", this.SkynetId) + `,`,
		`SurebetId:` + fmt.Sprintf("%v", this.SurebetId) + `,`,
		`LogId:` + fmt.Sprintf("%v", this.LogId) + `,`,
		`Calc:` + strings.Replace(this.Calc.String(), "Calc", "Calc", 1) + `,`,
		`Members:` + repeatedStringForMembers + `,`,
		`}`,
	}, "")
	return s
}
func (this *SurebetSide) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SurebetSide{`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`SportName:` + fmt.Sprintf("%v", this.SportName) + `,`,
		`LeagueName:` + fmt.Sprintf("%v", this.LeagueName) + `,`,
		`Home:` + fmt.Sprintf("%v", this.Home) + `,`,
		`Away:` + fmt.Sprintf("%v", this.Away) + `,`,
		`MarketName:` + fmt.Sprintf("%v", this.MarketName) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Initiator:` + fmt.Sprintf("%v", this.Initiator) + `,`,
		`ServiceId:` + fmt.Sprintf("%v", this.ServiceId) + `,`,
		`SportId:` + fmt.Sprintf("%v", this.SportId) + `,`,
		`LeagueId:` + fmt.Sprintf("%v", this.LeagueId) + `,`,
		`HomeId:` + fmt.Sprintf("%v", this.HomeId) + `,`,
		`AwayId:` + fmt.Sprintf("%v", this.AwayId) + `,`,
		`MarketId:` + fmt.Sprintf("%v", this.MarketId) + `,`,
		`PriceId:` + fmt.Sprintf("%v", this.PriceId) + `,`,
		`EventId:` + fmt.Sprintf("%v", this.EventId) + `,`,
		`Check:` + strings.Replace(this.Check.String(), "Check", "Check", 1) + `,`,
		`BetConfig:` + strings.Replace(this.BetConfig.String(), "BetConfig", "BetConfig", 1) + `,`,
		`CheckCalc:` + strings.Replace(this.CheckCalc.String(), "CheckCalc", "CheckCalc", 1) + `,`,
		`ToBet:` + strings.Replace(this.ToBet.String(), "ToBet", "ToBet", 1) + `,`,
		`Bet:` + strings.Replace(this.Bet.String(), "Bet", "Bet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BetConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BetConfig{`,
		`MinPercent:` + fmt.Sprintf("%v", this.MinPercent) + `,`,
		`MaxPercent:` + fmt.Sprintf("%v", this.MaxPercent) + `,`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`MaxCountLine:` + fmt.Sprintf("%v", this.MaxCountLine) + `,`,
		`MaxCountEvent:` + fmt.Sprintf("%v", this.MaxCountEvent) + `,`,
		`MaxAmountEvent:` + fmt.Sprintf("%v", this.MaxAmountEvent) + `,`,
		`RoundValue:` + fmt.Sprintf("%v", this.RoundValue) + `,`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`MinStake:` + fmt.Sprintf("%v", this.MinStake) + `,`,
		`MaxStake:` + fmt.Sprintf("%v", this.MaxStake) + `,`,
		`Regime:` + fmt.Sprintf("%v", this.Regime) + `,`,
		`MaxWin:` + fmt.Sprintf("%v", this.MaxWin) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Calc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Calc{`,
		`Profit:` + fmt.Sprintf("%v", this.Profit) + `,`,
		`FirstName:` + fmt.Sprintf("%v", this.FirstName) + `,`,
		`SecondName:` + fmt.Sprintf("%v", this.SecondName) + `,`,
		`LowerWinIndex:` + fmt.Sprintf("%v", this.LowerWinIndex) + `,`,
		`HigherWinIndex:` + fmt.Sprintf("%v", this.HigherWinIndex) + `,`,
		`WinDiff:` + fmt.Sprintf("%v", this.WinDiff) + `,`,
		`WinDiffRel:` + fmt.Sprintf("%v", this.WinDiffRel) + `,`,
		`FirstIndex:` + fmt.Sprintf("%v", this.FirstIndex) + `,`,
		`SecondIndex:` + fmt.Sprintf("%v", this.SecondIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckCalc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckCalc{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`MaxStake:` + fmt.Sprintf("%v", this.MaxStake) + `,`,
		`MinStake:` + fmt.Sprintf("%v", this.MinStake) + `,`,
		`MaxWin:` + fmt.Sprintf("%v", this.MaxWin) + `,`,
		`Stake:` + fmt.Sprintf("%v", this.Stake) + `,`,
		`Win:` + fmt.Sprintf("%v", this.Win) + `,`,
		`IsFirst:` + fmt.Sprintf("%v", this.IsFirst) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ToBet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ToBet{`,
		`Stake:` + fmt.Sprintf("%v", this.Stake) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Bet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Bet{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`StatusInfo:` + fmt.Sprintf("%v", this.StatusInfo) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`Stake:` + fmt.Sprintf("%v", this.Stake) + `,`,
		`TryCount:` + fmt.Sprintf("%v", this.TryCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Check) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Check{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`CountLine:` + fmt.Sprintf("%v", this.CountLine) + `,`,
		`CountEvent:` + fmt.Sprintf("%v", this.CountEvent) + `,`,
		`AmountEvent:` + fmt.Sprintf("%v", this.AmountEvent) + `,`,
		`MinBet:` + fmt.Sprintf("%v", this.MinBet) + `,`,
		`MaxBet:` + fmt.Sprintf("%v", this.MaxBet) + `,`,
		`Balance:` + fmt.Sprintf("%v", this.Balance) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`StatusInfo:` + fmt.Sprintf("%v", this.StatusInfo) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingRequest{`,
		`}`,
	}, "")
	return s
}
func (this *PingResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringForted(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateSurebetManyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSurebetManyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSurebetManyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Surebet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Surebet = append(m.Surebet, &Surebet{})
			if err := m.Surebet[len(m.Surebet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSurebetManyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSurebetManyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSurebetManyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurebetCount", wireType)
			}
			m.SurebetCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurebetCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaceBetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaceBetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaceBetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Surebet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Surebet == nil {
				m.Surebet = &Surebet{}
			}
			if err := m.Surebet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaceBetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaceBetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaceBetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Side == nil {
				m.Side = &SurebetSide{}
			}
			if err := m.Side.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckLineRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckLineRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckLineRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Surebet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Surebet == nil {
				m.Surebet = &Surebet{}
			}
			if err := m.Surebet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckLineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckLineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckLineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Side == nil {
				m.Side = &SurebetSide{}
			}
			if err := m.Side.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSurebetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSurebetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSurebetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Surebet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Surebet == nil {
				m.Surebet = &Surebet{}
			}
			if err := m.Surebet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSurebetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSurebetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSurebetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurebetId", wireType)
			}
			m.SurebetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurebetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurebetHash", wireType)
			}
			m.SurebetHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurebetHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaceSurebetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaceSurebetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaceSurebetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Surebet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Surebet == nil {
				m.Surebet = &Surebet{}
			}
			if err := m.Surebet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlaceSurebetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlaceSurebetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlaceSurebetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurebetId", wireType)
			}
			m.SurebetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurebetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Surebet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Surebet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Surebet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurebetHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SurebetHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Starts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Starts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FortedHome", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FortedHome = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FortedAway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FortedAway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FortedProfit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FortedProfit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FortedSport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FortedSport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FortedLeague", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FortedLeague = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkynetId", wireType)
			}
			m.SkynetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkynetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurebetId", wireType)
			}
			m.SurebetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurebetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogId", wireType)
			}
			m.LogId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Calc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Calc == nil {
				m.Calc = &Calc{}
			}
			if err := m.Calc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &SurebetSide{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SurebetSide) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SurebetSide: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SurebetSide: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeagueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeagueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Home", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Home = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Away", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Away = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Initiator = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			m.ServiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportId", wireType)
			}
			m.SportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SportId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeagueId", wireType)
			}
			m.LeagueId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeagueId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeId", wireType)
			}
			m.HomeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayId", wireType)
			}
			m.AwayId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceId", wireType)
			}
			m.PriceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			m.EventId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Check == nil {
				m.Check = &Check{}
			}
			if err := m.Check.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BetConfig == nil {
				m.BetConfig = &BetConfig{}
			}
			if err := m.BetConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckCalc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckCalc == nil {
				m.CheckCalc = &CheckCalc{}
			}
			if err := m.CheckCalc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToBet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToBet == nil {
				m.ToBet = &ToBet{}
			}
			if err := m.ToBet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bet == nil {
				m.Bet = &Bet{}
			}
			if err := m.Bet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BetConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BetConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BetConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinPercent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinPercent = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPercent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxPercent = float64(math.Float64frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCountLine", wireType)
			}
			m.MaxCountLine = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCountLine |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCountEvent", wireType)
			}
			m.MaxCountEvent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCountEvent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAmountEvent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxAmountEvent = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RoundValue = float64(math.Float64frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStake", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinStake = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStake", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxStake = float64(math.Float64frombits(v))
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Regime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxWin = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Calc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Calc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Calc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Profit = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecondName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerWinIndex", wireType)
			}
			m.LowerWinIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerWinIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HigherWinIndex", wireType)
			}
			m.HigherWinIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HigherWinIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinDiff", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.WinDiff = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinDiffRel", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.WinDiffRel = float64(math.Float64frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstIndex", wireType)
			}
			m.FirstIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FirstIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondIndex", wireType)
			}
			m.SecondIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckCalc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckCalc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckCalc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStake", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxStake = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStake", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinStake = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWin", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxWin = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Stake = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Win = float64(math.Float64frombits(v))
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFirst", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFirst = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ToBet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ToBet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ToBet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Stake = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Stake = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TryCount", wireType)
			}
			m.TryCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TryCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Check) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Check: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Check: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountLine", wireType)
			}
			m.CountLine = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountLine |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountEvent", wireType)
			}
			m.CountEvent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountEvent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountEvent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AmountEvent = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBet", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MinBet = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBet", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxBet = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Balance = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Time = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipForted(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowForted
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowForted
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowForted
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthForted
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupForted
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthForted
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthForted        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowForted          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupForted = fmt.Errorf("proto: unexpected end of group")
)
