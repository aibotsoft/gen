// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: forted.proto

package fortedpb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateSurebetManyRequest struct {
	Surebet []*Surebet `protobuf:"bytes,1,rep,name=surebet,proto3" json:"surebet,omitempty"`
}

func (m *CreateSurebetManyRequest) Reset()      { *m = CreateSurebetManyRequest{} }
func (*CreateSurebetManyRequest) ProtoMessage() {}
func (*CreateSurebetManyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{0}
}
func (m *CreateSurebetManyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSurebetManyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSurebetManyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSurebetManyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSurebetManyRequest.Merge(m, src)
}
func (m *CreateSurebetManyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateSurebetManyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSurebetManyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSurebetManyRequest proto.InternalMessageInfo

func (m *CreateSurebetManyRequest) GetSurebet() []*Surebet {
	if m != nil {
		return m.Surebet
	}
	return nil
}

type CreateSurebetManyResponse struct {
	SurebetCount int64 `protobuf:"varint,1,opt,name=surebet_count,json=surebetCount,proto3" json:"surebet_count,omitempty"`
}

func (m *CreateSurebetManyResponse) Reset()      { *m = CreateSurebetManyResponse{} }
func (*CreateSurebetManyResponse) ProtoMessage() {}
func (*CreateSurebetManyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{1}
}
func (m *CreateSurebetManyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSurebetManyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSurebetManyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSurebetManyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSurebetManyResponse.Merge(m, src)
}
func (m *CreateSurebetManyResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateSurebetManyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSurebetManyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSurebetManyResponse proto.InternalMessageInfo

func (m *CreateSurebetManyResponse) GetSurebetCount() int64 {
	if m != nil {
		return m.SurebetCount
	}
	return 0
}

type CreateSurebetRequest struct {
	Surebet *Surebet `protobuf:"bytes,1,opt,name=surebet,proto3" json:"surebet,omitempty"`
}

func (m *CreateSurebetRequest) Reset()      { *m = CreateSurebetRequest{} }
func (*CreateSurebetRequest) ProtoMessage() {}
func (*CreateSurebetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{2}
}
func (m *CreateSurebetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSurebetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSurebetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSurebetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSurebetRequest.Merge(m, src)
}
func (m *CreateSurebetRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateSurebetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSurebetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSurebetRequest proto.InternalMessageInfo

func (m *CreateSurebetRequest) GetSurebet() *Surebet {
	if m != nil {
		return m.Surebet
	}
	return nil
}

type CreateSurebetResponse struct {
	SurebetId   int64 `protobuf:"varint,1,opt,name=surebet_id,json=surebetId,proto3" json:"surebet_id,omitempty"`
	SurebetHash int64 `protobuf:"varint,2,opt,name=surebet_hash,json=surebetHash,proto3" json:"surebet_hash,omitempty"`
}

func (m *CreateSurebetResponse) Reset()      { *m = CreateSurebetResponse{} }
func (*CreateSurebetResponse) ProtoMessage() {}
func (*CreateSurebetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{3}
}
func (m *CreateSurebetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSurebetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSurebetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSurebetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSurebetResponse.Merge(m, src)
}
func (m *CreateSurebetResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateSurebetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSurebetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSurebetResponse proto.InternalMessageInfo

func (m *CreateSurebetResponse) GetSurebetId() int64 {
	if m != nil {
		return m.SurebetId
	}
	return 0
}

func (m *CreateSurebetResponse) GetSurebetHash() int64 {
	if m != nil {
		return m.SurebetHash
	}
	return 0
}

type Surebet struct {
	//    google.protobuf.Timestamp created_at = 1 [(gogoproto.stdtime) = true];
	CreatedAt   string `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	SurebetHash string `protobuf:"bytes,2,opt,name=surebet_hash,json=surebetHash,proto3" json:"surebet_hash,omitempty"`
	//    google.protobuf.Timestamp starts = 3 [(gogoproto.stdtime) = true];
	Starts       string         `protobuf:"bytes,3,opt,name=starts,proto3" json:"starts,omitempty"`
	FortedHome   string         `protobuf:"bytes,4,opt,name=forted_home,json=fortedHome,proto3" json:"forted_home,omitempty"`
	FortedAway   string         `protobuf:"bytes,5,opt,name=forted_away,json=fortedAway,proto3" json:"forted_away,omitempty"`
	FortedProfit string         `protobuf:"bytes,6,opt,name=forted_profit,json=fortedProfit,proto3" json:"forted_profit,omitempty"`
	FortedSport  string         `protobuf:"bytes,7,opt,name=forted_sport,json=fortedSport,proto3" json:"forted_sport,omitempty"`
	FortedLeague string         `protobuf:"bytes,8,opt,name=forted_league,json=fortedLeague,proto3" json:"forted_league,omitempty"`
	FilterName   string         `protobuf:"bytes,9,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"`
	SkynetId     int64          `protobuf:"varint,10,opt,name=skynet_id,json=skynetId,proto3" json:"skynet_id,omitempty"`
	Members      []*SurebetSide `protobuf:"bytes,15,rep,name=members,proto3" json:"members,omitempty"`
}

func (m *Surebet) Reset()      { *m = Surebet{} }
func (*Surebet) ProtoMessage() {}
func (*Surebet) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{4}
}
func (m *Surebet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Surebet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Surebet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Surebet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Surebet.Merge(m, src)
}
func (m *Surebet) XXX_Size() int {
	return m.Size()
}
func (m *Surebet) XXX_DiscardUnknown() {
	xxx_messageInfo_Surebet.DiscardUnknown(m)
}

var xxx_messageInfo_Surebet proto.InternalMessageInfo

func (m *Surebet) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Surebet) GetSurebetHash() string {
	if m != nil {
		return m.SurebetHash
	}
	return ""
}

func (m *Surebet) GetStarts() string {
	if m != nil {
		return m.Starts
	}
	return ""
}

func (m *Surebet) GetFortedHome() string {
	if m != nil {
		return m.FortedHome
	}
	return ""
}

func (m *Surebet) GetFortedAway() string {
	if m != nil {
		return m.FortedAway
	}
	return ""
}

func (m *Surebet) GetFortedProfit() string {
	if m != nil {
		return m.FortedProfit
	}
	return ""
}

func (m *Surebet) GetFortedSport() string {
	if m != nil {
		return m.FortedSport
	}
	return ""
}

func (m *Surebet) GetFortedLeague() string {
	if m != nil {
		return m.FortedLeague
	}
	return ""
}

func (m *Surebet) GetFilterName() string {
	if m != nil {
		return m.FilterName
	}
	return ""
}

func (m *Surebet) GetSkynetId() int64 {
	if m != nil {
		return m.SkynetId
	}
	return 0
}

func (m *Surebet) GetMembers() []*SurebetSide {
	if m != nil {
		return m.Members
	}
	return nil
}

type SurebetSide struct {
	Num         int64   `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	ServiceName string  `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	ServiceId   int64   `protobuf:"varint,11,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	SportName   string  `protobuf:"bytes,3,opt,name=sport_name,json=sportName,proto3" json:"sport_name,omitempty"`
	LeagueName  string  `protobuf:"bytes,4,opt,name=league_name,json=leagueName,proto3" json:"league_name,omitempty"`
	Home        string  `protobuf:"bytes,5,opt,name=home,proto3" json:"home,omitempty"`
	Away        string  `protobuf:"bytes,6,opt,name=away,proto3" json:"away,omitempty"`
	MarketName  string  `protobuf:"bytes,7,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`
	Price       float64 `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	Url         string  `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	Initiator   bool    `protobuf:"varint,10,opt,name=initiator,proto3" json:"initiator,omitempty"`
}

func (m *SurebetSide) Reset()      { *m = SurebetSide{} }
func (*SurebetSide) ProtoMessage() {}
func (*SurebetSide) Descriptor() ([]byte, []int) {
	return fileDescriptor_16a4d244bf92f218, []int{5}
}
func (m *SurebetSide) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SurebetSide) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SurebetSide.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SurebetSide) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SurebetSide.Merge(m, src)
}
func (m *SurebetSide) XXX_Size() int {
	return m.Size()
}
func (m *SurebetSide) XXX_DiscardUnknown() {
	xxx_messageInfo_SurebetSide.DiscardUnknown(m)
}

var xxx_messageInfo_SurebetSide proto.InternalMessageInfo

func (m *SurebetSide) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *SurebetSide) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

func (m *SurebetSide) GetServiceId() int64 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

func (m *SurebetSide) GetSportName() string {
	if m != nil {
		return m.SportName
	}
	return ""
}

func (m *SurebetSide) GetLeagueName() string {
	if m != nil {
		return m.LeagueName
	}
	return ""
}

func (m *SurebetSide) GetHome() string {
	if m != nil {
		return m.Home
	}
	return ""
}

func (m *SurebetSide) GetAway() string {
	if m != nil {
		return m.Away
	}
	return ""
}

func (m *SurebetSide) GetMarketName() string {
	if m != nil {
		return m.MarketName
	}
	return ""
}

func (m *SurebetSide) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SurebetSide) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *SurebetSide) GetInitiator() bool {
	if m != nil {
		return m.Initiator
	}
	return false
}

func init() {
	proto.RegisterType((*CreateSurebetManyRequest)(nil), "fortedpb.CreateSurebetManyRequest")
	proto.RegisterType((*CreateSurebetManyResponse)(nil), "fortedpb.CreateSurebetManyResponse")
	proto.RegisterType((*CreateSurebetRequest)(nil), "fortedpb.CreateSurebetRequest")
	proto.RegisterType((*CreateSurebetResponse)(nil), "fortedpb.CreateSurebetResponse")
	proto.RegisterType((*Surebet)(nil), "fortedpb.Surebet")
	proto.RegisterType((*SurebetSide)(nil), "fortedpb.SurebetSide")
}

func init() { proto.RegisterFile("forted.proto", fileDescriptor_16a4d244bf92f218) }

var fileDescriptor_16a4d244bf92f218 = []byte{
	// 624 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xc1, 0x4e, 0x14, 0x4b,
	0x14, 0x9d, 0x66, 0x60, 0x66, 0xfa, 0x0e, 0xe4, 0x3d, 0x2a, 0x60, 0x4a, 0xd4, 0x46, 0x9b, 0x0d,
	0x89, 0x71, 0x48, 0xf0, 0x07, 0x44, 0x12, 0x85, 0x44, 0x8d, 0x69, 0x56, 0xba, 0x70, 0x52, 0x33,
	0x5d, 0xcc, 0x74, 0xa0, 0xbb, 0xda, 0xea, 0x6a, 0xc9, 0xec, 0xf4, 0x0f, 0xfc, 0x14, 0x3f, 0xc0,
	0x0f, 0x70, 0xc9, 0x92, 0xa5, 0x0c, 0x3f, 0xe0, 0xd2, 0xa5, 0xa9, 0x7b, 0xab, 0xa5, 0x91, 0x41,
	0x77, 0x75, 0xcf, 0x3d, 0x75, 0xea, 0xf4, 0xb9, 0x55, 0x0d, 0x8b, 0x87, 0x4a, 0x1b, 0x19, 0xf7,
	0x72, 0xad, 0x8c, 0x62, 0x1d, 0xaa, 0xf2, 0xc1, 0xda, 0xa3, 0x51, 0x62, 0xc6, 0xe5, 0xa0, 0x37,
	0x54, 0xe9, 0xd6, 0x48, 0x8d, 0xd4, 0x16, 0x12, 0x06, 0xe5, 0x21, 0x56, 0x58, 0xe0, 0x8a, 0x36,
	0x86, 0xcf, 0x81, 0xef, 0x6a, 0x29, 0x8c, 0x3c, 0x28, 0xb5, 0x1c, 0x48, 0xf3, 0x52, 0x64, 0x93,
	0x48, 0xbe, 0x2f, 0x65, 0x61, 0xd8, 0x43, 0x68, 0x17, 0x84, 0x72, 0xef, 0x7e, 0x73, 0xb3, 0xbb,
	0xbd, 0xdc, 0xab, 0x8e, 0xe9, 0x39, 0x7a, 0x54, 0x31, 0xc2, 0x27, 0x70, 0x7b, 0x86, 0x50, 0x91,
	0xab, 0xac, 0x90, 0x6c, 0x03, 0x96, 0x1c, 0xaf, 0x3f, 0x54, 0x65, 0x66, 0xf5, 0xbc, 0xcd, 0x66,
	0xb4, 0xe8, 0xc0, 0x5d, 0x8b, 0x85, 0xbb, 0xb0, 0x72, 0x45, 0x61, 0xa6, 0x0d, 0xef, 0x1f, 0x36,
	0xde, 0xc0, 0xea, 0x1f, 0x22, 0xce, 0xc2, 0x3d, 0x80, 0xca, 0x42, 0x12, 0xbb, 0xf3, 0x7d, 0x87,
	0xec, 0xc7, 0xec, 0x01, 0x54, 0x66, 0xfa, 0x63, 0x51, 0x8c, 0xf9, 0x1c, 0x12, 0xba, 0x0e, 0xdb,
	0x13, 0xc5, 0x38, 0xfc, 0xd4, 0x84, 0xb6, 0x53, 0xb5, 0x6a, 0x43, 0x3c, 0x26, 0xee, 0x0b, 0xb2,
	0xe5, 0x47, 0xbe, 0x43, 0x76, 0xcc, 0x4c, 0x35, 0xff, 0x8a, 0x1a, 0xbb, 0x05, 0xad, 0xc2, 0x08,
	0x6d, 0x0a, 0xde, 0xc4, 0xa6, 0xab, 0xd8, 0x3a, 0x74, 0xe9, 0xeb, 0xfa, 0x63, 0x95, 0x4a, 0x3e,
	0x8f, 0x4d, 0x20, 0x68, 0x4f, 0xa5, 0xb2, 0x46, 0x10, 0x27, 0x62, 0xc2, 0x17, 0xea, 0x84, 0x9d,
	0x13, 0x31, 0xb1, 0x61, 0x3b, 0x42, 0xae, 0xd5, 0x61, 0x62, 0x78, 0x0b, 0x29, 0xee, 0xc2, 0xbc,
	0x46, 0xcc, 0x3a, 0x74, 0xa4, 0x22, 0x57, 0xda, 0xf0, 0x36, 0x39, 0x24, 0xec, 0xc0, 0x42, 0x35,
	0x9d, 0x63, 0x29, 0x46, 0xa5, 0xe4, 0x9d, 0xba, 0xce, 0x0b, 0xc4, 0xd0, 0x4d, 0x72, 0x6c, 0xa4,
	0xee, 0x67, 0x22, 0x95, 0xdc, 0x77, 0x6e, 0x10, 0x7a, 0x25, 0x52, 0xc9, 0xee, 0x80, 0x5f, 0x1c,
	0x4d, 0x32, 0x8a, 0x1d, 0x30, 0xd5, 0x0e, 0x01, 0xfb, 0x31, 0xdb, 0x82, 0x76, 0x2a, 0xd3, 0x81,
	0xd4, 0x05, 0xff, 0x0f, 0x6f, 0xd8, 0xea, 0xb5, 0xd1, 0x1e, 0x24, 0xb1, 0x8c, 0x2a, 0x56, 0xf8,
	0x65, 0x0e, 0xba, 0xb5, 0x06, 0xfb, 0x1f, 0x9a, 0x59, 0x99, 0xba, 0x71, 0xda, 0x25, 0x46, 0x2f,
	0xf5, 0x87, 0x64, 0x28, 0xc9, 0x51, 0x15, 0x3d, 0x61, 0x68, 0xc9, 0x5e, 0x05, 0x47, 0x49, 0x62,
	0xde, 0x75, 0x57, 0x81, 0x90, 0xfd, 0x18, 0xdb, 0x36, 0x00, 0xda, 0x4f, 0xd3, 0xf1, 0x11, 0xc1,
	0xdd, 0xeb, 0xd0, 0xa5, 0x3c, 0xa8, 0xef, 0x06, 0x44, 0x10, 0x12, 0x18, 0xcc, 0xe3, 0xe8, 0x68,
	0x32, 0xb8, 0xb6, 0x18, 0x4e, 0x8b, 0x46, 0x81, 0x6b, 0x2b, 0x94, 0x0a, 0x7d, 0x24, 0xdd, 0x41,
	0x34, 0x01, 0x20, 0x08, 0x85, 0x56, 0x60, 0x21, 0xd7, 0xc9, 0x90, 0x82, 0xf7, 0x22, 0x2a, 0xec,
	0x27, 0x97, 0xfa, 0xd8, 0x25, 0x6d, 0x97, 0xec, 0x2e, 0xf8, 0x49, 0x96, 0x98, 0x44, 0x18, 0xa5,
	0x31, 0xe2, 0x4e, 0x74, 0x09, 0x6c, 0x7f, 0xf5, 0xa0, 0xf5, 0x0c, 0x43, 0x65, 0x11, 0x2c, 0x5d,
	0x79, 0x1c, 0x2c, 0xb8, 0x8c, 0x7b, 0xd6, 0xd3, 0x5b, 0x5b, 0xbf, 0xb1, 0x4f, 0xaf, 0x2a, 0x6c,
	0xb0, 0x77, 0xb0, 0x7c, 0xed, 0xdd, 0xb3, 0xf0, 0x86, 0x7d, 0xb5, 0xbf, 0xcb, 0xda, 0xc6, 0x5f,
	0x39, 0x95, 0xfe, 0xd3, 0xed, 0xb3, 0xf3, 0xa0, 0xf1, 0xe3, 0x3c, 0xf0, 0x7e, 0x9e, 0x07, 0xde,
	0xc7, 0x69, 0xe0, 0x7d, 0x9b, 0x06, 0xde, 0xe9, 0x34, 0xf0, 0xbe, 0x4f, 0x03, 0xef, 0xf3, 0x45,
	0xd0, 0x38, 0xbd, 0x08, 0x1a, 0x67, 0x17, 0x41, 0xe3, 0xed, 0xef, 0x7f, 0xe0, 0xa0, 0x85, 0xff,
	0xb6, 0xc7, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x13, 0xe4, 0xe0, 0x24, 0x05, 0x00, 0x00,
}

func (this *CreateSurebetManyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fortedpb.CreateSurebetManyRequest{")
	if this.Surebet != nil {
		s = append(s, "Surebet: "+fmt.Sprintf("%#v", this.Surebet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSurebetManyResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fortedpb.CreateSurebetManyResponse{")
	s = append(s, "SurebetCount: "+fmt.Sprintf("%#v", this.SurebetCount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSurebetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fortedpb.CreateSurebetRequest{")
	if this.Surebet != nil {
		s = append(s, "Surebet: "+fmt.Sprintf("%#v", this.Surebet)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSurebetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fortedpb.CreateSurebetResponse{")
	s = append(s, "SurebetId: "+fmt.Sprintf("%#v", this.SurebetId)+",\n")
	s = append(s, "SurebetHash: "+fmt.Sprintf("%#v", this.SurebetHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Surebet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&fortedpb.Surebet{")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "SurebetHash: "+fmt.Sprintf("%#v", this.SurebetHash)+",\n")
	s = append(s, "Starts: "+fmt.Sprintf("%#v", this.Starts)+",\n")
	s = append(s, "FortedHome: "+fmt.Sprintf("%#v", this.FortedHome)+",\n")
	s = append(s, "FortedAway: "+fmt.Sprintf("%#v", this.FortedAway)+",\n")
	s = append(s, "FortedProfit: "+fmt.Sprintf("%#v", this.FortedProfit)+",\n")
	s = append(s, "FortedSport: "+fmt.Sprintf("%#v", this.FortedSport)+",\n")
	s = append(s, "FortedLeague: "+fmt.Sprintf("%#v", this.FortedLeague)+",\n")
	s = append(s, "FilterName: "+fmt.Sprintf("%#v", this.FilterName)+",\n")
	s = append(s, "SkynetId: "+fmt.Sprintf("%#v", this.SkynetId)+",\n")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SurebetSide) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&fortedpb.SurebetSide{")
	s = append(s, "Num: "+fmt.Sprintf("%#v", this.Num)+",\n")
	s = append(s, "ServiceName: "+fmt.Sprintf("%#v", this.ServiceName)+",\n")
	s = append(s, "ServiceId: "+fmt.Sprintf("%#v", this.ServiceId)+",\n")
	s = append(s, "SportName: "+fmt.Sprintf("%#v", this.SportName)+",\n")
	s = append(s, "LeagueName: "+fmt.Sprintf("%#v", this.LeagueName)+",\n")
	s = append(s, "Home: "+fmt.Sprintf("%#v", this.Home)+",\n")
	s = append(s, "Away: "+fmt.Sprintf("%#v", this.Away)+",\n")
	s = append(s, "MarketName: "+fmt.Sprintf("%#v", this.MarketName)+",\n")
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "Initiator: "+fmt.Sprintf("%#v", this.Initiator)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringForted(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FortedClient is the client API for Forted service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FortedClient interface {
	CreateSurebet(ctx context.Context, in *CreateSurebetRequest, opts ...grpc.CallOption) (*CreateSurebetResponse, error)
	CreateSurebetMany(ctx context.Context, in *CreateSurebetManyRequest, opts ...grpc.CallOption) (*CreateSurebetManyResponse, error)
}

type fortedClient struct {
	cc *grpc.ClientConn
}

func NewFortedClient(cc *grpc.ClientConn) FortedClient {
	return &fortedClient{cc}
}

func (c *fortedClient) CreateSurebet(ctx context.Context, in *CreateSurebetRequest, opts ...grpc.CallOption) (*CreateSurebetResponse, error) {
	out := new(CreateSurebetResponse)
	err := c.cc.Invoke(ctx, "/fortedpb.Forted/CreateSurebet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fortedClient) CreateSurebetMany(ctx context.Context, in *CreateSurebetManyRequest, opts ...grpc.CallOption) (*CreateSurebetManyResponse, error) {
	out := new(CreateSurebetManyResponse)
	err := c.cc.Invoke(ctx, "/fortedpb.Forted/CreateSurebetMany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FortedServer is the server API for Forted service.
type FortedServer interface {
	CreateSurebet(context.Context, *CreateSurebetRequest) (*CreateSurebetResponse, error)
	CreateSurebetMany(context.Context, *CreateSurebetManyRequest) (*CreateSurebetManyResponse, error)
}

// UnimplementedFortedServer can be embedded to have forward compatible implementations.
type UnimplementedFortedServer struct {
}

func (*UnimplementedFortedServer) CreateSurebet(ctx context.Context, req *CreateSurebetRequest) (*CreateSurebetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurebet not implemented")
}
func (*UnimplementedFortedServer) CreateSurebetMany(ctx context.Context, req *CreateSurebetManyRequest) (*CreateSurebetManyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurebetMany not implemented")
}

func RegisterFortedServer(s *grpc.Server, srv FortedServer) {
	s.RegisterService(&_Forted_serviceDesc, srv)
}

func _Forted_CreateSurebet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSurebetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FortedServer).CreateSurebet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fortedpb.Forted/CreateSurebet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FortedServer).CreateSurebet(ctx, req.(*CreateSurebetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forted_CreateSurebetMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSurebetManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FortedServer).CreateSurebetMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fortedpb.Forted/CreateSurebetMany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FortedServer).CreateSurebetMany(ctx, req.(*CreateSurebetManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Forted_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fortedpb.Forted",
	HandlerType: (*FortedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSurebet",
			Handler:    _Forted_CreateSurebet_Handler,
		},
		{
			MethodName: "CreateSurebetMany",
			Handler:    _Forted_CreateSurebetMany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "forted.proto",
}

func (m *CreateSurebetManyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSurebetManyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSurebetManyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Surebet) > 0 {
		for iNdEx := len(m.Surebet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Surebet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForted(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateSurebetManyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSurebetManyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSurebetManyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SurebetCount != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.SurebetCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateSurebetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSurebetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSurebetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Surebet != nil {
		{
			size, err := m.Surebet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintForted(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSurebetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSurebetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSurebetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SurebetHash != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.SurebetHash))
		i--
		dAtA[i] = 0x10
	}
	if m.SurebetId != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.SurebetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Surebet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Surebet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Surebet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintForted(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.SkynetId != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.SkynetId))
		i--
		dAtA[i] = 0x50
	}
	if len(m.FilterName) > 0 {
		i -= len(m.FilterName)
		copy(dAtA[i:], m.FilterName)
		i = encodeVarintForted(dAtA, i, uint64(len(m.FilterName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FortedLeague) > 0 {
		i -= len(m.FortedLeague)
		copy(dAtA[i:], m.FortedLeague)
		i = encodeVarintForted(dAtA, i, uint64(len(m.FortedLeague)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.FortedSport) > 0 {
		i -= len(m.FortedSport)
		copy(dAtA[i:], m.FortedSport)
		i = encodeVarintForted(dAtA, i, uint64(len(m.FortedSport)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.FortedProfit) > 0 {
		i -= len(m.FortedProfit)
		copy(dAtA[i:], m.FortedProfit)
		i = encodeVarintForted(dAtA, i, uint64(len(m.FortedProfit)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FortedAway) > 0 {
		i -= len(m.FortedAway)
		copy(dAtA[i:], m.FortedAway)
		i = encodeVarintForted(dAtA, i, uint64(len(m.FortedAway)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FortedHome) > 0 {
		i -= len(m.FortedHome)
		copy(dAtA[i:], m.FortedHome)
		i = encodeVarintForted(dAtA, i, uint64(len(m.FortedHome)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Starts) > 0 {
		i -= len(m.Starts)
		copy(dAtA[i:], m.Starts)
		i = encodeVarintForted(dAtA, i, uint64(len(m.Starts)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SurebetHash) > 0 {
		i -= len(m.SurebetHash)
		copy(dAtA[i:], m.SurebetHash)
		i = encodeVarintForted(dAtA, i, uint64(len(m.SurebetHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintForted(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SurebetSide) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SurebetSide) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SurebetSide) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceId != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.ServiceId))
		i--
		dAtA[i] = 0x58
	}
	if m.Initiator {
		i--
		if m.Initiator {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintForted(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x41
	}
	if len(m.MarketName) > 0 {
		i -= len(m.MarketName)
		copy(dAtA[i:], m.MarketName)
		i = encodeVarintForted(dAtA, i, uint64(len(m.MarketName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Away) > 0 {
		i -= len(m.Away)
		copy(dAtA[i:], m.Away)
		i = encodeVarintForted(dAtA, i, uint64(len(m.Away)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Home) > 0 {
		i -= len(m.Home)
		copy(dAtA[i:], m.Home)
		i = encodeVarintForted(dAtA, i, uint64(len(m.Home)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LeagueName) > 0 {
		i -= len(m.LeagueName)
		copy(dAtA[i:], m.LeagueName)
		i = encodeVarintForted(dAtA, i, uint64(len(m.LeagueName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SportName) > 0 {
		i -= len(m.SportName)
		copy(dAtA[i:], m.SportName)
		i = encodeVarintForted(dAtA, i, uint64(len(m.SportName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServiceName) > 0 {
		i -= len(m.ServiceName)
		copy(dAtA[i:], m.ServiceName)
		i = encodeVarintForted(dAtA, i, uint64(len(m.ServiceName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Num != 0 {
		i = encodeVarintForted(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintForted(dAtA []byte, offset int, v uint64) int {
	offset -= sovForted(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedCreateSurebetManyRequest(r randyForted, easy bool) *CreateSurebetManyRequest {
	this := &CreateSurebetManyRequest{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Surebet = make([]*Surebet, v1)
		for i := 0; i < v1; i++ {
			this.Surebet[i] = NewPopulatedSurebet(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateSurebetManyResponse(r randyForted, easy bool) *CreateSurebetManyResponse {
	this := &CreateSurebetManyResponse{}
	this.SurebetCount = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.SurebetCount *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateSurebetRequest(r randyForted, easy bool) *CreateSurebetRequest {
	this := &CreateSurebetRequest{}
	if r.Intn(5) != 0 {
		this.Surebet = NewPopulatedSurebet(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateSurebetResponse(r randyForted, easy bool) *CreateSurebetResponse {
	this := &CreateSurebetResponse{}
	this.SurebetId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.SurebetId *= -1
	}
	this.SurebetHash = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.SurebetHash *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSurebet(r randyForted, easy bool) *Surebet {
	this := &Surebet{}
	this.CreatedAt = string(randStringForted(r))
	this.SurebetHash = string(randStringForted(r))
	this.Starts = string(randStringForted(r))
	this.FortedHome = string(randStringForted(r))
	this.FortedAway = string(randStringForted(r))
	this.FortedProfit = string(randStringForted(r))
	this.FortedSport = string(randStringForted(r))
	this.FortedLeague = string(randStringForted(r))
	this.FilterName = string(randStringForted(r))
	this.SkynetId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.SkynetId *= -1
	}
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.Members = make([]*SurebetSide, v2)
		for i := 0; i < v2; i++ {
			this.Members[i] = NewPopulatedSurebetSide(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSurebetSide(r randyForted, easy bool) *SurebetSide {
	this := &SurebetSide{}
	this.Num = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Num *= -1
	}
	this.ServiceName = string(randStringForted(r))
	this.SportName = string(randStringForted(r))
	this.LeagueName = string(randStringForted(r))
	this.Home = string(randStringForted(r))
	this.Away = string(randStringForted(r))
	this.MarketName = string(randStringForted(r))
	this.Price = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Price *= -1
	}
	this.Url = string(randStringForted(r))
	this.Initiator = bool(bool(r.Intn(2) == 0))
	this.ServiceId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ServiceId *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyForted interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneForted(r randyForted) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringForted(r randyForted) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneForted(r)
	}
	return string(tmps)
}
func randUnrecognizedForted(r randyForted, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldForted(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldForted(dAtA []byte, r randyForted, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateForted(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateForted(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateForted(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateForted(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateForted(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateForted(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateForted(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *CreateSurebetManyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Surebet) > 0 {
		for _, e := range m.Surebet {
			l = e.Size()
			n += 1 + l + sovForted(uint64(l))
		}
	}
	return n
}

func (m *CreateSurebetManyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SurebetCount != 0 {
		n += 1 + sovForted(uint64(m.SurebetCount))
	}
	return n
}

func (m *CreateSurebetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Surebet != nil {
		l = m.Surebet.Size()
		n += 1 + l + sovForted(uint64(l))
	}
	return n
}

func (m *CreateSurebetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SurebetId != 0 {
		n += 1 + sovForted(uint64(m.SurebetId))
	}
	if m.SurebetHash != 0 {
		n += 1 + sovForted(uint64(m.SurebetHash))
	}
	return n
}

func (m *Surebet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.SurebetHash)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.Starts)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.FortedHome)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.FortedAway)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.FortedProfit)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.FortedSport)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.FortedLeague)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.FilterName)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	if m.SkynetId != 0 {
		n += 1 + sovForted(uint64(m.SkynetId))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovForted(uint64(l))
		}
	}
	return n
}

func (m *SurebetSide) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovForted(uint64(m.Num))
	}
	l = len(m.ServiceName)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.SportName)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.LeagueName)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.Home)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.Away)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	l = len(m.MarketName)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	if m.Price != 0 {
		n += 9
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovForted(uint64(l))
	}
	if m.Initiator {
		n += 2
	}
	if m.ServiceId != 0 {
		n += 1 + sovForted(uint64(m.ServiceId))
	}
	return n
}

func sovForted(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozForted(x uint64) (n int) {
	return sovForted(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateSurebetManyRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSurebet := "[]*Surebet{"
	for _, f := range this.Surebet {
		repeatedStringForSurebet += strings.Replace(f.String(), "Surebet", "Surebet", 1) + ","
	}
	repeatedStringForSurebet += "}"
	s := strings.Join([]string{`&CreateSurebetManyRequest{`,
		`Surebet:` + repeatedStringForSurebet + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSurebetManyResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSurebetManyResponse{`,
		`SurebetCount:` + fmt.Sprintf("%v", this.SurebetCount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSurebetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSurebetRequest{`,
		`Surebet:` + strings.Replace(this.Surebet.String(), "Surebet", "Surebet", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSurebetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSurebetResponse{`,
		`SurebetId:` + fmt.Sprintf("%v", this.SurebetId) + `,`,
		`SurebetHash:` + fmt.Sprintf("%v", this.SurebetHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Surebet) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMembers := "[]*SurebetSide{"
	for _, f := range this.Members {
		repeatedStringForMembers += strings.Replace(f.String(), "SurebetSide", "SurebetSide", 1) + ","
	}
	repeatedStringForMembers += "}"
	s := strings.Join([]string{`&Surebet{`,
		`CreatedAt:` + fmt.Sprintf("%v", this.CreatedAt) + `,`,
		`SurebetHash:` + fmt.Sprintf("%v", this.SurebetHash) + `,`,
		`Starts:` + fmt.Sprintf("%v", this.Starts) + `,`,
		`FortedHome:` + fmt.Sprintf("%v", this.FortedHome) + `,`,
		`FortedAway:` + fmt.Sprintf("%v", this.FortedAway) + `,`,
		`FortedProfit:` + fmt.Sprintf("%v", this.FortedProfit) + `,`,
		`FortedSport:` + fmt.Sprintf("%v", this.FortedSport) + `,`,
		`FortedLeague:` + fmt.Sprintf("%v", this.FortedLeague) + `,`,
		`FilterName:` + fmt.Sprintf("%v", this.FilterName) + `,`,
		`SkynetId:` + fmt.Sprintf("%v", this.SkynetId) + `,`,
		`Members:` + repeatedStringForMembers + `,`,
		`}`,
	}, "")
	return s
}
func (this *SurebetSide) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SurebetSide{`,
		`Num:` + fmt.Sprintf("%v", this.Num) + `,`,
		`ServiceName:` + fmt.Sprintf("%v", this.ServiceName) + `,`,
		`SportName:` + fmt.Sprintf("%v", this.SportName) + `,`,
		`LeagueName:` + fmt.Sprintf("%v", this.LeagueName) + `,`,
		`Home:` + fmt.Sprintf("%v", this.Home) + `,`,
		`Away:` + fmt.Sprintf("%v", this.Away) + `,`,
		`MarketName:` + fmt.Sprintf("%v", this.MarketName) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`Initiator:` + fmt.Sprintf("%v", this.Initiator) + `,`,
		`ServiceId:` + fmt.Sprintf("%v", this.ServiceId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringForted(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateSurebetManyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSurebetManyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSurebetManyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Surebet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Surebet = append(m.Surebet, &Surebet{})
			if err := m.Surebet[len(m.Surebet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSurebetManyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSurebetManyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSurebetManyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurebetCount", wireType)
			}
			m.SurebetCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurebetCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSurebetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSurebetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSurebetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Surebet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Surebet == nil {
				m.Surebet = &Surebet{}
			}
			if err := m.Surebet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSurebetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSurebetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSurebetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurebetId", wireType)
			}
			m.SurebetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurebetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurebetHash", wireType)
			}
			m.SurebetHash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SurebetHash |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Surebet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Surebet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Surebet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SurebetHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SurebetHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Starts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Starts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FortedHome", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FortedHome = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FortedAway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FortedAway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FortedProfit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FortedProfit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FortedSport", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FortedSport = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FortedLeague", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FortedLeague = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkynetId", wireType)
			}
			m.SkynetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkynetId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &SurebetSide{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SurebetSide) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowForted
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SurebetSide: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SurebetSide: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SportName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SportName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeagueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeagueName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Home", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Home = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Away", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Away = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthForted
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthForted
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Initiator", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Initiator = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			m.ServiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowForted
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipForted(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthForted
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipForted(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowForted
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowForted
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowForted
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthForted
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupForted
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthForted
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthForted        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowForted          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupForted = fmt.Errorf("proto: unexpected end of group")
)
